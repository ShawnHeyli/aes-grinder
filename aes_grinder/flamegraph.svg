<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1446" onload="init(evt)" viewBox="0 0 1200 1446" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1446" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1429.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1429.00"> </text><svg id="frames" x="10" width="1180" total_samples="61370"><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.01%)</title><rect x="0.0065%" y="1349" width="0.0114%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="7"/><text x="0.2565%" y="1359.50"></text></g><g><title>[ld-linux-x86-64.so.2] (9 samples, 0.01%)</title><rect x="0.0049%" y="1365" width="0.0147%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="9"/><text x="0.2549%" y="1375.50"></text></g><g><title>[unknown] (10 samples, 0.02%)</title><rect x="0.0228%" y="1365" width="0.0163%" height="15" fill="rgb(221,193,54)" fg:x="14" fg:w="10"/><text x="0.2728%" y="1375.50"></text></g><g><title>aes_grinder::algo::Algo::base_solver (26 samples, 0.04%)</title><rect x="0.0456%" y="1061" width="0.0424%" height="15" fill="rgb(248,212,6)" fg:x="28" fg:w="26"/><text x="0.2956%" y="1071.50"></text></g><g><title>aes_grinder::matrix::Matrix::number_solutions (26 samples, 0.04%)</title><rect x="0.0456%" y="1045" width="0.0424%" height="15" fill="rgb(208,68,35)" fg:x="28" fg:w="26"/><text x="0.2956%" y="1055.50"></text></g><g><title>aes_grinder::matrix::Matrix::scale_on (26 samples, 0.04%)</title><rect x="0.0456%" y="1029" width="0.0424%" height="15" fill="rgb(232,128,0)" fg:x="28" fg:w="26"/><text x="0.2956%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.02%)</title><rect x="0.4791%" y="981" width="0.0228%" height="15" fill="rgb(207,160,47)" fg:x="294" fg:w="14"/><text x="0.7291%" y="991.50"></text></g><g><title>core::slice::raw::from_raw_parts (14 samples, 0.02%)</title><rect x="0.4791%" y="965" width="0.0228%" height="15" fill="rgb(228,23,34)" fg:x="294" fg:w="14"/><text x="0.7291%" y="975.50"></text></g><g><title>core::ptr::slice_from_raw_parts (14 samples, 0.02%)</title><rect x="0.4791%" y="949" width="0.0228%" height="15" fill="rgb(218,30,26)" fg:x="294" fg:w="14"/><text x="0.7291%" y="959.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (14 samples, 0.02%)</title><rect x="0.4791%" y="933" width="0.0228%" height="15" fill="rgb(220,122,19)" fg:x="294" fg:w="14"/><text x="0.7291%" y="943.50"></text></g><g><title>&lt;aes_grinder::matrix::Matrix as core::ops::index::Index&lt;(usize,usize)&gt;&gt;::index (131 samples, 0.21%)</title><rect x="0.3308%" y="1013" width="0.2135%" height="15" fill="rgb(250,228,42)" fg:x="203" fg:w="131"/><text x="0.5808%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (95 samples, 0.15%)</title><rect x="0.3894%" y="997" width="0.1548%" height="15" fill="rgb(240,193,28)" fg:x="239" fg:w="95"/><text x="0.6394%" y="1007.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (26 samples, 0.04%)</title><rect x="0.5019%" y="981" width="0.0424%" height="15" fill="rgb(216,20,37)" fg:x="308" fg:w="26"/><text x="0.7519%" y="991.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (20 samples, 0.03%)</title><rect x="0.5117%" y="965" width="0.0326%" height="15" fill="rgb(206,188,39)" fg:x="314" fg:w="20"/><text x="0.7617%" y="975.50"></text></g><g><title>&lt;aes_grinder::matrix::Matrix as core::ops::index::IndexMut&lt;(usize,usize)&gt;&gt;::index_mut (53 samples, 0.09%)</title><rect x="0.5442%" y="1013" width="0.0864%" height="15" fill="rgb(217,207,13)" fg:x="334" fg:w="53"/><text x="0.7942%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (40 samples, 0.07%)</title><rect x="0.5654%" y="997" width="0.0652%" height="15" fill="rgb(231,73,38)" fg:x="347" fg:w="40"/><text x="0.8154%" y="1007.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (11 samples, 0.02%)</title><rect x="0.6127%" y="981" width="0.0179%" height="15" fill="rgb(225,20,46)" fg:x="376" fg:w="11"/><text x="0.8627%" y="991.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (11 samples, 0.02%)</title><rect x="0.6127%" y="965" width="0.0179%" height="15" fill="rgb(210,31,41)" fg:x="376" fg:w="11"/><text x="0.8627%" y="975.50"></text></g><g><title>&lt;aes_grinder::utils::Number as core::ops::arith::Add&gt;::add (36 samples, 0.06%)</title><rect x="0.6306%" y="1013" width="0.0587%" height="15" fill="rgb(221,200,47)" fg:x="387" fg:w="36"/><text x="0.8806%" y="1023.50"></text></g><g><title>&lt;aes_grinder::utils::Number as core::ops::arith::Mul&gt;::mul (28 samples, 0.05%)</title><rect x="0.6893%" y="1013" width="0.0456%" height="15" fill="rgb(226,26,5)" fg:x="423" fg:w="28"/><text x="0.9393%" y="1023.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="0.7838%" y="917" width="0.0114%" height="15" fill="rgb(249,33,26)" fg:x="481" fg:w="7"/><text x="1.0338%" y="927.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (7 samples, 0.01%)</title><rect x="0.8001%" y="917" width="0.0114%" height="15" fill="rgb(235,183,28)" fg:x="491" fg:w="7"/><text x="1.0501%" y="927.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.04%)</title><rect x="0.7724%" y="949" width="0.0440%" height="15" fill="rgb(221,5,38)" fg:x="474" fg:w="27"/><text x="1.0224%" y="959.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (26 samples, 0.04%)</title><rect x="0.7740%" y="933" width="0.0424%" height="15" fill="rgb(247,18,42)" fg:x="475" fg:w="26"/><text x="1.0240%" y="943.50"></text></g><g><title>&lt;std::collections::hash::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.07%)</title><rect x="0.7544%" y="981" width="0.0652%" height="15" fill="rgb(241,131,45)" fg:x="463" fg:w="40"/><text x="1.0044%" y="991.50"></text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.07%)</title><rect x="0.7544%" y="965" width="0.0652%" height="15" fill="rgb(249,31,29)" fg:x="463" fg:w="40"/><text x="1.0044%" y="975.50"></text></g><g><title>aes_grinder::matrix::Matrix::swap_columns (52 samples, 0.08%)</title><rect x="0.7398%" y="997" width="0.0847%" height="15" fill="rgb(225,111,53)" fg:x="454" fg:w="52"/><text x="0.9898%" y="1007.50"></text></g><g><title>aes_grinder::matrix::Matrix::sort_left (60 samples, 0.10%)</title><rect x="0.7381%" y="1013" width="0.0978%" height="15" fill="rgb(238,160,17)" fg:x="453" fg:w="60"/><text x="0.9881%" y="1023.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (7 samples, 0.01%)</title><rect x="0.8245%" y="997" width="0.0114%" height="15" fill="rgb(214,148,48)" fg:x="506" fg:w="7"/><text x="1.0745%" y="1007.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (7 samples, 0.01%)</title><rect x="0.8245%" y="981" width="0.0114%" height="15" fill="rgb(232,36,49)" fg:x="506" fg:w="7"/><text x="1.0745%" y="991.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (7 samples, 0.01%)</title><rect x="0.8245%" y="965" width="0.0114%" height="15" fill="rgb(209,103,24)" fg:x="506" fg:w="7"/><text x="1.0745%" y="975.50"></text></g><g><title>&lt;aes_grinder::matrix::Matrix as core::ops::index::Index&lt;(usize,usize)&gt;&gt;::index (11 samples, 0.02%)</title><rect x="0.8473%" y="997" width="0.0179%" height="15" fill="rgb(229,88,8)" fg:x="520" fg:w="11"/><text x="1.0973%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (8 samples, 0.01%)</title><rect x="0.8522%" y="981" width="0.0130%" height="15" fill="rgb(213,181,19)" fg:x="523" fg:w="8"/><text x="1.1022%" y="991.50"></text></g><g><title>&lt;aes_grinder::matrix::Matrix as core::ops::index::IndexMut&lt;(usize,usize)&gt;&gt;::index_mut (18 samples, 0.03%)</title><rect x="0.8652%" y="997" width="0.0293%" height="15" fill="rgb(254,191,54)" fg:x="531" fg:w="18"/><text x="1.1152%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (10 samples, 0.02%)</title><rect x="0.8783%" y="981" width="0.0163%" height="15" fill="rgb(241,83,37)" fg:x="539" fg:w="10"/><text x="1.1283%" y="991.50"></text></g><g><title>aes_grinder::matrix::Matrix::swap_lines (37 samples, 0.06%)</title><rect x="0.8359%" y="1013" width="0.0603%" height="15" fill="rgb(233,36,39)" fg:x="513" fg:w="37"/><text x="1.0859%" y="1023.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (34 samples, 0.06%)</title><rect x="0.8995%" y="1013" width="0.0554%" height="15" fill="rgb(226,3,54)" fg:x="552" fg:w="34"/><text x="1.1495%" y="1023.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (30 samples, 0.05%)</title><rect x="0.9060%" y="997" width="0.0489%" height="15" fill="rgb(245,192,40)" fg:x="556" fg:w="30"/><text x="1.1560%" y="1007.50"></text></g><g><title>aes_grinder::matrix::Matrix::scale_on (525 samples, 0.86%)</title><rect x="0.1027%" y="1029" width="0.8555%" height="15" fill="rgb(238,167,29)" fg:x="63" fg:w="525"/><text x="0.3527%" y="1039.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10 samples, 0.02%)</title><rect x="0.9581%" y="965" width="0.0163%" height="15" fill="rgb(232,182,51)" fg:x="588" fg:w="10"/><text x="1.2081%" y="975.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (10 samples, 0.02%)</title><rect x="0.9581%" y="949" width="0.0163%" height="15" fill="rgb(231,60,39)" fg:x="588" fg:w="10"/><text x="1.2081%" y="959.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (10 samples, 0.02%)</title><rect x="0.9581%" y="933" width="0.0163%" height="15" fill="rgb(208,69,12)" fg:x="588" fg:w="10"/><text x="1.2081%" y="943.50"></text></g><g><title>aes_grinder::matrix::Matrix::number_solutions::_{{closure}} (10 samples, 0.02%)</title><rect x="0.9581%" y="917" width="0.0163%" height="15" fill="rgb(235,93,37)" fg:x="588" fg:w="10"/><text x="1.2081%" y="927.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (10 samples, 0.02%)</title><rect x="0.9581%" y="901" width="0.0163%" height="15" fill="rgb(213,116,39)" fg:x="588" fg:w="10"/><text x="1.2081%" y="911.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (10 samples, 0.02%)</title><rect x="0.9581%" y="885" width="0.0163%" height="15" fill="rgb(222,207,29)" fg:x="588" fg:w="10"/><text x="1.2081%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (10 samples, 0.02%)</title><rect x="0.9581%" y="869" width="0.0163%" height="15" fill="rgb(206,96,30)" fg:x="588" fg:w="10"/><text x="1.2081%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (10 samples, 0.02%)</title><rect x="0.9581%" y="853" width="0.0163%" height="15" fill="rgb(218,138,4)" fg:x="588" fg:w="10"/><text x="1.2081%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (7 samples, 0.01%)</title><rect x="0.9630%" y="837" width="0.0114%" height="15" fill="rgb(250,191,14)" fg:x="591" fg:w="7"/><text x="1.2130%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7 samples, 0.01%)</title><rect x="0.9630%" y="821" width="0.0114%" height="15" fill="rgb(239,60,40)" fg:x="591" fg:w="7"/><text x="1.2130%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (7 samples, 0.01%)</title><rect x="0.9630%" y="805" width="0.0114%" height="15" fill="rgb(206,27,48)" fg:x="591" fg:w="7"/><text x="1.2130%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (11 samples, 0.02%)</title><rect x="0.9581%" y="1029" width="0.0179%" height="15" fill="rgb(225,35,8)" fg:x="588" fg:w="11"/><text x="1.2081%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (11 samples, 0.02%)</title><rect x="0.9581%" y="1013" width="0.0179%" height="15" fill="rgb(250,213,24)" fg:x="588" fg:w="11"/><text x="1.2081%" y="1023.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (11 samples, 0.02%)</title><rect x="0.9581%" y="997" width="0.0179%" height="15" fill="rgb(247,123,22)" fg:x="588" fg:w="11"/><text x="1.2081%" y="1007.50"></text></g><g><title>&lt;I as alloc::vec::in_place_collect::SpecInPlaceCollect&lt;T,I&gt;&gt;::collect_in_place (11 samples, 0.02%)</title><rect x="0.9581%" y="981" width="0.0179%" height="15" fill="rgb(231,138,38)" fg:x="588" fg:w="11"/><text x="1.2081%" y="991.50"></text></g><g><title>aes_grinder::matrix::Matrix::number_solutions (544 samples, 0.89%)</title><rect x="0.0929%" y="1045" width="0.8864%" height="15" fill="rgb(231,145,46)" fg:x="57" fg:w="544"/><text x="0.3429%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (7 samples, 0.01%)</title><rect x="0.9793%" y="1045" width="0.0114%" height="15" fill="rgb(251,118,11)" fg:x="601" fg:w="7"/><text x="1.2293%" y="1055.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="0.9793%" y="1029" width="0.0114%" height="15" fill="rgb(217,147,25)" fg:x="601" fg:w="7"/><text x="1.2293%" y="1039.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (7 samples, 0.01%)</title><rect x="0.9793%" y="1013" width="0.0114%" height="15" fill="rgb(247,81,37)" fg:x="601" fg:w="7"/><text x="1.2293%" y="1023.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (7 samples, 0.01%)</title><rect x="0.9793%" y="997" width="0.0114%" height="15" fill="rgb(209,12,38)" fg:x="601" fg:w="7"/><text x="1.2293%" y="1007.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (7 samples, 0.01%)</title><rect x="0.9793%" y="981" width="0.0114%" height="15" fill="rgb(227,1,9)" fg:x="601" fg:w="7"/><text x="1.2293%" y="991.50"></text></g><g><title>aes_grinder::algo::Algo::fusion_two_algo (557 samples, 0.91%)</title><rect x="0.0880%" y="1061" width="0.9076%" height="15" fill="rgb(248,47,43)" fg:x="54" fg:w="557"/><text x="0.3380%" y="1071.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (7 samples, 0.01%)</title><rect x="1.0575%" y="405" width="0.0114%" height="15" fill="rgb(221,10,30)" fg:x="649" fg:w="7"/><text x="1.3075%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (7 samples, 0.01%)</title><rect x="1.0575%" y="389" width="0.0114%" height="15" fill="rgb(210,229,1)" fg:x="649" fg:w="7"/><text x="1.3075%" y="399.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.02%)</title><rect x="1.0559%" y="437" width="0.0179%" height="15" fill="rgb(222,148,37)" fg:x="648" fg:w="11"/><text x="1.3059%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.02%)</title><rect x="1.0559%" y="421" width="0.0179%" height="15" fill="rgb(234,67,33)" fg:x="648" fg:w="11"/><text x="1.3059%" y="431.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (17 samples, 0.03%)</title><rect x="1.0477%" y="501" width="0.0277%" height="15" fill="rgb(247,98,35)" fg:x="643" fg:w="17"/><text x="1.2977%" y="511.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (17 samples, 0.03%)</title><rect x="1.0477%" y="485" width="0.0277%" height="15" fill="rgb(247,138,52)" fg:x="643" fg:w="17"/><text x="1.2977%" y="495.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (12 samples, 0.02%)</title><rect x="1.0559%" y="469" width="0.0196%" height="15" fill="rgb(213,79,30)" fg:x="648" fg:w="12"/><text x="1.3059%" y="479.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.02%)</title><rect x="1.0559%" y="453" width="0.0196%" height="15" fill="rgb(246,177,23)" fg:x="648" fg:w="12"/><text x="1.3059%" y="463.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (19 samples, 0.03%)</title><rect x="1.0477%" y="533" width="0.0310%" height="15" fill="rgb(230,62,27)" fg:x="643" fg:w="19"/><text x="1.2977%" y="543.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (19 samples, 0.03%)</title><rect x="1.0477%" y="517" width="0.0310%" height="15" fill="rgb(216,154,8)" fg:x="643" fg:w="19"/><text x="1.2977%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (24 samples, 0.04%)</title><rect x="1.0836%" y="469" width="0.0391%" height="15" fill="rgb(244,35,45)" fg:x="665" fg:w="24"/><text x="1.3336%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (24 samples, 0.04%)</title><rect x="1.0836%" y="453" width="0.0391%" height="15" fill="rgb(251,115,12)" fg:x="665" fg:w="24"/><text x="1.3336%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (39 samples, 0.06%)</title><rect x="1.0787%" y="485" width="0.0635%" height="15" fill="rgb(240,54,50)" fg:x="662" fg:w="39"/><text x="1.3287%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (12 samples, 0.02%)</title><rect x="1.1227%" y="469" width="0.0196%" height="15" fill="rgb(233,84,52)" fg:x="689" fg:w="12"/><text x="1.3727%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (12 samples, 0.02%)</title><rect x="1.1227%" y="453" width="0.0196%" height="15" fill="rgb(207,117,47)" fg:x="689" fg:w="12"/><text x="1.3727%" y="463.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (7 samples, 0.01%)</title><rect x="1.1308%" y="437" width="0.0114%" height="15" fill="rgb(249,43,39)" fg:x="694" fg:w="7"/><text x="1.3808%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.01%)</title><rect x="1.1308%" y="421" width="0.0114%" height="15" fill="rgb(209,38,44)" fg:x="694" fg:w="7"/><text x="1.3808%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.01%)</title><rect x="1.1308%" y="405" width="0.0114%" height="15" fill="rgb(236,212,23)" fg:x="694" fg:w="7"/><text x="1.3808%" y="415.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (43 samples, 0.07%)</title><rect x="1.0787%" y="501" width="0.0701%" height="15" fill="rgb(242,79,21)" fg:x="662" fg:w="43"/><text x="1.3287%" y="511.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (45 samples, 0.07%)</title><rect x="1.0787%" y="517" width="0.0733%" height="15" fill="rgb(211,96,35)" fg:x="662" fg:w="45"/><text x="1.3287%" y="527.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (67 samples, 0.11%)</title><rect x="1.0461%" y="549" width="0.1092%" height="15" fill="rgb(253,215,40)" fg:x="642" fg:w="67"/><text x="1.2961%" y="559.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (47 samples, 0.08%)</title><rect x="1.0787%" y="533" width="0.0766%" height="15" fill="rgb(211,81,21)" fg:x="662" fg:w="47"/><text x="1.3287%" y="543.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (69 samples, 0.11%)</title><rect x="1.0461%" y="565" width="0.1124%" height="15" fill="rgb(208,190,38)" fg:x="642" fg:w="69"/><text x="1.2961%" y="575.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (77 samples, 0.13%)</title><rect x="1.0445%" y="597" width="0.1255%" height="15" fill="rgb(235,213,38)" fg:x="641" fg:w="77"/><text x="1.2945%" y="607.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (77 samples, 0.13%)</title><rect x="1.0445%" y="581" width="0.1255%" height="15" fill="rgb(237,122,38)" fg:x="641" fg:w="77"/><text x="1.2945%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.01%)</title><rect x="1.1814%" y="501" width="0.0147%" height="15" fill="rgb(244,218,35)" fg:x="725" fg:w="9"/><text x="1.4314%" y="511.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (8 samples, 0.01%)</title><rect x="1.1830%" y="485" width="0.0130%" height="15" fill="rgb(240,68,47)" fg:x="726" fg:w="8"/><text x="1.4330%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (12 samples, 0.02%)</title><rect x="1.2009%" y="485" width="0.0196%" height="15" fill="rgb(210,16,53)" fg:x="737" fg:w="12"/><text x="1.4509%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.02%)</title><rect x="1.2009%" y="469" width="0.0196%" height="15" fill="rgb(235,124,12)" fg:x="737" fg:w="12"/><text x="1.4509%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 0.02%)</title><rect x="1.2009%" y="453" width="0.0196%" height="15" fill="rgb(224,169,11)" fg:x="737" fg:w="12"/><text x="1.4509%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.02%)</title><rect x="1.2009%" y="437" width="0.0196%" height="15" fill="rgb(250,166,2)" fg:x="737" fg:w="12"/><text x="1.4509%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12 samples, 0.02%)</title><rect x="1.2009%" y="421" width="0.0196%" height="15" fill="rgb(242,216,29)" fg:x="737" fg:w="12"/><text x="1.4509%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (10 samples, 0.02%)</title><rect x="1.2042%" y="405" width="0.0163%" height="15" fill="rgb(230,116,27)" fg:x="739" fg:w="10"/><text x="1.4542%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.02%)</title><rect x="1.2042%" y="389" width="0.0163%" height="15" fill="rgb(228,99,48)" fg:x="739" fg:w="10"/><text x="1.4542%" y="399.50"></text></g><g><title>[libc.so.6] (10 samples, 0.02%)</title><rect x="1.2042%" y="373" width="0.0163%" height="15" fill="rgb(253,11,6)" fg:x="739" fg:w="10"/><text x="1.4542%" y="383.50"></text></g><g><title>core::clone::Clone::clone (13 samples, 0.02%)</title><rect x="1.2009%" y="501" width="0.0212%" height="15" fill="rgb(247,143,39)" fg:x="737" fg:w="13"/><text x="1.4509%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (13 samples, 0.02%)</title><rect x="1.2433%" y="501" width="0.0212%" height="15" fill="rgb(236,97,10)" fg:x="763" fg:w="13"/><text x="1.4933%" y="511.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (9 samples, 0.01%)</title><rect x="1.2498%" y="485" width="0.0147%" height="15" fill="rgb(233,208,19)" fg:x="767" fg:w="9"/><text x="1.4998%" y="495.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (8 samples, 0.01%)</title><rect x="1.2514%" y="469" width="0.0130%" height="15" fill="rgb(216,164,2)" fg:x="768" fg:w="8"/><text x="1.5014%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (8 samples, 0.01%)</title><rect x="1.2514%" y="453" width="0.0130%" height="15" fill="rgb(220,129,5)" fg:x="768" fg:w="8"/><text x="1.5014%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.01%)</title><rect x="1.2531%" y="437" width="0.0114%" height="15" fill="rgb(242,17,10)" fg:x="769" fg:w="7"/><text x="1.5031%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (57 samples, 0.09%)</title><rect x="1.1732%" y="533" width="0.0929%" height="15" fill="rgb(242,107,0)" fg:x="720" fg:w="57"/><text x="1.4232%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (57 samples, 0.09%)</title><rect x="1.1732%" y="517" width="0.0929%" height="15" fill="rgb(251,28,31)" fg:x="720" fg:w="57"/><text x="1.4232%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (18 samples, 0.03%)</title><rect x="1.2677%" y="533" width="0.0293%" height="15" fill="rgb(233,223,10)" fg:x="778" fg:w="18"/><text x="1.5177%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (17 samples, 0.03%)</title><rect x="1.2693%" y="517" width="0.0277%" height="15" fill="rgb(215,21,27)" fg:x="779" fg:w="17"/><text x="1.5193%" y="527.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (7 samples, 0.01%)</title><rect x="1.2856%" y="501" width="0.0114%" height="15" fill="rgb(232,23,21)" fg:x="789" fg:w="7"/><text x="1.5356%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (78 samples, 0.13%)</title><rect x="1.1716%" y="549" width="0.1271%" height="15" fill="rgb(244,5,23)" fg:x="719" fg:w="78"/><text x="1.4216%" y="559.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (86 samples, 0.14%)</title><rect x="1.1716%" y="581" width="0.1401%" height="15" fill="rgb(226,81,46)" fg:x="719" fg:w="86"/><text x="1.4216%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (86 samples, 0.14%)</title><rect x="1.1716%" y="565" width="0.1401%" height="15" fill="rgb(247,70,30)" fg:x="719" fg:w="86"/><text x="1.4216%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::clone::Clone&gt;::clone (8 samples, 0.01%)</title><rect x="1.2987%" y="549" width="0.0130%" height="15" fill="rgb(212,68,19)" fg:x="797" fg:w="8"/><text x="1.5487%" y="559.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for u64&gt;::clone (8 samples, 0.01%)</title><rect x="1.2987%" y="533" width="0.0130%" height="15" fill="rgb(240,187,13)" fg:x="797" fg:w="8"/><text x="1.5487%" y="543.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (88 samples, 0.14%)</title><rect x="1.1700%" y="597" width="0.1434%" height="15" fill="rgb(223,113,26)" fg:x="718" fg:w="88"/><text x="1.4200%" y="607.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (169 samples, 0.28%)</title><rect x="1.0429%" y="613" width="0.2754%" height="15" fill="rgb(206,192,2)" fg:x="640" fg:w="169"/><text x="1.2929%" y="623.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (173 samples, 0.28%)</title><rect x="1.0429%" y="629" width="0.2819%" height="15" fill="rgb(241,108,4)" fg:x="640" fg:w="173"/><text x="1.2929%" y="639.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (10 samples, 0.02%)</title><rect x="1.3248%" y="629" width="0.0163%" height="15" fill="rgb(247,173,49)" fg:x="813" fg:w="10"/><text x="1.5748%" y="639.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (9 samples, 0.01%)</title><rect x="1.3264%" y="613" width="0.0147%" height="15" fill="rgb(224,114,35)" fg:x="814" fg:w="9"/><text x="1.5764%" y="623.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (188 samples, 0.31%)</title><rect x="1.0380%" y="661" width="0.3063%" height="15" fill="rgb(245,159,27)" fg:x="637" fg:w="188"/><text x="1.2880%" y="671.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (186 samples, 0.30%)</title><rect x="1.0412%" y="645" width="0.3031%" height="15" fill="rgb(245,172,44)" fg:x="639" fg:w="186"/><text x="1.2912%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.02%)</title><rect x="1.3541%" y="565" width="0.0244%" height="15" fill="rgb(236,23,11)" fg:x="831" fg:w="15"/><text x="1.6041%" y="575.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (13 samples, 0.02%)</title><rect x="1.3573%" y="549" width="0.0212%" height="15" fill="rgb(205,117,38)" fg:x="833" fg:w="13"/><text x="1.6073%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.01%)</title><rect x="1.3818%" y="469" width="0.0114%" height="15" fill="rgb(237,72,25)" fg:x="848" fg:w="7"/><text x="1.6318%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.01%)</title><rect x="1.3818%" y="453" width="0.0114%" height="15" fill="rgb(244,70,9)" fg:x="848" fg:w="7"/><text x="1.6318%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.01%)</title><rect x="1.3818%" y="437" width="0.0114%" height="15" fill="rgb(217,125,39)" fg:x="848" fg:w="7"/><text x="1.6318%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.01%)</title><rect x="1.3818%" y="421" width="0.0114%" height="15" fill="rgb(235,36,10)" fg:x="848" fg:w="7"/><text x="1.6318%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.01%)</title><rect x="1.3818%" y="405" width="0.0114%" height="15" fill="rgb(251,123,47)" fg:x="848" fg:w="7"/><text x="1.6318%" y="415.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.01%)</title><rect x="1.3818%" y="389" width="0.0114%" height="15" fill="rgb(221,13,13)" fg:x="848" fg:w="7"/><text x="1.6318%" y="399.50"></text></g><g><title>core::clone::Clone::clone (22 samples, 0.04%)</title><rect x="1.3785%" y="565" width="0.0358%" height="15" fill="rgb(238,131,9)" fg:x="846" fg:w="22"/><text x="1.6285%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (22 samples, 0.04%)</title><rect x="1.3785%" y="549" width="0.0358%" height="15" fill="rgb(211,50,8)" fg:x="846" fg:w="22"/><text x="1.6285%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (20 samples, 0.03%)</title><rect x="1.3818%" y="533" width="0.0326%" height="15" fill="rgb(245,182,24)" fg:x="848" fg:w="20"/><text x="1.6318%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (20 samples, 0.03%)</title><rect x="1.3818%" y="517" width="0.0326%" height="15" fill="rgb(242,14,37)" fg:x="848" fg:w="20"/><text x="1.6318%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (20 samples, 0.03%)</title><rect x="1.3818%" y="501" width="0.0326%" height="15" fill="rgb(246,228,12)" fg:x="848" fg:w="20"/><text x="1.6318%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (20 samples, 0.03%)</title><rect x="1.3818%" y="485" width="0.0326%" height="15" fill="rgb(213,55,15)" fg:x="848" fg:w="20"/><text x="1.6318%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (13 samples, 0.02%)</title><rect x="1.3932%" y="469" width="0.0212%" height="15" fill="rgb(209,9,3)" fg:x="855" fg:w="13"/><text x="1.6432%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.02%)</title><rect x="1.3932%" y="453" width="0.0212%" height="15" fill="rgb(230,59,30)" fg:x="855" fg:w="13"/><text x="1.6432%" y="463.50"></text></g><g><title>[libc.so.6] (13 samples, 0.02%)</title><rect x="1.3932%" y="437" width="0.0212%" height="15" fill="rgb(209,121,21)" fg:x="855" fg:w="13"/><text x="1.6432%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (9 samples, 0.01%)</title><rect x="1.4144%" y="565" width="0.0147%" height="15" fill="rgb(220,109,13)" fg:x="868" fg:w="9"/><text x="1.6644%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.01%)</title><rect x="1.4144%" y="549" width="0.0147%" height="15" fill="rgb(232,18,1)" fg:x="868" fg:w="9"/><text x="1.6644%" y="559.50"></text></g><g><title>[libc.so.6] (9 samples, 0.01%)</title><rect x="1.4144%" y="533" width="0.0147%" height="15" fill="rgb(215,41,42)" fg:x="868" fg:w="9"/><text x="1.6644%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket_index (9 samples, 0.01%)</title><rect x="1.4372%" y="565" width="0.0147%" height="15" fill="rgb(224,123,36)" fg:x="882" fg:w="9"/><text x="1.6872%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (71 samples, 0.12%)</title><rect x="1.3492%" y="597" width="0.1157%" height="15" fill="rgb(240,125,3)" fg:x="828" fg:w="71"/><text x="1.5992%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (71 samples, 0.12%)</title><rect x="1.3492%" y="581" width="0.1157%" height="15" fill="rgb(205,98,50)" fg:x="828" fg:w="71"/><text x="1.5992%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (8 samples, 0.01%)</title><rect x="1.4518%" y="565" width="0.0130%" height="15" fill="rgb(205,185,37)" fg:x="891" fg:w="8"/><text x="1.7018%" y="575.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (10 samples, 0.02%)</title><rect x="1.4796%" y="565" width="0.0163%" height="15" fill="rgb(238,207,15)" fg:x="908" fg:w="10"/><text x="1.7296%" y="575.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.01%)</title><rect x="1.5105%" y="517" width="0.0114%" height="15" fill="rgb(213,199,42)" fg:x="927" fg:w="7"/><text x="1.7605%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (36 samples, 0.06%)</title><rect x="1.4665%" y="597" width="0.0587%" height="15" fill="rgb(235,201,11)" fg:x="900" fg:w="36"/><text x="1.7165%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (34 samples, 0.06%)</title><rect x="1.4698%" y="581" width="0.0554%" height="15" fill="rgb(207,46,11)" fg:x="902" fg:w="34"/><text x="1.7198%" y="591.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (18 samples, 0.03%)</title><rect x="1.4958%" y="565" width="0.0293%" height="15" fill="rgb(241,35,35)" fg:x="918" fg:w="18"/><text x="1.7458%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.03%)</title><rect x="1.4975%" y="549" width="0.0277%" height="15" fill="rgb(243,32,47)" fg:x="919" fg:w="17"/><text x="1.7475%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.02%)</title><rect x="1.5007%" y="533" width="0.0244%" height="15" fill="rgb(247,202,23)" fg:x="921" fg:w="15"/><text x="1.7507%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (110 samples, 0.18%)</title><rect x="1.3476%" y="613" width="0.1792%" height="15" fill="rgb(219,102,11)" fg:x="827" fg:w="110"/><text x="1.5976%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (121 samples, 0.20%)</title><rect x="1.3443%" y="629" width="0.1972%" height="15" fill="rgb(243,110,44)" fg:x="825" fg:w="121"/><text x="1.5943%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::clone::Clone&gt;::clone (9 samples, 0.01%)</title><rect x="1.5268%" y="613" width="0.0147%" height="15" fill="rgb(222,74,54)" fg:x="937" fg:w="9"/><text x="1.7768%" y="623.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for u64&gt;::clone (9 samples, 0.01%)</title><rect x="1.5268%" y="597" width="0.0147%" height="15" fill="rgb(216,99,12)" fg:x="937" fg:w="9"/><text x="1.7768%" y="607.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (126 samples, 0.21%)</title><rect x="1.3443%" y="645" width="0.2053%" height="15" fill="rgb(226,22,26)" fg:x="825" fg:w="126"/><text x="1.5943%" y="655.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (128 samples, 0.21%)</title><rect x="1.3443%" y="661" width="0.2086%" height="15" fill="rgb(217,163,10)" fg:x="825" fg:w="128"/><text x="1.5943%" y="671.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (326 samples, 0.53%)</title><rect x="1.0282%" y="677" width="0.5312%" height="15" fill="rgb(213,25,53)" fg:x="631" fg:w="326"/><text x="1.2782%" y="687.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (329 samples, 0.54%)</title><rect x="1.0282%" y="693" width="0.5361%" height="15" fill="rgb(252,105,26)" fg:x="631" fg:w="329"/><text x="1.2782%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.02%)</title><rect x="1.5724%" y="661" width="0.0196%" height="15" fill="rgb(220,39,43)" fg:x="965" fg:w="12"/><text x="1.8224%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.02%)</title><rect x="1.5724%" y="645" width="0.0196%" height="15" fill="rgb(229,68,48)" fg:x="965" fg:w="12"/><text x="1.8224%" y="655.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (350 samples, 0.57%)</title><rect x="1.0233%" y="725" width="0.5703%" height="15" fill="rgb(252,8,32)" fg:x="628" fg:w="350"/><text x="1.2733%" y="735.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (347 samples, 0.57%)</title><rect x="1.0282%" y="709" width="0.5654%" height="15" fill="rgb(223,20,43)" fg:x="631" fg:w="347"/><text x="1.2782%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (18 samples, 0.03%)</title><rect x="1.5643%" y="693" width="0.0293%" height="15" fill="rgb(229,81,49)" fg:x="960" fg:w="18"/><text x="1.8143%" y="703.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (15 samples, 0.02%)</title><rect x="1.5692%" y="677" width="0.0244%" height="15" fill="rgb(236,28,36)" fg:x="963" fg:w="15"/><text x="1.8192%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="1.6083%" y="597" width="0.0114%" height="15" fill="rgb(249,185,26)" fg:x="987" fg:w="7"/><text x="1.8583%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.03%)</title><rect x="1.6018%" y="629" width="0.0277%" height="15" fill="rgb(249,174,33)" fg:x="983" fg:w="17"/><text x="1.8518%" y="639.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (16 samples, 0.03%)</title><rect x="1.6034%" y="613" width="0.0261%" height="15" fill="rgb(233,201,37)" fg:x="984" fg:w="16"/><text x="1.8534%" y="623.50"></text></g><g><title>core::clone::Clone::clone (27 samples, 0.04%)</title><rect x="1.6327%" y="629" width="0.0440%" height="15" fill="rgb(221,78,26)" fg:x="1002" fg:w="27"/><text x="1.8827%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (23 samples, 0.04%)</title><rect x="1.6392%" y="613" width="0.0375%" height="15" fill="rgb(250,127,30)" fg:x="1006" fg:w="23"/><text x="1.8892%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (19 samples, 0.03%)</title><rect x="1.6458%" y="597" width="0.0310%" height="15" fill="rgb(230,49,44)" fg:x="1010" fg:w="19"/><text x="1.8958%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (19 samples, 0.03%)</title><rect x="1.6458%" y="581" width="0.0310%" height="15" fill="rgb(229,67,23)" fg:x="1010" fg:w="19"/><text x="1.8958%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (19 samples, 0.03%)</title><rect x="1.6458%" y="565" width="0.0310%" height="15" fill="rgb(249,83,47)" fg:x="1010" fg:w="19"/><text x="1.8958%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (19 samples, 0.03%)</title><rect x="1.6458%" y="549" width="0.0310%" height="15" fill="rgb(215,43,3)" fg:x="1010" fg:w="19"/><text x="1.8958%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (13 samples, 0.02%)</title><rect x="1.6555%" y="533" width="0.0212%" height="15" fill="rgb(238,154,13)" fg:x="1016" fg:w="13"/><text x="1.9055%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.02%)</title><rect x="1.6555%" y="517" width="0.0212%" height="15" fill="rgb(219,56,2)" fg:x="1016" fg:w="13"/><text x="1.9055%" y="527.50"></text></g><g><title>[libc.so.6] (13 samples, 0.02%)</title><rect x="1.6555%" y="501" width="0.0212%" height="15" fill="rgb(233,0,4)" fg:x="1016" fg:w="13"/><text x="1.9055%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_to_nonoverlapping (7 samples, 0.01%)</title><rect x="1.6767%" y="629" width="0.0114%" height="15" fill="rgb(235,30,7)" fg:x="1029" fg:w="7"/><text x="1.9267%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.01%)</title><rect x="1.6767%" y="613" width="0.0114%" height="15" fill="rgb(250,79,13)" fg:x="1029" fg:w="7"/><text x="1.9267%" y="623.50"></text></g><g><title>[libc.so.6] (7 samples, 0.01%)</title><rect x="1.6767%" y="597" width="0.0114%" height="15" fill="rgb(211,146,34)" fg:x="1029" fg:w="7"/><text x="1.9267%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (8 samples, 0.01%)</title><rect x="1.6914%" y="629" width="0.0130%" height="15" fill="rgb(228,22,38)" fg:x="1038" fg:w="8"/><text x="1.9414%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket_index (11 samples, 0.02%)</title><rect x="1.7044%" y="629" width="0.0179%" height="15" fill="rgb(235,168,5)" fg:x="1046" fg:w="11"/><text x="1.9544%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::to_base_index (8 samples, 0.01%)</title><rect x="1.7093%" y="613" width="0.0130%" height="15" fill="rgb(221,155,16)" fg:x="1049" fg:w="8"/><text x="1.9593%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (13 samples, 0.02%)</title><rect x="1.7223%" y="629" width="0.0212%" height="15" fill="rgb(215,215,53)" fg:x="1057" fg:w="13"/><text x="1.9723%" y="639.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (8 samples, 0.01%)</title><rect x="1.7305%" y="613" width="0.0130%" height="15" fill="rgb(223,4,10)" fg:x="1062" fg:w="8"/><text x="1.9805%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (92 samples, 0.15%)</title><rect x="1.5952%" y="661" width="0.1499%" height="15" fill="rgb(234,103,6)" fg:x="979" fg:w="92"/><text x="1.8452%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (92 samples, 0.15%)</title><rect x="1.5952%" y="645" width="0.1499%" height="15" fill="rgb(227,97,0)" fg:x="979" fg:w="92"/><text x="1.8452%" y="655.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.01%)</title><rect x="1.7663%" y="581" width="0.0114%" height="15" fill="rgb(234,150,53)" fg:x="1084" fg:w="7"/><text x="2.0163%" y="591.50"></text></g><g><title>malloc (7 samples, 0.01%)</title><rect x="1.7663%" y="565" width="0.0114%" height="15" fill="rgb(228,201,54)" fg:x="1084" fg:w="7"/><text x="2.0163%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (114 samples, 0.19%)</title><rect x="1.5952%" y="677" width="0.1858%" height="15" fill="rgb(222,22,37)" fg:x="979" fg:w="114"/><text x="1.8452%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (22 samples, 0.04%)</title><rect x="1.7452%" y="661" width="0.0358%" height="15" fill="rgb(237,53,32)" fg:x="1071" fg:w="22"/><text x="1.9952%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (20 samples, 0.03%)</title><rect x="1.7484%" y="645" width="0.0326%" height="15" fill="rgb(233,25,53)" fg:x="1073" fg:w="20"/><text x="1.9984%" y="655.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (12 samples, 0.02%)</title><rect x="1.7614%" y="629" width="0.0196%" height="15" fill="rgb(210,40,34)" fg:x="1081" fg:w="12"/><text x="2.0114%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.02%)</title><rect x="1.7631%" y="613" width="0.0179%" height="15" fill="rgb(241,220,44)" fg:x="1082" fg:w="11"/><text x="2.0131%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.02%)</title><rect x="1.7631%" y="597" width="0.0179%" height="15" fill="rgb(235,28,35)" fg:x="1082" fg:w="11"/><text x="2.0131%" y="607.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (119 samples, 0.19%)</title><rect x="1.5936%" y="693" width="0.1939%" height="15" fill="rgb(210,56,17)" fg:x="978" fg:w="119"/><text x="1.8436%" y="703.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (120 samples, 0.20%)</title><rect x="1.5936%" y="725" width="0.1955%" height="15" fill="rgb(224,130,29)" fg:x="978" fg:w="120"/><text x="1.8436%" y="735.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (120 samples, 0.20%)</title><rect x="1.5936%" y="709" width="0.1955%" height="15" fill="rgb(235,212,8)" fg:x="978" fg:w="120"/><text x="1.8436%" y="719.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (473 samples, 0.77%)</title><rect x="1.0200%" y="757" width="0.7707%" height="15" fill="rgb(223,33,50)" fg:x="626" fg:w="473"/><text x="1.2700%" y="767.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (472 samples, 0.77%)</title><rect x="1.0217%" y="741" width="0.7691%" height="15" fill="rgb(219,149,13)" fg:x="627" fg:w="472"/><text x="1.2717%" y="751.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.01%)</title><rect x="1.7924%" y="693" width="0.0114%" height="15" fill="rgb(250,156,29)" fg:x="1100" fg:w="7"/><text x="2.0424%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.01%)</title><rect x="1.7924%" y="725" width="0.0130%" height="15" fill="rgb(216,193,19)" fg:x="1100" fg:w="8"/><text x="2.0424%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.01%)</title><rect x="1.7924%" y="709" width="0.0130%" height="15" fill="rgb(216,135,14)" fg:x="1100" fg:w="8"/><text x="2.0424%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (10 samples, 0.02%)</title><rect x="1.7908%" y="741" width="0.0163%" height="15" fill="rgb(241,47,5)" fg:x="1099" fg:w="10"/><text x="2.0408%" y="751.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (485 samples, 0.79%)</title><rect x="1.0184%" y="789" width="0.7903%" height="15" fill="rgb(233,42,35)" fg:x="625" fg:w="485"/><text x="1.2684%" y="799.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (485 samples, 0.79%)</title><rect x="1.0184%" y="773" width="0.7903%" height="15" fill="rgb(231,13,6)" fg:x="625" fg:w="485"/><text x="1.2684%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (11 samples, 0.02%)</title><rect x="1.7908%" y="757" width="0.0179%" height="15" fill="rgb(207,181,40)" fg:x="1099" fg:w="11"/><text x="2.0408%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.02%)</title><rect x="1.8250%" y="661" width="0.0196%" height="15" fill="rgb(254,173,49)" fg:x="1120" fg:w="12"/><text x="2.0750%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.03%)</title><rect x="1.8185%" y="693" width="0.0326%" height="15" fill="rgb(221,1,38)" fg:x="1116" fg:w="20"/><text x="2.0685%" y="703.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (18 samples, 0.03%)</title><rect x="1.8217%" y="677" width="0.0293%" height="15" fill="rgb(206,124,46)" fg:x="1118" fg:w="18"/><text x="2.0717%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket_index (7 samples, 0.01%)</title><rect x="1.8723%" y="693" width="0.0114%" height="15" fill="rgb(249,21,11)" fg:x="1149" fg:w="7"/><text x="2.1223%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as hashbrown::raw::RawTableClone&gt;::clone_from_spec (46 samples, 0.07%)</title><rect x="1.8136%" y="725" width="0.0750%" height="15" fill="rgb(222,201,40)" fg:x="1113" fg:w="46"/><text x="2.0636%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::clone_from_impl (46 samples, 0.07%)</title><rect x="1.8136%" y="709" width="0.0750%" height="15" fill="rgb(235,61,29)" fg:x="1113" fg:w="46"/><text x="2.0636%" y="719.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (60 samples, 0.10%)</title><rect x="1.8087%" y="757" width="0.0978%" height="15" fill="rgb(219,207,3)" fg:x="1110" fg:w="60"/><text x="2.0587%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (60 samples, 0.10%)</title><rect x="1.8087%" y="741" width="0.0978%" height="15" fill="rgb(222,56,46)" fg:x="1110" fg:w="60"/><text x="2.0587%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::new_uninitialized (11 samples, 0.02%)</title><rect x="1.8885%" y="725" width="0.0179%" height="15" fill="rgb(239,76,54)" fg:x="1159" fg:w="11"/><text x="2.1385%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (10 samples, 0.02%)</title><rect x="1.8902%" y="709" width="0.0163%" height="15" fill="rgb(231,124,27)" fg:x="1160" fg:w="10"/><text x="2.1402%" y="719.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (547 samples, 0.89%)</title><rect x="1.0168%" y="805" width="0.8913%" height="15" fill="rgb(249,195,6)" fg:x="624" fg:w="547"/><text x="1.2668%" y="815.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::clone::Clone&gt;::clone (61 samples, 0.10%)</title><rect x="1.8087%" y="789" width="0.0994%" height="15" fill="rgb(237,174,47)" fg:x="1110" fg:w="61"/><text x="2.0587%" y="799.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::clone::Clone&gt;::clone (61 samples, 0.10%)</title><rect x="1.8087%" y="773" width="0.0994%" height="15" fill="rgb(206,201,31)" fg:x="1110" fg:w="61"/><text x="2.0587%" y="783.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (549 samples, 0.89%)</title><rect x="1.0168%" y="821" width="0.8946%" height="15" fill="rgb(231,57,52)" fg:x="624" fg:w="549"/><text x="1.2668%" y="831.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (9 samples, 0.01%)</title><rect x="1.9114%" y="821" width="0.0147%" height="15" fill="rgb(248,177,22)" fg:x="1173" fg:w="9"/><text x="2.1614%" y="831.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (8 samples, 0.01%)</title><rect x="1.9130%" y="805" width="0.0130%" height="15" fill="rgb(215,211,37)" fg:x="1174" fg:w="8"/><text x="2.1630%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.01%)</title><rect x="1.9146%" y="789" width="0.0114%" height="15" fill="rgb(241,128,51)" fg:x="1175" fg:w="7"/><text x="2.1646%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.01%)</title><rect x="1.9146%" y="773" width="0.0114%" height="15" fill="rgb(227,165,31)" fg:x="1175" fg:w="7"/><text x="2.1646%" y="783.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (561 samples, 0.91%)</title><rect x="1.0152%" y="837" width="0.9141%" height="15" fill="rgb(228,167,24)" fg:x="623" fg:w="561"/><text x="1.2652%" y="847.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.03%)</title><rect x="1.9961%" y="565" width="0.0310%" height="15" fill="rgb(228,143,12)" fg:x="1225" fg:w="19"/><text x="2.2461%" y="575.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (11 samples, 0.02%)</title><rect x="2.0091%" y="549" width="0.0179%" height="15" fill="rgb(249,149,8)" fg:x="1233" fg:w="11"/><text x="2.2591%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.06%)</title><rect x="1.9798%" y="597" width="0.0587%" height="15" fill="rgb(243,35,44)" fg:x="1215" fg:w="36"/><text x="2.2298%" y="607.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (34 samples, 0.06%)</title><rect x="1.9831%" y="581" width="0.0554%" height="15" fill="rgb(246,89,9)" fg:x="1217" fg:w="34"/><text x="2.2331%" y="591.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (7 samples, 0.01%)</title><rect x="2.0270%" y="565" width="0.0114%" height="15" fill="rgb(233,213,13)" fg:x="1244" fg:w="7"/><text x="2.2770%" y="575.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 0.08%)</title><rect x="1.9668%" y="661" width="0.0798%" height="15" fill="rgb(233,141,41)" fg:x="1207" fg:w="49"/><text x="2.2168%" y="671.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 0.08%)</title><rect x="1.9668%" y="645" width="0.0798%" height="15" fill="rgb(239,167,4)" fg:x="1207" fg:w="49"/><text x="2.2168%" y="655.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 0.08%)</title><rect x="1.9668%" y="629" width="0.0798%" height="15" fill="rgb(209,217,16)" fg:x="1207" fg:w="49"/><text x="2.2168%" y="639.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.07%)</title><rect x="1.9733%" y="613" width="0.0733%" height="15" fill="rgb(219,88,35)" fg:x="1211" fg:w="45"/><text x="2.2233%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (12 samples, 0.02%)</title><rect x="2.1085%" y="501" width="0.0196%" height="15" fill="rgb(220,193,23)" fg:x="1294" fg:w="12"/><text x="2.3585%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (58 samples, 0.09%)</title><rect x="2.1004%" y="549" width="0.0945%" height="15" fill="rgb(230,90,52)" fg:x="1289" fg:w="58"/><text x="2.3504%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (58 samples, 0.09%)</title><rect x="2.1004%" y="533" width="0.0945%" height="15" fill="rgb(252,106,19)" fg:x="1289" fg:w="58"/><text x="2.3504%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (58 samples, 0.09%)</title><rect x="2.1004%" y="517" width="0.0945%" height="15" fill="rgb(206,74,20)" fg:x="1289" fg:w="58"/><text x="2.3504%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (41 samples, 0.07%)</title><rect x="2.1281%" y="501" width="0.0668%" height="15" fill="rgb(230,138,44)" fg:x="1306" fg:w="41"/><text x="2.3781%" y="511.50"></text></g><g><title>[libc.so.6] (11 samples, 0.02%)</title><rect x="2.1965%" y="533" width="0.0179%" height="15" fill="rgb(235,182,43)" fg:x="1348" fg:w="11"/><text x="2.4465%" y="543.50"></text></g><g><title>[libc.so.6] (13 samples, 0.02%)</title><rect x="2.2226%" y="501" width="0.0212%" height="15" fill="rgb(242,16,51)" fg:x="1364" fg:w="13"/><text x="2.4726%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (33 samples, 0.05%)</title><rect x="2.1949%" y="549" width="0.0538%" height="15" fill="rgb(248,9,4)" fg:x="1347" fg:w="33"/><text x="2.4449%" y="559.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (21 samples, 0.03%)</title><rect x="2.2144%" y="533" width="0.0342%" height="15" fill="rgb(210,31,22)" fg:x="1359" fg:w="21"/><text x="2.4644%" y="543.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (17 samples, 0.03%)</title><rect x="2.2210%" y="517" width="0.0277%" height="15" fill="rgb(239,54,39)" fg:x="1363" fg:w="17"/><text x="2.4710%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (16 samples, 0.03%)</title><rect x="2.2829%" y="437" width="0.0261%" height="15" fill="rgb(230,99,41)" fg:x="1401" fg:w="16"/><text x="2.5329%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (34 samples, 0.06%)</title><rect x="2.2552%" y="453" width="0.0554%" height="15" fill="rgb(253,106,12)" fg:x="1384" fg:w="34"/><text x="2.5052%" y="463.50"></text></g><g><title>hashbrown::map::make_hash (140 samples, 0.23%)</title><rect x="2.0971%" y="581" width="0.2281%" height="15" fill="rgb(213,46,41)" fg:x="1287" fg:w="140"/><text x="2.3471%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (140 samples, 0.23%)</title><rect x="2.0971%" y="565" width="0.2281%" height="15" fill="rgb(215,133,35)" fg:x="1287" fg:w="140"/><text x="2.3471%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (47 samples, 0.08%)</title><rect x="2.2487%" y="549" width="0.0766%" height="15" fill="rgb(213,28,5)" fg:x="1380" fg:w="47"/><text x="2.4987%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (46 samples, 0.07%)</title><rect x="2.2503%" y="533" width="0.0750%" height="15" fill="rgb(215,77,49)" fg:x="1381" fg:w="46"/><text x="2.5003%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (43 samples, 0.07%)</title><rect x="2.2552%" y="517" width="0.0701%" height="15" fill="rgb(248,100,22)" fg:x="1384" fg:w="43"/><text x="2.5052%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (43 samples, 0.07%)</title><rect x="2.2552%" y="501" width="0.0701%" height="15" fill="rgb(208,67,9)" fg:x="1384" fg:w="43"/><text x="2.5052%" y="511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (43 samples, 0.07%)</title><rect x="2.2552%" y="485" width="0.0701%" height="15" fill="rgb(219,133,21)" fg:x="1384" fg:w="43"/><text x="2.5052%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (43 samples, 0.07%)</title><rect x="2.2552%" y="469" width="0.0701%" height="15" fill="rgb(246,46,29)" fg:x="1384" fg:w="43"/><text x="2.5052%" y="479.50"></text></g><g><title>core::hash::Hasher::write_u8 (9 samples, 0.01%)</title><rect x="2.3106%" y="453" width="0.0147%" height="15" fill="rgb(246,185,52)" fg:x="1418" fg:w="9"/><text x="2.5606%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.01%)</title><rect x="2.3106%" y="437" width="0.0147%" height="15" fill="rgb(252,136,11)" fg:x="1418" fg:w="9"/><text x="2.5606%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (11 samples, 0.02%)</title><rect x="2.3725%" y="533" width="0.0179%" height="15" fill="rgb(219,138,53)" fg:x="1456" fg:w="11"/><text x="2.6225%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (30 samples, 0.05%)</title><rect x="2.3643%" y="549" width="0.0489%" height="15" fill="rgb(211,51,23)" fg:x="1451" fg:w="30"/><text x="2.6143%" y="559.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (14 samples, 0.02%)</title><rect x="2.3904%" y="533" width="0.0228%" height="15" fill="rgb(247,221,28)" fg:x="1467" fg:w="14"/><text x="2.6404%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (13 samples, 0.02%)</title><rect x="2.3920%" y="517" width="0.0212%" height="15" fill="rgb(251,222,45)" fg:x="1468" fg:w="13"/><text x="2.6420%" y="527.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (10 samples, 0.02%)</title><rect x="2.4149%" y="549" width="0.0163%" height="15" fill="rgb(217,162,53)" fg:x="1482" fg:w="10"/><text x="2.6649%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (7 samples, 0.01%)</title><rect x="2.4197%" y="533" width="0.0114%" height="15" fill="rgb(229,93,14)" fg:x="1485" fg:w="7"/><text x="2.6697%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (17 samples, 0.03%)</title><rect x="2.4442%" y="533" width="0.0277%" height="15" fill="rgb(209,67,49)" fg:x="1500" fg:w="17"/><text x="2.6942%" y="543.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (36 samples, 0.06%)</title><rect x="2.4312%" y="549" width="0.0587%" height="15" fill="rgb(213,87,29)" fg:x="1492" fg:w="36"/><text x="2.6812%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (11 samples, 0.02%)</title><rect x="2.4719%" y="533" width="0.0179%" height="15" fill="rgb(205,151,52)" fg:x="1517" fg:w="11"/><text x="2.7219%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (11 samples, 0.02%)</title><rect x="2.4719%" y="517" width="0.0179%" height="15" fill="rgb(253,215,39)" fg:x="1517" fg:w="11"/><text x="2.7219%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (12 samples, 0.02%)</title><rect x="2.4996%" y="517" width="0.0196%" height="15" fill="rgb(221,220,41)" fg:x="1534" fg:w="12"/><text x="2.7496%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (21 samples, 0.03%)</title><rect x="2.5191%" y="517" width="0.0342%" height="15" fill="rgb(218,133,21)" fg:x="1546" fg:w="21"/><text x="2.7691%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (153 samples, 0.25%)</title><rect x="2.3252%" y="581" width="0.2493%" height="15" fill="rgb(221,193,43)" fg:x="1427" fg:w="153"/><text x="2.5752%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (148 samples, 0.24%)</title><rect x="2.3334%" y="565" width="0.2412%" height="15" fill="rgb(240,128,52)" fg:x="1432" fg:w="148"/><text x="2.5834%" y="575.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (52 samples, 0.08%)</title><rect x="2.4898%" y="549" width="0.0847%" height="15" fill="rgb(253,114,12)" fg:x="1528" fg:w="52"/><text x="2.7398%" y="559.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (52 samples, 0.08%)</title><rect x="2.4898%" y="533" width="0.0847%" height="15" fill="rgb(215,223,47)" fg:x="1528" fg:w="52"/><text x="2.7398%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (13 samples, 0.02%)</title><rect x="2.5534%" y="517" width="0.0212%" height="15" fill="rgb(248,225,23)" fg:x="1567" fg:w="13"/><text x="2.8034%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (12 samples, 0.02%)</title><rect x="2.5550%" y="501" width="0.0196%" height="15" fill="rgb(250,108,0)" fg:x="1568" fg:w="12"/><text x="2.8050%" y="511.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (10 samples, 0.02%)</title><rect x="2.5778%" y="565" width="0.0163%" height="15" fill="rgb(228,208,7)" fg:x="1582" fg:w="10"/><text x="2.8278%" y="575.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (7 samples, 0.01%)</title><rect x="2.5990%" y="549" width="0.0114%" height="15" fill="rgb(244,45,10)" fg:x="1595" fg:w="7"/><text x="2.8490%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (11 samples, 0.02%)</title><rect x="2.5941%" y="565" width="0.0179%" height="15" fill="rgb(207,125,25)" fg:x="1592" fg:w="11"/><text x="2.8441%" y="575.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (347 samples, 0.57%)</title><rect x="2.0515%" y="645" width="0.5654%" height="15" fill="rgb(210,195,18)" fg:x="1259" fg:w="347"/><text x="2.3015%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (325 samples, 0.53%)</title><rect x="2.0873%" y="629" width="0.5296%" height="15" fill="rgb(249,80,12)" fg:x="1281" fg:w="325"/><text x="2.3373%" y="639.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (322 samples, 0.52%)</title><rect x="2.0922%" y="613" width="0.5247%" height="15" fill="rgb(221,65,9)" fg:x="1284" fg:w="322"/><text x="2.3422%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (322 samples, 0.52%)</title><rect x="2.0922%" y="597" width="0.5247%" height="15" fill="rgb(235,49,36)" fg:x="1284" fg:w="322"/><text x="2.3422%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (26 samples, 0.04%)</title><rect x="2.5745%" y="581" width="0.0424%" height="15" fill="rgb(225,32,20)" fg:x="1580" fg:w="26"/><text x="2.8245%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.01%)</title><rect x="2.6283%" y="549" width="0.0130%" height="15" fill="rgb(215,141,46)" fg:x="1613" fg:w="8"/><text x="2.8783%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.01%)</title><rect x="2.6283%" y="533" width="0.0130%" height="15" fill="rgb(250,160,47)" fg:x="1613" fg:w="8"/><text x="2.8783%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.01%)</title><rect x="2.6283%" y="517" width="0.0130%" height="15" fill="rgb(216,222,40)" fg:x="1613" fg:w="8"/><text x="2.8783%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.01%)</title><rect x="2.6283%" y="501" width="0.0130%" height="15" fill="rgb(234,217,39)" fg:x="1613" fg:w="8"/><text x="2.8783%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.01%)</title><rect x="2.6283%" y="485" width="0.0130%" height="15" fill="rgb(207,178,40)" fg:x="1613" fg:w="8"/><text x="2.8783%" y="495.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.01%)</title><rect x="2.6283%" y="469" width="0.0130%" height="15" fill="rgb(221,136,13)" fg:x="1613" fg:w="8"/><text x="2.8783%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (446 samples, 0.73%)</title><rect x="1.9505%" y="693" width="0.7267%" height="15" fill="rgb(249,199,10)" fg:x="1197" fg:w="446"/><text x="2.2005%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (443 samples, 0.72%)</title><rect x="1.9554%" y="677" width="0.7219%" height="15" fill="rgb(249,222,13)" fg:x="1200" fg:w="443"/><text x="2.2054%" y="687.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (387 samples, 0.63%)</title><rect x="2.0466%" y="661" width="0.6306%" height="15" fill="rgb(244,185,38)" fg:x="1256" fg:w="387"/><text x="2.2966%" y="671.50"></text></g><g><title>core::ops::function::FnMut::call_mut (37 samples, 0.06%)</title><rect x="2.6169%" y="645" width="0.0603%" height="15" fill="rgb(236,202,9)" fg:x="1606" fg:w="37"/><text x="2.8669%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (36 samples, 0.06%)</title><rect x="2.6185%" y="629" width="0.0587%" height="15" fill="rgb(250,229,37)" fg:x="1607" fg:w="36"/><text x="2.8685%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (30 samples, 0.05%)</title><rect x="2.6283%" y="613" width="0.0489%" height="15" fill="rgb(206,174,23)" fg:x="1613" fg:w="30"/><text x="2.8783%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (30 samples, 0.05%)</title><rect x="2.6283%" y="597" width="0.0489%" height="15" fill="rgb(211,33,43)" fg:x="1613" fg:w="30"/><text x="2.8783%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (30 samples, 0.05%)</title><rect x="2.6283%" y="581" width="0.0489%" height="15" fill="rgb(245,58,50)" fg:x="1613" fg:w="30"/><text x="2.8783%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (30 samples, 0.05%)</title><rect x="2.6283%" y="565" width="0.0489%" height="15" fill="rgb(244,68,36)" fg:x="1613" fg:w="30"/><text x="2.8783%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (22 samples, 0.04%)</title><rect x="2.6414%" y="549" width="0.0358%" height="15" fill="rgb(232,229,15)" fg:x="1621" fg:w="22"/><text x="2.8914%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.04%)</title><rect x="2.6414%" y="533" width="0.0358%" height="15" fill="rgb(254,30,23)" fg:x="1621" fg:w="22"/><text x="2.8914%" y="543.50"></text></g><g><title>[libc.so.6] (22 samples, 0.04%)</title><rect x="2.6414%" y="517" width="0.0358%" height="15" fill="rgb(235,160,14)" fg:x="1621" fg:w="22"/><text x="2.8914%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (452 samples, 0.74%)</title><rect x="1.9456%" y="741" width="0.7365%" height="15" fill="rgb(212,155,44)" fg:x="1194" fg:w="452"/><text x="2.1956%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (451 samples, 0.73%)</title><rect x="1.9472%" y="725" width="0.7349%" height="15" fill="rgb(226,2,50)" fg:x="1195" fg:w="451"/><text x="2.1972%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (449 samples, 0.73%)</title><rect x="1.9505%" y="709" width="0.7316%" height="15" fill="rgb(234,177,6)" fg:x="1197" fg:w="449"/><text x="2.2005%" y="719.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (8 samples, 0.01%)</title><rect x="2.7326%" y="613" width="0.0130%" height="15" fill="rgb(217,24,9)" fg:x="1677" fg:w="8"/><text x="2.9826%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (498 samples, 0.81%)</title><rect x="1.9423%" y="757" width="0.8115%" height="15" fill="rgb(220,13,46)" fg:x="1192" fg:w="498"/><text x="2.1923%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (44 samples, 0.07%)</title><rect x="2.6821%" y="741" width="0.0717%" height="15" fill="rgb(239,221,27)" fg:x="1646" fg:w="44"/><text x="2.9321%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (44 samples, 0.07%)</title><rect x="2.6821%" y="725" width="0.0717%" height="15" fill="rgb(222,198,25)" fg:x="1646" fg:w="44"/><text x="2.9321%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (41 samples, 0.07%)</title><rect x="2.6870%" y="709" width="0.0668%" height="15" fill="rgb(211,99,13)" fg:x="1649" fg:w="41"/><text x="2.9370%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (41 samples, 0.07%)</title><rect x="2.6870%" y="693" width="0.0668%" height="15" fill="rgb(232,111,31)" fg:x="1649" fg:w="41"/><text x="2.9370%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (31 samples, 0.05%)</title><rect x="2.7033%" y="677" width="0.0505%" height="15" fill="rgb(245,82,37)" fg:x="1659" fg:w="31"/><text x="2.9533%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (26 samples, 0.04%)</title><rect x="2.7114%" y="661" width="0.0424%" height="15" fill="rgb(227,149,46)" fg:x="1664" fg:w="26"/><text x="2.9614%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (23 samples, 0.04%)</title><rect x="2.7163%" y="645" width="0.0375%" height="15" fill="rgb(218,36,50)" fg:x="1667" fg:w="23"/><text x="2.9663%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (17 samples, 0.03%)</title><rect x="2.7261%" y="629" width="0.0277%" height="15" fill="rgb(226,80,48)" fg:x="1673" fg:w="17"/><text x="2.9761%" y="639.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (500 samples, 0.81%)</title><rect x="1.9407%" y="789" width="0.8147%" height="15" fill="rgb(238,224,15)" fg:x="1191" fg:w="500"/><text x="2.1907%" y="799.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (500 samples, 0.81%)</title><rect x="1.9407%" y="773" width="0.8147%" height="15" fill="rgb(241,136,10)" fg:x="1191" fg:w="500"/><text x="2.1907%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (512 samples, 0.83%)</title><rect x="1.9293%" y="821" width="0.8343%" height="15" fill="rgb(208,32,45)" fg:x="1184" fg:w="512"/><text x="2.1793%" y="831.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (512 samples, 0.83%)</title><rect x="1.9293%" y="805" width="0.8343%" height="15" fill="rgb(207,135,9)" fg:x="1184" fg:w="512"/><text x="2.1793%" y="815.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (7 samples, 0.01%)</title><rect x="2.7750%" y="741" width="0.0114%" height="15" fill="rgb(206,86,44)" fg:x="1703" fg:w="7"/><text x="3.0250%" y="751.50"></text></g><g><title>aes_grinder::algo::Algo::get_all_variables (533 samples, 0.87%)</title><rect x="1.9293%" y="837" width="0.8685%" height="15" fill="rgb(245,177,15)" fg:x="1184" fg:w="533"/><text x="2.1793%" y="847.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (21 samples, 0.03%)</title><rect x="2.7636%" y="821" width="0.0342%" height="15" fill="rgb(206,64,50)" fg:x="1696" fg:w="21"/><text x="3.0136%" y="831.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (20 samples, 0.03%)</title><rect x="2.7652%" y="805" width="0.0326%" height="15" fill="rgb(234,36,40)" fg:x="1697" fg:w="20"/><text x="3.0152%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (20 samples, 0.03%)</title><rect x="2.7652%" y="789" width="0.0326%" height="15" fill="rgb(213,64,8)" fg:x="1697" fg:w="20"/><text x="3.0152%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (19 samples, 0.03%)</title><rect x="2.7668%" y="773" width="0.0310%" height="15" fill="rgb(210,75,36)" fg:x="1698" fg:w="19"/><text x="3.0168%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (16 samples, 0.03%)</title><rect x="2.7717%" y="757" width="0.0261%" height="15" fill="rgb(229,88,21)" fg:x="1701" fg:w="16"/><text x="3.0217%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::data_end (7 samples, 0.01%)</title><rect x="2.7864%" y="741" width="0.0114%" height="15" fill="rgb(252,204,47)" fg:x="1710" fg:w="7"/><text x="3.0364%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.03%)</title><rect x="2.8141%" y="709" width="0.0310%" height="15" fill="rgb(208,77,27)" fg:x="1727" fg:w="19"/><text x="3.0641%" y="719.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (8 samples, 0.01%)</title><rect x="2.8320%" y="693" width="0.0130%" height="15" fill="rgb(221,76,26)" fg:x="1738" fg:w="8"/><text x="3.0820%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.06%)</title><rect x="2.8027%" y="741" width="0.0603%" height="15" fill="rgb(225,139,18)" fg:x="1720" fg:w="37"/><text x="3.0527%" y="751.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (35 samples, 0.06%)</title><rect x="2.8059%" y="725" width="0.0570%" height="15" fill="rgb(230,137,11)" fg:x="1722" fg:w="35"/><text x="3.0559%" y="735.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (11 samples, 0.02%)</title><rect x="2.8450%" y="709" width="0.0179%" height="15" fill="rgb(212,28,1)" fg:x="1746" fg:w="11"/><text x="3.0950%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.02%)</title><rect x="2.8679%" y="629" width="0.0196%" height="15" fill="rgb(248,164,17)" fg:x="1760" fg:w="12"/><text x="3.1179%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.01%)</title><rect x="2.8727%" y="613" width="0.0147%" height="15" fill="rgb(222,171,42)" fg:x="1763" fg:w="9"/><text x="3.1227%" y="623.50"></text></g><g><title>cfree (9 samples, 0.01%)</title><rect x="2.8727%" y="597" width="0.0147%" height="15" fill="rgb(243,84,45)" fg:x="1763" fg:w="9"/><text x="3.1227%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (24 samples, 0.04%)</title><rect x="2.8630%" y="725" width="0.0391%" height="15" fill="rgb(252,49,23)" fg:x="1757" fg:w="24"/><text x="3.1130%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,())&gt; (22 samples, 0.04%)</title><rect x="2.8662%" y="709" width="0.0358%" height="15" fill="rgb(215,19,7)" fg:x="1759" fg:w="22"/><text x="3.1162%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (22 samples, 0.04%)</title><rect x="2.8662%" y="693" width="0.0358%" height="15" fill="rgb(238,81,41)" fg:x="1759" fg:w="22"/><text x="3.1162%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (22 samples, 0.04%)</title><rect x="2.8662%" y="677" width="0.0358%" height="15" fill="rgb(210,199,37)" fg:x="1759" fg:w="22"/><text x="3.1162%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (22 samples, 0.04%)</title><rect x="2.8662%" y="661" width="0.0358%" height="15" fill="rgb(244,192,49)" fg:x="1759" fg:w="22"/><text x="3.1162%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.04%)</title><rect x="2.8662%" y="645" width="0.0358%" height="15" fill="rgb(226,211,11)" fg:x="1759" fg:w="22"/><text x="3.1162%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (9 samples, 0.01%)</title><rect x="2.8874%" y="629" width="0.0147%" height="15" fill="rgb(236,162,54)" fg:x="1772" fg:w="9"/><text x="3.1374%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (25 samples, 0.04%)</title><rect x="2.8630%" y="741" width="0.0407%" height="15" fill="rgb(220,229,9)" fg:x="1757" fg:w="25"/><text x="3.1130%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (69 samples, 0.11%)</title><rect x="2.7978%" y="757" width="0.1124%" height="15" fill="rgb(250,87,22)" fg:x="1717" fg:w="69"/><text x="3.0478%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;alloc::string::String&gt;&gt; (78 samples, 0.13%)</title><rect x="2.7978%" y="837" width="0.1271%" height="15" fill="rgb(239,43,17)" fg:x="1717" fg:w="78"/><text x="3.0478%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;alloc::string::String,std::collections::hash::map::RandomState&gt;&gt; (78 samples, 0.13%)</title><rect x="2.7978%" y="821" width="0.1271%" height="15" fill="rgb(231,177,25)" fg:x="1717" fg:w="78"/><text x="3.0478%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,(),std::collections::hash::map::RandomState&gt;&gt; (78 samples, 0.13%)</title><rect x="2.7978%" y="805" width="0.1271%" height="15" fill="rgb(219,179,1)" fg:x="1717" fg:w="78"/><text x="3.0478%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,())&gt;&gt; (78 samples, 0.13%)</title><rect x="2.7978%" y="789" width="0.1271%" height="15" fill="rgb(238,219,53)" fg:x="1717" fg:w="78"/><text x="3.0478%" y="799.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (78 samples, 0.13%)</title><rect x="2.7978%" y="773" width="0.1271%" height="15" fill="rgb(232,167,36)" fg:x="1717" fg:w="78"/><text x="3.0478%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (9 samples, 0.01%)</title><rect x="2.9102%" y="757" width="0.0147%" height="15" fill="rgb(244,19,51)" fg:x="1786" fg:w="9"/><text x="3.1602%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (9 samples, 0.01%)</title><rect x="2.9102%" y="741" width="0.0147%" height="15" fill="rgb(224,6,22)" fg:x="1786" fg:w="9"/><text x="3.1602%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::allocation_info (8 samples, 0.01%)</title><rect x="2.9118%" y="725" width="0.0130%" height="15" fill="rgb(224,145,5)" fg:x="1787" fg:w="8"/><text x="3.1618%" y="735.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (7 samples, 0.01%)</title><rect x="2.9135%" y="709" width="0.0114%" height="15" fill="rgb(234,130,49)" fg:x="1788" fg:w="7"/><text x="3.1635%" y="719.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (8 samples, 0.01%)</title><rect x="2.9428%" y="661" width="0.0130%" height="15" fill="rgb(254,6,2)" fg:x="1806" fg:w="8"/><text x="3.1928%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (8 samples, 0.01%)</title><rect x="2.9428%" y="645" width="0.0130%" height="15" fill="rgb(208,96,46)" fg:x="1806" fg:w="8"/><text x="3.1928%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (8 samples, 0.01%)</title><rect x="2.9428%" y="629" width="0.0130%" height="15" fill="rgb(239,3,39)" fg:x="1806" fg:w="8"/><text x="3.1928%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7 samples, 0.01%)</title><rect x="2.9444%" y="613" width="0.0114%" height="15" fill="rgb(233,210,1)" fg:x="1807" fg:w="7"/><text x="3.1944%" y="623.50"></text></g><g><title>hashbrown::map::make_hash (16 samples, 0.03%)</title><rect x="2.9428%" y="693" width="0.0261%" height="15" fill="rgb(244,137,37)" fg:x="1806" fg:w="16"/><text x="3.1928%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (16 samples, 0.03%)</title><rect x="2.9428%" y="677" width="0.0261%" height="15" fill="rgb(240,136,2)" fg:x="1806" fg:w="16"/><text x="3.1928%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (36 samples, 0.06%)</title><rect x="2.9281%" y="821" width="0.0587%" height="15" fill="rgb(239,18,37)" fg:x="1797" fg:w="36"/><text x="3.1781%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (35 samples, 0.06%)</title><rect x="2.9298%" y="805" width="0.0570%" height="15" fill="rgb(218,185,22)" fg:x="1798" fg:w="35"/><text x="3.1798%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (28 samples, 0.05%)</title><rect x="2.9412%" y="789" width="0.0456%" height="15" fill="rgb(225,218,4)" fg:x="1805" fg:w="28"/><text x="3.1912%" y="799.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::is_subset::_{{closure}} (27 samples, 0.04%)</title><rect x="2.9428%" y="773" width="0.0440%" height="15" fill="rgb(230,182,32)" fg:x="1806" fg:w="27"/><text x="3.1928%" y="783.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (27 samples, 0.04%)</title><rect x="2.9428%" y="757" width="0.0440%" height="15" fill="rgb(242,56,43)" fg:x="1806" fg:w="27"/><text x="3.1928%" y="767.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (27 samples, 0.04%)</title><rect x="2.9428%" y="741" width="0.0440%" height="15" fill="rgb(233,99,24)" fg:x="1806" fg:w="27"/><text x="3.1928%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (27 samples, 0.04%)</title><rect x="2.9428%" y="725" width="0.0440%" height="15" fill="rgb(234,209,42)" fg:x="1806" fg:w="27"/><text x="3.1928%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (27 samples, 0.04%)</title><rect x="2.9428%" y="709" width="0.0440%" height="15" fill="rgb(227,7,12)" fg:x="1806" fg:w="27"/><text x="3.1928%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (11 samples, 0.02%)</title><rect x="2.9689%" y="693" width="0.0179%" height="15" fill="rgb(245,203,43)" fg:x="1822" fg:w="11"/><text x="3.2189%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (10 samples, 0.02%)</title><rect x="2.9705%" y="677" width="0.0163%" height="15" fill="rgb(238,205,33)" fg:x="1823" fg:w="10"/><text x="3.2205%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (8 samples, 0.01%)</title><rect x="2.9738%" y="661" width="0.0130%" height="15" fill="rgb(231,56,7)" fg:x="1825" fg:w="8"/><text x="3.2238%" y="671.50"></text></g><g><title>aes_grinder::exaustive_search::update_queue::_{{closure}} (1,218 samples, 1.98%)</title><rect x="1.0086%" y="853" width="1.9847%" height="15" fill="rgb(244,186,29)" fg:x="619" fg:w="1218"/><text x="1.2586%" y="863.50">a..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::is_subset (42 samples, 0.07%)</title><rect x="2.9249%" y="837" width="0.0684%" height="15" fill="rgb(234,111,31)" fg:x="1795" fg:w="42"/><text x="3.1749%" y="847.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (16 samples, 0.03%)</title><rect x="3.0471%" y="437" width="0.0261%" height="15" fill="rgb(241,149,10)" fg:x="1870" fg:w="16"/><text x="3.2971%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (7 samples, 0.01%)</title><rect x="3.0618%" y="421" width="0.0114%" height="15" fill="rgb(249,206,44)" fg:x="1879" fg:w="7"/><text x="3.3118%" y="431.50"></text></g><g><title>core::hash::Hasher::write_isize (7 samples, 0.01%)</title><rect x="3.0618%" y="405" width="0.0114%" height="15" fill="rgb(251,153,30)" fg:x="1879" fg:w="7"/><text x="3.3118%" y="415.50"></text></g><g><title>core::hash::Hasher::write_usize (7 samples, 0.01%)</title><rect x="3.0618%" y="389" width="0.0114%" height="15" fill="rgb(239,152,38)" fg:x="1879" fg:w="7"/><text x="3.3118%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="3.0618%" y="373" width="0.0114%" height="15" fill="rgb(249,139,47)" fg:x="1879" fg:w="7"/><text x="3.3118%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="3.0618%" y="357" width="0.0114%" height="15" fill="rgb(244,64,35)" fg:x="1879" fg:w="7"/><text x="3.3118%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="3.0618%" y="341" width="0.0114%" height="15" fill="rgb(216,46,15)" fg:x="1879" fg:w="7"/><text x="3.3118%" y="351.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (30 samples, 0.05%)</title><rect x="3.0471%" y="469" width="0.0489%" height="15" fill="rgb(250,74,19)" fg:x="1870" fg:w="30"/><text x="3.2971%" y="479.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (30 samples, 0.05%)</title><rect x="3.0471%" y="453" width="0.0489%" height="15" fill="rgb(249,42,33)" fg:x="1870" fg:w="30"/><text x="3.2971%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (9 samples, 0.01%)</title><rect x="3.0813%" y="437" width="0.0147%" height="15" fill="rgb(242,149,17)" fg:x="1891" fg:w="9"/><text x="3.3313%" y="447.50"></text></g><g><title>core::hash::Hasher::write_usize (9 samples, 0.01%)</title><rect x="3.0813%" y="421" width="0.0147%" height="15" fill="rgb(244,29,21)" fg:x="1891" fg:w="9"/><text x="3.3313%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="3.0829%" y="405" width="0.0130%" height="15" fill="rgb(220,130,37)" fg:x="1892" fg:w="8"/><text x="3.3329%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="3.0829%" y="389" width="0.0130%" height="15" fill="rgb(211,67,2)" fg:x="1892" fg:w="8"/><text x="3.3329%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="3.0829%" y="373" width="0.0130%" height="15" fill="rgb(235,68,52)" fg:x="1892" fg:w="8"/><text x="3.3329%" y="383.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (44 samples, 0.07%)</title><rect x="3.0406%" y="485" width="0.0717%" height="15" fill="rgb(246,142,3)" fg:x="1866" fg:w="44"/><text x="3.2906%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (10 samples, 0.02%)</title><rect x="3.0960%" y="469" width="0.0163%" height="15" fill="rgb(241,25,7)" fg:x="1900" fg:w="10"/><text x="3.3460%" y="479.50"></text></g><g><title>core::hash::Hasher::write_isize (10 samples, 0.02%)</title><rect x="3.0960%" y="453" width="0.0163%" height="15" fill="rgb(242,119,39)" fg:x="1900" fg:w="10"/><text x="3.3460%" y="463.50"></text></g><g><title>core::hash::Hasher::write_usize (10 samples, 0.02%)</title><rect x="3.0960%" y="437" width="0.0163%" height="15" fill="rgb(241,98,45)" fg:x="1900" fg:w="10"/><text x="3.3460%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.01%)</title><rect x="3.0976%" y="421" width="0.0147%" height="15" fill="rgb(254,28,30)" fg:x="1901" fg:w="9"/><text x="3.3476%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (9 samples, 0.01%)</title><rect x="3.0976%" y="405" width="0.0147%" height="15" fill="rgb(241,142,54)" fg:x="1901" fg:w="9"/><text x="3.3476%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.01%)</title><rect x="3.0976%" y="389" width="0.0147%" height="15" fill="rgb(222,85,15)" fg:x="1901" fg:w="9"/><text x="3.3476%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.01%)</title><rect x="3.1335%" y="405" width="0.0130%" height="15" fill="rgb(210,85,47)" fg:x="1923" fg:w="8"/><text x="3.3835%" y="415.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (76 samples, 0.12%)</title><rect x="3.0357%" y="517" width="0.1238%" height="15" fill="rgb(224,206,25)" fg:x="1863" fg:w="76"/><text x="3.2857%" y="527.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (76 samples, 0.12%)</title><rect x="3.0357%" y="501" width="0.1238%" height="15" fill="rgb(243,201,19)" fg:x="1863" fg:w="76"/><text x="3.2857%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (23 samples, 0.04%)</title><rect x="3.1220%" y="485" width="0.0375%" height="15" fill="rgb(236,59,4)" fg:x="1916" fg:w="23"/><text x="3.3720%" y="495.50"></text></g><g><title>core::hash::Hasher::write_usize (22 samples, 0.04%)</title><rect x="3.1237%" y="469" width="0.0358%" height="15" fill="rgb(254,179,45)" fg:x="1917" fg:w="22"/><text x="3.3737%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (21 samples, 0.03%)</title><rect x="3.1253%" y="453" width="0.0342%" height="15" fill="rgb(226,14,10)" fg:x="1918" fg:w="21"/><text x="3.3753%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (20 samples, 0.03%)</title><rect x="3.1269%" y="437" width="0.0326%" height="15" fill="rgb(244,27,41)" fg:x="1919" fg:w="20"/><text x="3.3769%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20 samples, 0.03%)</title><rect x="3.1269%" y="421" width="0.0326%" height="15" fill="rgb(235,35,32)" fg:x="1919" fg:w="20"/><text x="3.3769%" y="431.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (102 samples, 0.17%)</title><rect x="3.0275%" y="533" width="0.1662%" height="15" fill="rgb(218,68,31)" fg:x="1858" fg:w="102"/><text x="3.2775%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (21 samples, 0.03%)</title><rect x="3.1595%" y="517" width="0.0342%" height="15" fill="rgb(207,120,37)" fg:x="1939" fg:w="21"/><text x="3.4095%" y="527.50"></text></g><g><title>core::hash::Hasher::write_isize (21 samples, 0.03%)</title><rect x="3.1595%" y="501" width="0.0342%" height="15" fill="rgb(227,98,0)" fg:x="1939" fg:w="21"/><text x="3.4095%" y="511.50"></text></g><g><title>core::hash::Hasher::write_usize (20 samples, 0.03%)</title><rect x="3.1612%" y="485" width="0.0326%" height="15" fill="rgb(207,7,3)" fg:x="1940" fg:w="20"/><text x="3.4112%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (19 samples, 0.03%)</title><rect x="3.1628%" y="469" width="0.0310%" height="15" fill="rgb(206,98,19)" fg:x="1941" fg:w="19"/><text x="3.4128%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (19 samples, 0.03%)</title><rect x="3.1628%" y="453" width="0.0310%" height="15" fill="rgb(217,5,26)" fg:x="1941" fg:w="19"/><text x="3.4128%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (19 samples, 0.03%)</title><rect x="3.1628%" y="437" width="0.0310%" height="15" fill="rgb(235,190,38)" fg:x="1941" fg:w="19"/><text x="3.4128%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (11 samples, 0.02%)</title><rect x="3.2117%" y="453" width="0.0179%" height="15" fill="rgb(247,86,24)" fg:x="1971" fg:w="11"/><text x="3.4617%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (133 samples, 0.22%)</title><rect x="3.0210%" y="565" width="0.2167%" height="15" fill="rgb(205,101,16)" fg:x="1854" fg:w="133"/><text x="3.2710%" y="575.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (132 samples, 0.22%)</title><rect x="3.0226%" y="549" width="0.2151%" height="15" fill="rgb(246,168,33)" fg:x="1855" fg:w="132"/><text x="3.2726%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (22 samples, 0.04%)</title><rect x="3.2019%" y="533" width="0.0358%" height="15" fill="rgb(231,114,1)" fg:x="1965" fg:w="22"/><text x="3.4519%" y="543.50"></text></g><g><title>core::hash::Hasher::write_usize (20 samples, 0.03%)</title><rect x="3.2051%" y="517" width="0.0326%" height="15" fill="rgb(207,184,53)" fg:x="1967" fg:w="20"/><text x="3.4551%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (20 samples, 0.03%)</title><rect x="3.2051%" y="501" width="0.0326%" height="15" fill="rgb(224,95,51)" fg:x="1967" fg:w="20"/><text x="3.4551%" y="511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (20 samples, 0.03%)</title><rect x="3.2051%" y="485" width="0.0326%" height="15" fill="rgb(212,188,45)" fg:x="1967" fg:w="20"/><text x="3.4551%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20 samples, 0.03%)</title><rect x="3.2051%" y="469" width="0.0326%" height="15" fill="rgb(223,154,38)" fg:x="1967" fg:w="20"/><text x="3.4551%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.01%)</title><rect x="3.2443%" y="469" width="0.0114%" height="15" fill="rgb(251,22,52)" fg:x="1991" fg:w="7"/><text x="3.4943%" y="479.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (152 samples, 0.25%)</title><rect x="3.0145%" y="581" width="0.2477%" height="15" fill="rgb(229,209,22)" fg:x="1850" fg:w="152"/><text x="3.2645%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (15 samples, 0.02%)</title><rect x="3.2377%" y="565" width="0.0244%" height="15" fill="rgb(234,138,34)" fg:x="1987" fg:w="15"/><text x="3.4877%" y="575.50"></text></g><g><title>core::hash::Hasher::write_isize (15 samples, 0.02%)</title><rect x="3.2377%" y="549" width="0.0244%" height="15" fill="rgb(212,95,11)" fg:x="1987" fg:w="15"/><text x="3.4877%" y="559.50"></text></g><g><title>core::hash::Hasher::write_usize (15 samples, 0.02%)</title><rect x="3.2377%" y="533" width="0.0244%" height="15" fill="rgb(240,179,47)" fg:x="1987" fg:w="15"/><text x="3.4877%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="3.2394%" y="517" width="0.0228%" height="15" fill="rgb(240,163,11)" fg:x="1988" fg:w="14"/><text x="3.4894%" y="527.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="3.2394%" y="501" width="0.0228%" height="15" fill="rgb(236,37,12)" fg:x="1988" fg:w="14"/><text x="3.4894%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="3.2394%" y="485" width="0.0228%" height="15" fill="rgb(232,164,16)" fg:x="1988" fg:w="14"/><text x="3.4894%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9 samples, 0.01%)</title><rect x="3.2703%" y="501" width="0.0147%" height="15" fill="rgb(244,205,15)" fg:x="2007" fg:w="9"/><text x="3.5203%" y="511.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (169 samples, 0.28%)</title><rect x="3.0145%" y="613" width="0.2754%" height="15" fill="rgb(223,117,47)" fg:x="1850" fg:w="169"/><text x="3.2645%" y="623.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (169 samples, 0.28%)</title><rect x="3.0145%" y="597" width="0.2754%" height="15" fill="rgb(244,107,35)" fg:x="1850" fg:w="169"/><text x="3.2645%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (13 samples, 0.02%)</title><rect x="3.2687%" y="581" width="0.0212%" height="15" fill="rgb(205,140,8)" fg:x="2006" fg:w="13"/><text x="3.5187%" y="591.50"></text></g><g><title>core::hash::Hasher::write_usize (13 samples, 0.02%)</title><rect x="3.2687%" y="565" width="0.0212%" height="15" fill="rgb(228,84,46)" fg:x="2006" fg:w="13"/><text x="3.5187%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.02%)</title><rect x="3.2687%" y="549" width="0.0212%" height="15" fill="rgb(254,188,9)" fg:x="2006" fg:w="13"/><text x="3.5187%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (13 samples, 0.02%)</title><rect x="3.2687%" y="533" width="0.0212%" height="15" fill="rgb(206,112,54)" fg:x="2006" fg:w="13"/><text x="3.5187%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.02%)</title><rect x="3.2687%" y="517" width="0.0212%" height="15" fill="rgb(216,84,49)" fg:x="2006" fg:w="13"/><text x="3.5187%" y="527.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (178 samples, 0.29%)</title><rect x="3.0129%" y="629" width="0.2900%" height="15" fill="rgb(214,194,35)" fg:x="1849" fg:w="178"/><text x="3.2629%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (8 samples, 0.01%)</title><rect x="3.2899%" y="613" width="0.0130%" height="15" fill="rgb(249,28,3)" fg:x="2019" fg:w="8"/><text x="3.5399%" y="623.50"></text></g><g><title>core::hash::Hasher::write_isize (8 samples, 0.01%)</title><rect x="3.2899%" y="597" width="0.0130%" height="15" fill="rgb(222,56,52)" fg:x="2019" fg:w="8"/><text x="3.5399%" y="607.50"></text></g><g><title>core::hash::Hasher::write_usize (8 samples, 0.01%)</title><rect x="3.2899%" y="581" width="0.0130%" height="15" fill="rgb(245,217,50)" fg:x="2019" fg:w="8"/><text x="3.5399%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="3.2915%" y="565" width="0.0114%" height="15" fill="rgb(213,201,24)" fg:x="2020" fg:w="7"/><text x="3.5415%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="3.2915%" y="549" width="0.0114%" height="15" fill="rgb(248,116,28)" fg:x="2020" fg:w="7"/><text x="3.5415%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="3.2915%" y="533" width="0.0114%" height="15" fill="rgb(219,72,43)" fg:x="2020" fg:w="7"/><text x="3.5415%" y="543.50"></text></g><g><title>hashbrown::map::make_hash (197 samples, 0.32%)</title><rect x="2.9998%" y="725" width="0.3210%" height="15" fill="rgb(209,138,14)" fg:x="1841" fg:w="197"/><text x="3.2498%" y="735.50"></text></g><g><title>core::hash::BuildHasher::hash_one (197 samples, 0.32%)</title><rect x="2.9998%" y="709" width="0.3210%" height="15" fill="rgb(222,18,33)" fg:x="1841" fg:w="197"/><text x="3.2498%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (191 samples, 0.31%)</title><rect x="3.0096%" y="693" width="0.3112%" height="15" fill="rgb(213,199,7)" fg:x="1847" fg:w="191"/><text x="3.2596%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (191 samples, 0.31%)</title><rect x="3.0096%" y="677" width="0.3112%" height="15" fill="rgb(250,110,10)" fg:x="1847" fg:w="191"/><text x="3.2596%" y="687.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (190 samples, 0.31%)</title><rect x="3.0112%" y="661" width="0.3096%" height="15" fill="rgb(248,123,6)" fg:x="1848" fg:w="190"/><text x="3.2612%" y="671.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (189 samples, 0.31%)</title><rect x="3.0129%" y="645" width="0.3080%" height="15" fill="rgb(206,91,31)" fg:x="1849" fg:w="189"/><text x="3.2629%" y="655.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (8 samples, 0.01%)</title><rect x="3.3078%" y="629" width="0.0130%" height="15" fill="rgb(211,154,13)" fg:x="2030" fg:w="8"/><text x="3.5578%" y="639.50"></text></g><g><title>core::hash::Hasher::write_usize (7 samples, 0.01%)</title><rect x="3.3094%" y="613" width="0.0114%" height="15" fill="rgb(225,148,7)" fg:x="2031" fg:w="7"/><text x="3.5594%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="3.3094%" y="597" width="0.0114%" height="15" fill="rgb(220,160,43)" fg:x="2031" fg:w="7"/><text x="3.5594%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="3.3094%" y="581" width="0.0114%" height="15" fill="rgb(213,52,39)" fg:x="2031" fg:w="7"/><text x="3.5594%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="3.3094%" y="565" width="0.0114%" height="15" fill="rgb(243,137,7)" fg:x="2031" fg:w="7"/><text x="3.5594%" y="575.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (13 samples, 0.02%)</title><rect x="3.3632%" y="309" width="0.0212%" height="15" fill="rgb(230,79,13)" fg:x="2064" fg:w="13"/><text x="3.6132%" y="319.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (13 samples, 0.02%)</title><rect x="3.3632%" y="293" width="0.0212%" height="15" fill="rgb(247,105,23)" fg:x="2064" fg:w="13"/><text x="3.6132%" y="303.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (24 samples, 0.04%)</title><rect x="3.3616%" y="325" width="0.0391%" height="15" fill="rgb(223,179,41)" fg:x="2063" fg:w="24"/><text x="3.6116%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (10 samples, 0.02%)</title><rect x="3.3844%" y="309" width="0.0163%" height="15" fill="rgb(218,9,34)" fg:x="2077" fg:w="10"/><text x="3.6344%" y="319.50"></text></g><g><title>core::hash::Hasher::write_isize (10 samples, 0.02%)</title><rect x="3.3844%" y="293" width="0.0163%" height="15" fill="rgb(222,106,8)" fg:x="2077" fg:w="10"/><text x="3.6344%" y="303.50"></text></g><g><title>core::hash::Hasher::write_usize (10 samples, 0.02%)</title><rect x="3.3844%" y="277" width="0.0163%" height="15" fill="rgb(211,220,0)" fg:x="2077" fg:w="10"/><text x="3.6344%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="3.3844%" y="261" width="0.0163%" height="15" fill="rgb(229,52,16)" fg:x="2077" fg:w="10"/><text x="3.6344%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="3.3844%" y="245" width="0.0163%" height="15" fill="rgb(212,155,18)" fg:x="2077" fg:w="10"/><text x="3.6344%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="3.3844%" y="229" width="0.0163%" height="15" fill="rgb(242,21,14)" fg:x="2077" fg:w="10"/><text x="3.6344%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (51 samples, 0.08%)</title><rect x="3.3616%" y="357" width="0.0831%" height="15" fill="rgb(222,19,48)" fg:x="2063" fg:w="51"/><text x="3.6116%" y="367.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (51 samples, 0.08%)</title><rect x="3.3616%" y="341" width="0.0831%" height="15" fill="rgb(232,45,27)" fg:x="2063" fg:w="51"/><text x="3.6116%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (24 samples, 0.04%)</title><rect x="3.4056%" y="325" width="0.0391%" height="15" fill="rgb(249,103,42)" fg:x="2090" fg:w="24"/><text x="3.6556%" y="335.50"></text></g><g><title>core::hash::Hasher::write_usize (14 samples, 0.02%)</title><rect x="3.4219%" y="309" width="0.0228%" height="15" fill="rgb(246,81,33)" fg:x="2100" fg:w="14"/><text x="3.6719%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="3.4219%" y="293" width="0.0228%" height="15" fill="rgb(252,33,42)" fg:x="2100" fg:w="14"/><text x="3.6719%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="3.4219%" y="277" width="0.0228%" height="15" fill="rgb(209,212,41)" fg:x="2100" fg:w="14"/><text x="3.6719%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="3.4219%" y="261" width="0.0228%" height="15" fill="rgb(207,154,6)" fg:x="2100" fg:w="14"/><text x="3.6719%" y="271.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (69 samples, 0.11%)</title><rect x="3.3599%" y="373" width="0.1124%" height="15" fill="rgb(223,64,47)" fg:x="2062" fg:w="69"/><text x="3.6099%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (17 samples, 0.03%)</title><rect x="3.4447%" y="357" width="0.0277%" height="15" fill="rgb(211,161,38)" fg:x="2114" fg:w="17"/><text x="3.6947%" y="367.50"></text></g><g><title>core::hash::Hasher::write_isize (17 samples, 0.03%)</title><rect x="3.4447%" y="341" width="0.0277%" height="15" fill="rgb(219,138,40)" fg:x="2114" fg:w="17"/><text x="3.6947%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (17 samples, 0.03%)</title><rect x="3.4447%" y="325" width="0.0277%" height="15" fill="rgb(241,228,46)" fg:x="2114" fg:w="17"/><text x="3.6947%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (17 samples, 0.03%)</title><rect x="3.4447%" y="309" width="0.0277%" height="15" fill="rgb(223,209,38)" fg:x="2114" fg:w="17"/><text x="3.6947%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (17 samples, 0.03%)</title><rect x="3.4447%" y="293" width="0.0277%" height="15" fill="rgb(236,164,45)" fg:x="2114" fg:w="17"/><text x="3.6947%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16 samples, 0.03%)</title><rect x="3.4463%" y="277" width="0.0261%" height="15" fill="rgb(231,15,5)" fg:x="2115" fg:w="16"/><text x="3.6963%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (10 samples, 0.02%)</title><rect x="3.4724%" y="373" width="0.0163%" height="15" fill="rgb(252,35,15)" fg:x="2131" fg:w="10"/><text x="3.7224%" y="383.50"></text></g><g><title>core::hash::Hasher::write_u32 (7 samples, 0.01%)</title><rect x="3.4773%" y="357" width="0.0114%" height="15" fill="rgb(248,181,18)" fg:x="2134" fg:w="7"/><text x="3.7273%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="3.4773%" y="341" width="0.0114%" height="15" fill="rgb(233,39,42)" fg:x="2134" fg:w="7"/><text x="3.7273%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="3.4773%" y="325" width="0.0114%" height="15" fill="rgb(238,110,33)" fg:x="2134" fg:w="7"/><text x="3.7273%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="3.4773%" y="309" width="0.0114%" height="15" fill="rgb(233,195,10)" fg:x="2134" fg:w="7"/><text x="3.7273%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9 samples, 0.01%)</title><rect x="3.5180%" y="293" width="0.0147%" height="15" fill="rgb(254,105,3)" fg:x="2159" fg:w="9"/><text x="3.7680%" y="303.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (114 samples, 0.19%)</title><rect x="3.3567%" y="405" width="0.1858%" height="15" fill="rgb(221,225,9)" fg:x="2060" fg:w="114"/><text x="3.6067%" y="415.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (114 samples, 0.19%)</title><rect x="3.3567%" y="389" width="0.1858%" height="15" fill="rgb(224,227,45)" fg:x="2060" fg:w="114"/><text x="3.6067%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (33 samples, 0.05%)</title><rect x="3.4887%" y="373" width="0.0538%" height="15" fill="rgb(229,198,43)" fg:x="2141" fg:w="33"/><text x="3.7387%" y="383.50"></text></g><g><title>core::hash::Hasher::write_usize (22 samples, 0.04%)</title><rect x="3.5066%" y="357" width="0.0358%" height="15" fill="rgb(206,209,35)" fg:x="2152" fg:w="22"/><text x="3.7566%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (21 samples, 0.03%)</title><rect x="3.5082%" y="341" width="0.0342%" height="15" fill="rgb(245,195,53)" fg:x="2153" fg:w="21"/><text x="3.7582%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (20 samples, 0.03%)</title><rect x="3.5099%" y="325" width="0.0326%" height="15" fill="rgb(240,92,26)" fg:x="2154" fg:w="20"/><text x="3.7599%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20 samples, 0.03%)</title><rect x="3.5099%" y="309" width="0.0326%" height="15" fill="rgb(207,40,23)" fg:x="2154" fg:w="20"/><text x="3.7599%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (10 samples, 0.02%)</title><rect x="3.5490%" y="309" width="0.0163%" height="15" fill="rgb(223,111,35)" fg:x="2178" fg:w="10"/><text x="3.7990%" y="319.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (133 samples, 0.22%)</title><rect x="3.3551%" y="421" width="0.2167%" height="15" fill="rgb(229,147,28)" fg:x="2059" fg:w="133"/><text x="3.6051%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (18 samples, 0.03%)</title><rect x="3.5424%" y="405" width="0.0293%" height="15" fill="rgb(211,29,28)" fg:x="2174" fg:w="18"/><text x="3.7924%" y="415.50"></text></g><g><title>core::hash::Hasher::write_isize (18 samples, 0.03%)</title><rect x="3.5424%" y="389" width="0.0293%" height="15" fill="rgb(228,72,33)" fg:x="2174" fg:w="18"/><text x="3.7924%" y="399.50"></text></g><g><title>core::hash::Hasher::write_usize (18 samples, 0.03%)</title><rect x="3.5424%" y="373" width="0.0293%" height="15" fill="rgb(205,214,31)" fg:x="2174" fg:w="18"/><text x="3.7924%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (18 samples, 0.03%)</title><rect x="3.5424%" y="357" width="0.0293%" height="15" fill="rgb(224,111,15)" fg:x="2174" fg:w="18"/><text x="3.7924%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (17 samples, 0.03%)</title><rect x="3.5441%" y="341" width="0.0277%" height="15" fill="rgb(253,21,26)" fg:x="2175" fg:w="17"/><text x="3.7941%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (17 samples, 0.03%)</title><rect x="3.5441%" y="325" width="0.0277%" height="15" fill="rgb(245,139,43)" fg:x="2175" fg:w="17"/><text x="3.7941%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (11 samples, 0.02%)</title><rect x="3.5718%" y="421" width="0.0179%" height="15" fill="rgb(252,170,7)" fg:x="2192" fg:w="11"/><text x="3.8218%" y="431.50"></text></g><g><title>core::hash::Hasher::write_u32 (10 samples, 0.02%)</title><rect x="3.5734%" y="405" width="0.0163%" height="15" fill="rgb(231,118,14)" fg:x="2193" fg:w="10"/><text x="3.8234%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="3.5734%" y="389" width="0.0163%" height="15" fill="rgb(238,83,0)" fg:x="2193" fg:w="10"/><text x="3.8234%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="3.5734%" y="373" width="0.0163%" height="15" fill="rgb(221,39,39)" fg:x="2193" fg:w="10"/><text x="3.8234%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="3.5734%" y="357" width="0.0163%" height="15" fill="rgb(222,119,46)" fg:x="2193" fg:w="10"/><text x="3.8234%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (31 samples, 0.05%)</title><rect x="3.5897%" y="421" width="0.0505%" height="15" fill="rgb(222,165,49)" fg:x="2203" fg:w="31"/><text x="3.8397%" y="431.50"></text></g><g><title>core::hash::Hasher::write_usize (21 samples, 0.03%)</title><rect x="3.6060%" y="405" width="0.0342%" height="15" fill="rgb(219,113,52)" fg:x="2213" fg:w="21"/><text x="3.8560%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (20 samples, 0.03%)</title><rect x="3.6076%" y="389" width="0.0326%" height="15" fill="rgb(214,7,15)" fg:x="2214" fg:w="20"/><text x="3.8576%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (20 samples, 0.03%)</title><rect x="3.6076%" y="373" width="0.0326%" height="15" fill="rgb(235,32,4)" fg:x="2214" fg:w="20"/><text x="3.8576%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20 samples, 0.03%)</title><rect x="3.6076%" y="357" width="0.0326%" height="15" fill="rgb(238,90,54)" fg:x="2214" fg:w="20"/><text x="3.8576%" y="367.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (177 samples, 0.29%)</title><rect x="3.3534%" y="453" width="0.2884%" height="15" fill="rgb(213,208,19)" fg:x="2058" fg:w="177"/><text x="3.6034%" y="463.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (177 samples, 0.29%)</title><rect x="3.3534%" y="437" width="0.2884%" height="15" fill="rgb(233,156,4)" fg:x="2058" fg:w="177"/><text x="3.6034%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.01%)</title><rect x="3.6500%" y="357" width="0.0130%" height="15" fill="rgb(207,194,5)" fg:x="2240" fg:w="8"/><text x="3.9000%" y="367.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (201 samples, 0.33%)</title><rect x="3.3453%" y="469" width="0.3275%" height="15" fill="rgb(206,111,30)" fg:x="2053" fg:w="201"/><text x="3.5953%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (19 samples, 0.03%)</title><rect x="3.6418%" y="453" width="0.0310%" height="15" fill="rgb(243,70,54)" fg:x="2235" fg:w="19"/><text x="3.8918%" y="463.50"></text></g><g><title>core::hash::Hasher::write_isize (19 samples, 0.03%)</title><rect x="3.6418%" y="437" width="0.0310%" height="15" fill="rgb(242,28,8)" fg:x="2235" fg:w="19"/><text x="3.8918%" y="447.50"></text></g><g><title>core::hash::Hasher::write_usize (18 samples, 0.03%)</title><rect x="3.6435%" y="421" width="0.0293%" height="15" fill="rgb(219,106,18)" fg:x="2236" fg:w="18"/><text x="3.8935%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (18 samples, 0.03%)</title><rect x="3.6435%" y="405" width="0.0293%" height="15" fill="rgb(244,222,10)" fg:x="2236" fg:w="18"/><text x="3.8935%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (18 samples, 0.03%)</title><rect x="3.6435%" y="389" width="0.0293%" height="15" fill="rgb(236,179,52)" fg:x="2236" fg:w="18"/><text x="3.8935%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (18 samples, 0.03%)</title><rect x="3.6435%" y="373" width="0.0293%" height="15" fill="rgb(213,23,39)" fg:x="2236" fg:w="18"/><text x="3.8935%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (9 samples, 0.01%)</title><rect x="3.6728%" y="469" width="0.0147%" height="15" fill="rgb(238,48,10)" fg:x="2254" fg:w="9"/><text x="3.9228%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (10 samples, 0.02%)</title><rect x="3.7021%" y="389" width="0.0163%" height="15" fill="rgb(251,196,23)" fg:x="2272" fg:w="10"/><text x="3.9521%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (23 samples, 0.04%)</title><rect x="3.6875%" y="469" width="0.0375%" height="15" fill="rgb(250,152,24)" fg:x="2263" fg:w="23"/><text x="3.9375%" y="479.50"></text></g><g><title>core::hash::Hasher::write_usize (21 samples, 0.03%)</title><rect x="3.6907%" y="453" width="0.0342%" height="15" fill="rgb(209,150,17)" fg:x="2265" fg:w="21"/><text x="3.9407%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (21 samples, 0.03%)</title><rect x="3.6907%" y="437" width="0.0342%" height="15" fill="rgb(234,202,34)" fg:x="2265" fg:w="21"/><text x="3.9407%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (20 samples, 0.03%)</title><rect x="3.6924%" y="421" width="0.0326%" height="15" fill="rgb(253,148,53)" fg:x="2266" fg:w="20"/><text x="3.9424%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (20 samples, 0.03%)</title><rect x="3.6924%" y="405" width="0.0326%" height="15" fill="rgb(218,129,16)" fg:x="2266" fg:w="20"/><text x="3.9424%" y="415.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (235 samples, 0.38%)</title><rect x="3.3437%" y="501" width="0.3829%" height="15" fill="rgb(216,85,19)" fg:x="2052" fg:w="235"/><text x="3.5937%" y="511.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (235 samples, 0.38%)</title><rect x="3.3437%" y="485" width="0.3829%" height="15" fill="rgb(235,228,7)" fg:x="2052" fg:w="235"/><text x="3.5937%" y="495.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (246 samples, 0.40%)</title><rect x="3.3404%" y="517" width="0.4008%" height="15" fill="rgb(245,175,0)" fg:x="2050" fg:w="246"/><text x="3.5904%" y="527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (9 samples, 0.01%)</title><rect x="3.7266%" y="501" width="0.0147%" height="15" fill="rgb(208,168,36)" fg:x="2287" fg:w="9"/><text x="3.9766%" y="511.50"></text></g><g><title>core::hash::Hasher::write_isize (8 samples, 0.01%)</title><rect x="3.7282%" y="485" width="0.0130%" height="15" fill="rgb(246,171,24)" fg:x="2288" fg:w="8"/><text x="3.9782%" y="495.50"></text></g><g><title>core::hash::Hasher::write_usize (7 samples, 0.01%)</title><rect x="3.7298%" y="469" width="0.0114%" height="15" fill="rgb(215,142,24)" fg:x="2289" fg:w="7"/><text x="3.9798%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (282 samples, 0.46%)</title><rect x="3.3241%" y="645" width="0.4595%" height="15" fill="rgb(250,187,7)" fg:x="2040" fg:w="282"/><text x="3.5741%" y="655.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (281 samples, 0.46%)</title><rect x="3.3257%" y="629" width="0.4579%" height="15" fill="rgb(228,66,33)" fg:x="2041" fg:w="281"/><text x="3.5757%" y="639.50"></text></g><g><title>hashbrown::map::make_hash (281 samples, 0.46%)</title><rect x="3.3257%" y="613" width="0.4579%" height="15" fill="rgb(234,215,21)" fg:x="2041" fg:w="281"/><text x="3.5757%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (281 samples, 0.46%)</title><rect x="3.3257%" y="597" width="0.4579%" height="15" fill="rgb(222,191,20)" fg:x="2041" fg:w="281"/><text x="3.5757%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (274 samples, 0.45%)</title><rect x="3.3371%" y="581" width="0.4465%" height="15" fill="rgb(245,79,54)" fg:x="2048" fg:w="274"/><text x="3.5871%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (274 samples, 0.45%)</title><rect x="3.3371%" y="565" width="0.4465%" height="15" fill="rgb(240,10,37)" fg:x="2048" fg:w="274"/><text x="3.5871%" y="575.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (274 samples, 0.45%)</title><rect x="3.3371%" y="549" width="0.4465%" height="15" fill="rgb(214,192,32)" fg:x="2048" fg:w="274"/><text x="3.5871%" y="559.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (273 samples, 0.44%)</title><rect x="3.3388%" y="533" width="0.4448%" height="15" fill="rgb(209,36,54)" fg:x="2049" fg:w="273"/><text x="3.5888%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (22 samples, 0.04%)</title><rect x="3.7478%" y="517" width="0.0358%" height="15" fill="rgb(220,10,11)" fg:x="2300" fg:w="22"/><text x="3.9978%" y="527.50"></text></g><g><title>core::hash::Hasher::write_usize (10 samples, 0.02%)</title><rect x="3.7673%" y="501" width="0.0163%" height="15" fill="rgb(221,106,17)" fg:x="2312" fg:w="10"/><text x="4.0173%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="3.7706%" y="485" width="0.0130%" height="15" fill="rgb(251,142,44)" fg:x="2314" fg:w="8"/><text x="4.0206%" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="3.7706%" y="469" width="0.0130%" height="15" fill="rgb(238,13,15)" fg:x="2314" fg:w="8"/><text x="4.0206%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="3.7706%" y="453" width="0.0130%" height="15" fill="rgb(208,107,27)" fg:x="2314" fg:w="8"/><text x="4.0206%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (292 samples, 0.48%)</title><rect x="3.3225%" y="709" width="0.4758%" height="15" fill="rgb(205,136,37)" fg:x="2039" fg:w="292"/><text x="3.5725%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (291 samples, 0.47%)</title><rect x="3.3241%" y="693" width="0.4742%" height="15" fill="rgb(250,205,27)" fg:x="2040" fg:w="291"/><text x="3.5741%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (291 samples, 0.47%)</title><rect x="3.3241%" y="677" width="0.4742%" height="15" fill="rgb(210,80,43)" fg:x="2040" fg:w="291"/><text x="3.5741%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (291 samples, 0.47%)</title><rect x="3.3241%" y="661" width="0.4742%" height="15" fill="rgb(247,160,36)" fg:x="2040" fg:w="291"/><text x="3.5741%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (9 samples, 0.01%)</title><rect x="3.7836%" y="645" width="0.0147%" height="15" fill="rgb(234,13,49)" fg:x="2322" fg:w="9"/><text x="4.0336%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (9 samples, 0.01%)</title><rect x="3.7836%" y="629" width="0.0147%" height="15" fill="rgb(234,122,0)" fg:x="2322" fg:w="9"/><text x="4.0336%" y="639.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (9 samples, 0.01%)</title><rect x="3.8374%" y="661" width="0.0147%" height="15" fill="rgb(207,146,38)" fg:x="2355" fg:w="9"/><text x="4.0874%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.04%)</title><rect x="3.8129%" y="693" width="0.0440%" height="15" fill="rgb(207,177,25)" fg:x="2340" fg:w="27"/><text x="4.0629%" y="703.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (15 samples, 0.02%)</title><rect x="3.8325%" y="677" width="0.0244%" height="15" fill="rgb(211,178,42)" fg:x="2352" fg:w="15"/><text x="4.0825%" y="687.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (16 samples, 0.03%)</title><rect x="3.9612%" y="261" width="0.0261%" height="15" fill="rgb(230,69,54)" fg:x="2431" fg:w="16"/><text x="4.2112%" y="271.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (16 samples, 0.03%)</title><rect x="3.9612%" y="245" width="0.0261%" height="15" fill="rgb(214,135,41)" fg:x="2431" fg:w="16"/><text x="4.2112%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (15 samples, 0.02%)</title><rect x="3.9628%" y="229" width="0.0244%" height="15" fill="rgb(237,67,25)" fg:x="2432" fg:w="15"/><text x="4.2128%" y="239.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::cmp::PartialEq&gt;::eq (15 samples, 0.02%)</title><rect x="3.9628%" y="213" width="0.0244%" height="15" fill="rgb(222,189,50)" fg:x="2432" fg:w="15"/><text x="4.2128%" y="223.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (14 samples, 0.02%)</title><rect x="3.9645%" y="197" width="0.0228%" height="15" fill="rgb(245,148,34)" fg:x="2433" fg:w="14"/><text x="4.2145%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (14 samples, 0.02%)</title><rect x="3.9645%" y="181" width="0.0228%" height="15" fill="rgb(222,29,6)" fg:x="2433" fg:w="14"/><text x="4.2145%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (14 samples, 0.02%)</title><rect x="3.9645%" y="165" width="0.0228%" height="15" fill="rgb(221,189,43)" fg:x="2433" fg:w="14"/><text x="4.2145%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (12 samples, 0.02%)</title><rect x="3.9677%" y="149" width="0.0196%" height="15" fill="rgb(207,36,27)" fg:x="2435" fg:w="12"/><text x="4.2177%" y="159.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (12 samples, 0.02%)</title><rect x="3.9677%" y="133" width="0.0196%" height="15" fill="rgb(217,90,24)" fg:x="2435" fg:w="12"/><text x="4.2177%" y="143.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (12 samples, 0.02%)</title><rect x="3.9677%" y="117" width="0.0196%" height="15" fill="rgb(224,66,35)" fg:x="2435" fg:w="12"/><text x="4.2177%" y="127.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (12 samples, 0.02%)</title><rect x="3.9677%" y="101" width="0.0196%" height="15" fill="rgb(221,13,50)" fg:x="2435" fg:w="12"/><text x="4.2177%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (12 samples, 0.02%)</title><rect x="3.9677%" y="85" width="0.0196%" height="15" fill="rgb(236,68,49)" fg:x="2435" fg:w="12"/><text x="4.2177%" y="95.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (12 samples, 0.02%)</title><rect x="3.9677%" y="69" width="0.0196%" height="15" fill="rgb(229,146,28)" fg:x="2435" fg:w="12"/><text x="4.2177%" y="79.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (10 samples, 0.02%)</title><rect x="4.0052%" y="85" width="0.0163%" height="15" fill="rgb(225,31,38)" fg:x="2458" fg:w="10"/><text x="4.2552%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (10 samples, 0.02%)</title><rect x="4.0052%" y="69" width="0.0163%" height="15" fill="rgb(250,208,3)" fg:x="2458" fg:w="10"/><text x="4.2552%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (10 samples, 0.02%)</title><rect x="4.0052%" y="53" width="0.0163%" height="15" fill="rgb(246,54,23)" fg:x="2458" fg:w="10"/><text x="4.2552%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (8 samples, 0.01%)</title><rect x="4.0085%" y="37" width="0.0130%" height="15" fill="rgb(243,76,11)" fg:x="2460" fg:w="8"/><text x="4.2585%" y="47.50"></text></g><g><title>hashbrown::map::make_hash (20 samples, 0.03%)</title><rect x="4.0036%" y="117" width="0.0326%" height="15" fill="rgb(245,21,50)" fg:x="2457" fg:w="20"/><text x="4.2536%" y="127.50"></text></g><g><title>core::hash::BuildHasher::hash_one (20 samples, 0.03%)</title><rect x="4.0036%" y="101" width="0.0326%" height="15" fill="rgb(228,9,43)" fg:x="2457" fg:w="20"/><text x="4.2536%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (52 samples, 0.08%)</title><rect x="3.9873%" y="245" width="0.0847%" height="15" fill="rgb(208,100,47)" fg:x="2447" fg:w="52"/><text x="4.2373%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (52 samples, 0.08%)</title><rect x="3.9873%" y="229" width="0.0847%" height="15" fill="rgb(232,26,8)" fg:x="2447" fg:w="52"/><text x="4.2373%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (43 samples, 0.07%)</title><rect x="4.0020%" y="213" width="0.0701%" height="15" fill="rgb(216,166,38)" fg:x="2456" fg:w="43"/><text x="4.2520%" y="223.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (43 samples, 0.07%)</title><rect x="4.0020%" y="197" width="0.0701%" height="15" fill="rgb(251,202,51)" fg:x="2456" fg:w="43"/><text x="4.2520%" y="207.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (43 samples, 0.07%)</title><rect x="4.0020%" y="181" width="0.0701%" height="15" fill="rgb(254,216,34)" fg:x="2456" fg:w="43"/><text x="4.2520%" y="191.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (43 samples, 0.07%)</title><rect x="4.0020%" y="165" width="0.0701%" height="15" fill="rgb(251,32,27)" fg:x="2456" fg:w="43"/><text x="4.2520%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (43 samples, 0.07%)</title><rect x="4.0020%" y="149" width="0.0701%" height="15" fill="rgb(208,127,28)" fg:x="2456" fg:w="43"/><text x="4.2520%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (43 samples, 0.07%)</title><rect x="4.0020%" y="133" width="0.0701%" height="15" fill="rgb(224,137,22)" fg:x="2456" fg:w="43"/><text x="4.2520%" y="143.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (22 samples, 0.04%)</title><rect x="4.0362%" y="117" width="0.0358%" height="15" fill="rgb(254,70,32)" fg:x="2477" fg:w="22"/><text x="4.2862%" y="127.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (20 samples, 0.03%)</title><rect x="4.0394%" y="101" width="0.0326%" height="15" fill="rgb(229,75,37)" fg:x="2479" fg:w="20"/><text x="4.2894%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (18 samples, 0.03%)</title><rect x="4.0427%" y="85" width="0.0293%" height="15" fill="rgb(252,64,23)" fg:x="2481" fg:w="18"/><text x="4.2927%" y="95.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (77 samples, 0.13%)</title><rect x="3.9563%" y="325" width="0.1255%" height="15" fill="rgb(232,162,48)" fg:x="2428" fg:w="77"/><text x="4.2063%" y="335.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (77 samples, 0.13%)</title><rect x="3.9563%" y="309" width="0.1255%" height="15" fill="rgb(246,160,12)" fg:x="2428" fg:w="77"/><text x="4.2063%" y="319.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (75 samples, 0.12%)</title><rect x="3.9596%" y="293" width="0.1222%" height="15" fill="rgb(247,166,0)" fg:x="2430" fg:w="75"/><text x="4.2096%" y="303.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::cmp::PartialEq&gt;::eq (75 samples, 0.12%)</title><rect x="3.9596%" y="277" width="0.1222%" height="15" fill="rgb(249,219,21)" fg:x="2430" fg:w="75"/><text x="4.2096%" y="287.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (58 samples, 0.09%)</title><rect x="3.9873%" y="261" width="0.0945%" height="15" fill="rgb(205,209,3)" fg:x="2447" fg:w="58"/><text x="4.2373%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="4.0981%" y="213" width="0.0114%" height="15" fill="rgb(243,44,1)" fg:x="2515" fg:w="7"/><text x="4.3481%" y="223.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (7 samples, 0.01%)</title><rect x="4.0981%" y="197" width="0.0114%" height="15" fill="rgb(206,159,16)" fg:x="2515" fg:w="7"/><text x="4.3481%" y="207.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.02%)</title><rect x="4.0948%" y="277" width="0.0228%" height="15" fill="rgb(244,77,30)" fg:x="2513" fg:w="14"/><text x="4.3448%" y="287.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.02%)</title><rect x="4.0948%" y="261" width="0.0228%" height="15" fill="rgb(218,69,12)" fg:x="2513" fg:w="14"/><text x="4.3448%" y="271.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.02%)</title><rect x="4.0948%" y="245" width="0.0228%" height="15" fill="rgb(212,87,7)" fg:x="2513" fg:w="14"/><text x="4.3448%" y="255.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.02%)</title><rect x="4.0965%" y="229" width="0.0212%" height="15" fill="rgb(245,114,25)" fg:x="2514" fg:w="13"/><text x="4.3465%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (26 samples, 0.04%)</title><rect x="4.1291%" y="149" width="0.0424%" height="15" fill="rgb(210,61,42)" fg:x="2534" fg:w="26"/><text x="4.3791%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (26 samples, 0.04%)</title><rect x="4.1291%" y="133" width="0.0424%" height="15" fill="rgb(211,52,33)" fg:x="2534" fg:w="26"/><text x="4.3791%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (26 samples, 0.04%)</title><rect x="4.1291%" y="117" width="0.0424%" height="15" fill="rgb(234,58,33)" fg:x="2534" fg:w="26"/><text x="4.3791%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (20 samples, 0.03%)</title><rect x="4.1388%" y="101" width="0.0326%" height="15" fill="rgb(220,115,36)" fg:x="2540" fg:w="20"/><text x="4.3888%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (7 samples, 0.01%)</title><rect x="4.1714%" y="149" width="0.0114%" height="15" fill="rgb(243,153,54)" fg:x="2560" fg:w="7"/><text x="4.4214%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (42 samples, 0.07%)</title><rect x="4.1258%" y="181" width="0.0684%" height="15" fill="rgb(251,47,18)" fg:x="2532" fg:w="42"/><text x="4.3758%" y="191.50"></text></g><g><title>core::hash::BuildHasher::hash_one (42 samples, 0.07%)</title><rect x="4.1258%" y="165" width="0.0684%" height="15" fill="rgb(242,102,42)" fg:x="2532" fg:w="42"/><text x="4.3758%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (7 samples, 0.01%)</title><rect x="4.1828%" y="149" width="0.0114%" height="15" fill="rgb(234,31,38)" fg:x="2567" fg:w="7"/><text x="4.4328%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (7 samples, 0.01%)</title><rect x="4.1828%" y="133" width="0.0114%" height="15" fill="rgb(221,117,51)" fg:x="2567" fg:w="7"/><text x="4.4328%" y="143.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (7 samples, 0.01%)</title><rect x="4.2350%" y="117" width="0.0114%" height="15" fill="rgb(212,20,18)" fg:x="2599" fg:w="7"/><text x="4.4850%" y="127.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (7 samples, 0.01%)</title><rect x="4.2350%" y="101" width="0.0114%" height="15" fill="rgb(245,133,36)" fg:x="2599" fg:w="7"/><text x="4.4850%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (10 samples, 0.02%)</title><rect x="4.2333%" y="133" width="0.0163%" height="15" fill="rgb(212,6,19)" fg:x="2598" fg:w="10"/><text x="4.4833%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (8 samples, 0.01%)</title><rect x="4.2594%" y="117" width="0.0130%" height="15" fill="rgb(218,1,36)" fg:x="2614" fg:w="8"/><text x="4.5094%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (118 samples, 0.19%)</title><rect x="4.0851%" y="309" width="0.1923%" height="15" fill="rgb(246,84,54)" fg:x="2507" fg:w="118"/><text x="4.3351%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (117 samples, 0.19%)</title><rect x="4.0867%" y="293" width="0.1906%" height="15" fill="rgb(242,110,6)" fg:x="2508" fg:w="117"/><text x="4.3367%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (98 samples, 0.16%)</title><rect x="4.1176%" y="277" width="0.1597%" height="15" fill="rgb(214,47,5)" fg:x="2527" fg:w="98"/><text x="4.3676%" y="287.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (96 samples, 0.16%)</title><rect x="4.1209%" y="261" width="0.1564%" height="15" fill="rgb(218,159,25)" fg:x="2529" fg:w="96"/><text x="4.3709%" y="271.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (96 samples, 0.16%)</title><rect x="4.1209%" y="245" width="0.1564%" height="15" fill="rgb(215,211,28)" fg:x="2529" fg:w="96"/><text x="4.3709%" y="255.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (96 samples, 0.16%)</title><rect x="4.1209%" y="229" width="0.1564%" height="15" fill="rgb(238,59,32)" fg:x="2529" fg:w="96"/><text x="4.3709%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (96 samples, 0.16%)</title><rect x="4.1209%" y="213" width="0.1564%" height="15" fill="rgb(226,82,3)" fg:x="2529" fg:w="96"/><text x="4.3709%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (95 samples, 0.15%)</title><rect x="4.1225%" y="197" width="0.1548%" height="15" fill="rgb(240,164,32)" fg:x="2530" fg:w="95"/><text x="4.3725%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (51 samples, 0.08%)</title><rect x="4.1942%" y="181" width="0.0831%" height="15" fill="rgb(232,46,7)" fg:x="2574" fg:w="51"/><text x="4.4442%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (49 samples, 0.08%)</title><rect x="4.1975%" y="165" width="0.0798%" height="15" fill="rgb(229,129,53)" fg:x="2576" fg:w="49"/><text x="4.4475%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (45 samples, 0.07%)</title><rect x="4.2040%" y="149" width="0.0733%" height="15" fill="rgb(234,188,29)" fg:x="2580" fg:w="45"/><text x="4.4540%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (13 samples, 0.02%)</title><rect x="4.2562%" y="133" width="0.0212%" height="15" fill="rgb(246,141,4)" fg:x="2612" fg:w="13"/><text x="4.5062%" y="143.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (223 samples, 0.36%)</title><rect x="3.9400%" y="389" width="0.3634%" height="15" fill="rgb(229,23,39)" fg:x="2418" fg:w="223"/><text x="4.1900%" y="399.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (222 samples, 0.36%)</title><rect x="3.9417%" y="373" width="0.3617%" height="15" fill="rgb(206,12,3)" fg:x="2419" fg:w="222"/><text x="4.1917%" y="383.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (215 samples, 0.35%)</title><rect x="3.9531%" y="357" width="0.3503%" height="15" fill="rgb(252,226,20)" fg:x="2426" fg:w="215"/><text x="4.2031%" y="367.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::cmp::PartialEq&gt;::eq (214 samples, 0.35%)</title><rect x="3.9547%" y="341" width="0.3487%" height="15" fill="rgb(216,123,35)" fg:x="2427" fg:w="214"/><text x="4.2047%" y="351.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (136 samples, 0.22%)</title><rect x="4.0818%" y="325" width="0.2216%" height="15" fill="rgb(212,68,40)" fg:x="2505" fg:w="136"/><text x="4.3318%" y="335.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (16 samples, 0.03%)</title><rect x="4.2773%" y="309" width="0.0261%" height="15" fill="rgb(254,125,32)" fg:x="2625" fg:w="16"/><text x="4.5273%" y="319.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (14 samples, 0.02%)</title><rect x="4.2806%" y="293" width="0.0228%" height="15" fill="rgb(253,97,22)" fg:x="2627" fg:w="14"/><text x="4.5306%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (13 samples, 0.02%)</title><rect x="4.2822%" y="277" width="0.0212%" height="15" fill="rgb(241,101,14)" fg:x="2628" fg:w="13"/><text x="4.5322%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (11 samples, 0.02%)</title><rect x="4.2855%" y="261" width="0.0179%" height="15" fill="rgb(238,103,29)" fg:x="2630" fg:w="11"/><text x="4.5355%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (9 samples, 0.01%)</title><rect x="4.2887%" y="245" width="0.0147%" height="15" fill="rgb(233,195,47)" fg:x="2632" fg:w="9"/><text x="4.5387%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.02%)</title><rect x="4.3344%" y="277" width="0.0212%" height="15" fill="rgb(246,218,30)" fg:x="2660" fg:w="13"/><text x="4.5844%" y="287.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (11 samples, 0.02%)</title><rect x="4.3376%" y="261" width="0.0179%" height="15" fill="rgb(219,145,47)" fg:x="2662" fg:w="11"/><text x="4.5876%" y="271.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.04%)</title><rect x="4.3181%" y="341" width="0.0407%" height="15" fill="rgb(243,12,26)" fg:x="2650" fg:w="25"/><text x="4.5681%" y="351.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.04%)</title><rect x="4.3181%" y="325" width="0.0407%" height="15" fill="rgb(214,87,16)" fg:x="2650" fg:w="25"/><text x="4.5681%" y="335.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.04%)</title><rect x="4.3181%" y="309" width="0.0407%" height="15" fill="rgb(208,99,42)" fg:x="2650" fg:w="25"/><text x="4.5681%" y="319.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.03%)</title><rect x="4.3295%" y="293" width="0.0293%" height="15" fill="rgb(253,99,2)" fg:x="2657" fg:w="18"/><text x="4.5795%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9 samples, 0.01%)</title><rect x="4.3718%" y="165" width="0.0147%" height="15" fill="rgb(220,168,23)" fg:x="2683" fg:w="9"/><text x="4.6218%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (39 samples, 0.06%)</title><rect x="4.3670%" y="213" width="0.0635%" height="15" fill="rgb(242,38,24)" fg:x="2680" fg:w="39"/><text x="4.6170%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (38 samples, 0.06%)</title><rect x="4.3686%" y="197" width="0.0619%" height="15" fill="rgb(225,182,9)" fg:x="2681" fg:w="38"/><text x="4.6186%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (38 samples, 0.06%)</title><rect x="4.3686%" y="181" width="0.0619%" height="15" fill="rgb(243,178,37)" fg:x="2681" fg:w="38"/><text x="4.6186%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (27 samples, 0.04%)</title><rect x="4.3865%" y="165" width="0.0440%" height="15" fill="rgb(232,139,19)" fg:x="2692" fg:w="27"/><text x="4.6365%" y="175.50"></text></g><g><title>[libc.so.6] (7 samples, 0.01%)</title><rect x="4.4305%" y="197" width="0.0114%" height="15" fill="rgb(225,201,24)" fg:x="2719" fg:w="7"/><text x="4.6805%" y="207.50"></text></g><g><title>[libc.so.6] (7 samples, 0.01%)</title><rect x="4.4419%" y="181" width="0.0114%" height="15" fill="rgb(221,47,46)" fg:x="2726" fg:w="7"/><text x="4.6919%" y="191.50"></text></g><g><title>[libc.so.6] (7 samples, 0.01%)</title><rect x="4.4533%" y="165" width="0.0114%" height="15" fill="rgb(249,23,13)" fg:x="2733" fg:w="7"/><text x="4.7033%" y="175.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (8 samples, 0.01%)</title><rect x="4.4533%" y="181" width="0.0130%" height="15" fill="rgb(219,9,5)" fg:x="2733" fg:w="8"/><text x="4.7033%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (23 samples, 0.04%)</title><rect x="4.4305%" y="213" width="0.0375%" height="15" fill="rgb(254,171,16)" fg:x="2719" fg:w="23"/><text x="4.6805%" y="223.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (16 samples, 0.03%)</title><rect x="4.4419%" y="197" width="0.0261%" height="15" fill="rgb(230,171,20)" fg:x="2726" fg:w="16"/><text x="4.6919%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (10 samples, 0.02%)</title><rect x="4.4810%" y="101" width="0.0163%" height="15" fill="rgb(210,71,41)" fg:x="2750" fg:w="10"/><text x="4.7310%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (17 samples, 0.03%)</title><rect x="4.4712%" y="117" width="0.0277%" height="15" fill="rgb(206,173,20)" fg:x="2744" fg:w="17"/><text x="4.7212%" y="127.50"></text></g><g><title>hashbrown::map::make_hash (92 samples, 0.15%)</title><rect x="4.3637%" y="245" width="0.1499%" height="15" fill="rgb(233,88,34)" fg:x="2678" fg:w="92"/><text x="4.6137%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (92 samples, 0.15%)</title><rect x="4.3637%" y="229" width="0.1499%" height="15" fill="rgb(223,209,46)" fg:x="2678" fg:w="92"/><text x="4.6137%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (28 samples, 0.05%)</title><rect x="4.4680%" y="213" width="0.0456%" height="15" fill="rgb(250,43,18)" fg:x="2742" fg:w="28"/><text x="4.7180%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (28 samples, 0.05%)</title><rect x="4.4680%" y="197" width="0.0456%" height="15" fill="rgb(208,13,10)" fg:x="2742" fg:w="28"/><text x="4.7180%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (26 samples, 0.04%)</title><rect x="4.4712%" y="181" width="0.0424%" height="15" fill="rgb(212,200,36)" fg:x="2744" fg:w="26"/><text x="4.7212%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (26 samples, 0.04%)</title><rect x="4.4712%" y="165" width="0.0424%" height="15" fill="rgb(225,90,30)" fg:x="2744" fg:w="26"/><text x="4.7212%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (26 samples, 0.04%)</title><rect x="4.4712%" y="149" width="0.0424%" height="15" fill="rgb(236,182,39)" fg:x="2744" fg:w="26"/><text x="4.7212%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (26 samples, 0.04%)</title><rect x="4.4712%" y="133" width="0.0424%" height="15" fill="rgb(212,144,35)" fg:x="2744" fg:w="26"/><text x="4.7212%" y="143.50"></text></g><g><title>core::hash::Hasher::write_u8 (9 samples, 0.01%)</title><rect x="4.4989%" y="117" width="0.0147%" height="15" fill="rgb(228,63,44)" fg:x="2761" fg:w="9"/><text x="4.7489%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="4.5006%" y="101" width="0.0130%" height="15" fill="rgb(228,109,6)" fg:x="2762" fg:w="8"/><text x="4.7506%" y="111.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.02%)</title><rect x="4.5576%" y="197" width="0.0179%" height="15" fill="rgb(238,117,24)" fg:x="2797" fg:w="11"/><text x="4.8076%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (7 samples, 0.01%)</title><rect x="4.5641%" y="181" width="0.0114%" height="15" fill="rgb(242,26,26)" fg:x="2801" fg:w="7"/><text x="4.8141%" y="191.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (15 samples, 0.02%)</title><rect x="4.5804%" y="181" width="0.0244%" height="15" fill="rgb(221,92,48)" fg:x="2811" fg:w="15"/><text x="4.8304%" y="191.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (15 samples, 0.02%)</title><rect x="4.5804%" y="165" width="0.0244%" height="15" fill="rgb(209,209,32)" fg:x="2811" fg:w="15"/><text x="4.8304%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (15 samples, 0.02%)</title><rect x="4.5804%" y="149" width="0.0244%" height="15" fill="rgb(221,70,22)" fg:x="2811" fg:w="15"/><text x="4.8304%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (14 samples, 0.02%)</title><rect x="4.5820%" y="133" width="0.0228%" height="15" fill="rgb(248,145,5)" fg:x="2812" fg:w="14"/><text x="4.8320%" y="143.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (14 samples, 0.02%)</title><rect x="4.5820%" y="117" width="0.0228%" height="15" fill="rgb(226,116,26)" fg:x="2812" fg:w="14"/><text x="4.8320%" y="127.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (7 samples, 0.01%)</title><rect x="4.5934%" y="101" width="0.0114%" height="15" fill="rgb(244,5,17)" fg:x="2819" fg:w="7"/><text x="4.8434%" y="111.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (7 samples, 0.01%)</title><rect x="4.5934%" y="85" width="0.0114%" height="15" fill="rgb(252,159,33)" fg:x="2819" fg:w="7"/><text x="4.8434%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (30 samples, 0.05%)</title><rect x="4.5755%" y="197" width="0.0489%" height="15" fill="rgb(206,71,0)" fg:x="2808" fg:w="30"/><text x="4.8255%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (10 samples, 0.02%)</title><rect x="4.6081%" y="181" width="0.0163%" height="15" fill="rgb(233,118,54)" fg:x="2828" fg:w="10"/><text x="4.8581%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (10 samples, 0.02%)</title><rect x="4.6081%" y="165" width="0.0163%" height="15" fill="rgb(234,83,48)" fg:x="2828" fg:w="10"/><text x="4.8581%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (11 samples, 0.02%)</title><rect x="4.6244%" y="197" width="0.0179%" height="15" fill="rgb(228,3,54)" fg:x="2838" fg:w="11"/><text x="4.8744%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (9 samples, 0.01%)</title><rect x="4.6277%" y="181" width="0.0147%" height="15" fill="rgb(226,155,13)" fg:x="2840" fg:w="9"/><text x="4.8777%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (14 samples, 0.02%)</title><rect x="4.6489%" y="181" width="0.0228%" height="15" fill="rgb(241,28,37)" fg:x="2853" fg:w="14"/><text x="4.8989%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (231 samples, 0.38%)</title><rect x="4.3034%" y="373" width="0.3764%" height="15" fill="rgb(233,93,10)" fg:x="2641" fg:w="231"/><text x="4.5534%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (227 samples, 0.37%)</title><rect x="4.3099%" y="357" width="0.3699%" height="15" fill="rgb(225,113,19)" fg:x="2645" fg:w="227"/><text x="4.5599%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (197 samples, 0.32%)</title><rect x="4.3588%" y="341" width="0.3210%" height="15" fill="rgb(241,2,18)" fg:x="2675" fg:w="197"/><text x="4.6088%" y="351.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (195 samples, 0.32%)</title><rect x="4.3621%" y="325" width="0.3177%" height="15" fill="rgb(228,207,21)" fg:x="2677" fg:w="195"/><text x="4.6121%" y="335.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (195 samples, 0.32%)</title><rect x="4.3621%" y="309" width="0.3177%" height="15" fill="rgb(213,211,35)" fg:x="2677" fg:w="195"/><text x="4.6121%" y="319.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (195 samples, 0.32%)</title><rect x="4.3621%" y="293" width="0.3177%" height="15" fill="rgb(209,83,10)" fg:x="2677" fg:w="195"/><text x="4.6121%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (195 samples, 0.32%)</title><rect x="4.3621%" y="277" width="0.3177%" height="15" fill="rgb(209,164,1)" fg:x="2677" fg:w="195"/><text x="4.6121%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (194 samples, 0.32%)</title><rect x="4.3637%" y="261" width="0.3161%" height="15" fill="rgb(213,184,43)" fg:x="2678" fg:w="194"/><text x="4.6137%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (102 samples, 0.17%)</title><rect x="4.5136%" y="245" width="0.1662%" height="15" fill="rgb(231,61,34)" fg:x="2770" fg:w="102"/><text x="4.7636%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (97 samples, 0.16%)</title><rect x="4.5218%" y="229" width="0.1581%" height="15" fill="rgb(235,75,3)" fg:x="2775" fg:w="97"/><text x="4.7718%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (88 samples, 0.14%)</title><rect x="4.5364%" y="213" width="0.1434%" height="15" fill="rgb(220,106,47)" fg:x="2784" fg:w="88"/><text x="4.7864%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (23 samples, 0.04%)</title><rect x="4.6423%" y="197" width="0.0375%" height="15" fill="rgb(210,196,33)" fg:x="2849" fg:w="23"/><text x="4.8923%" y="207.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (15 samples, 0.02%)</title><rect x="4.7140%" y="293" width="0.0244%" height="15" fill="rgb(229,154,42)" fg:x="2893" fg:w="15"/><text x="4.9640%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (13 samples, 0.02%)</title><rect x="4.7173%" y="277" width="0.0212%" height="15" fill="rgb(228,114,26)" fg:x="2895" fg:w="13"/><text x="4.9673%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (12 samples, 0.02%)</title><rect x="4.7189%" y="261" width="0.0196%" height="15" fill="rgb(208,144,1)" fg:x="2896" fg:w="12"/><text x="4.9689%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (11 samples, 0.02%)</title><rect x="4.7205%" y="245" width="0.0179%" height="15" fill="rgb(239,112,37)" fg:x="2897" fg:w="11"/><text x="4.9705%" y="255.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (501 samples, 0.82%)</title><rect x="3.9237%" y="453" width="0.8164%" height="15" fill="rgb(210,96,50)" fg:x="2408" fg:w="501"/><text x="4.1737%" y="463.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (500 samples, 0.81%)</title><rect x="3.9254%" y="437" width="0.8147%" height="15" fill="rgb(222,178,2)" fg:x="2409" fg:w="500"/><text x="4.1754%" y="447.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (495 samples, 0.81%)</title><rect x="3.9335%" y="421" width="0.8066%" height="15" fill="rgb(226,74,18)" fg:x="2414" fg:w="495"/><text x="4.1835%" y="431.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::cmp::PartialEq&gt;::eq (494 samples, 0.80%)</title><rect x="3.9351%" y="405" width="0.8050%" height="15" fill="rgb(225,67,54)" fg:x="2415" fg:w="494"/><text x="4.1851%" y="415.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (268 samples, 0.44%)</title><rect x="4.3034%" y="389" width="0.4367%" height="15" fill="rgb(251,92,32)" fg:x="2641" fg:w="268"/><text x="4.5534%" y="399.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (37 samples, 0.06%)</title><rect x="4.6798%" y="373" width="0.0603%" height="15" fill="rgb(228,149,22)" fg:x="2872" fg:w="37"/><text x="4.9298%" y="383.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (34 samples, 0.06%)</title><rect x="4.6847%" y="357" width="0.0554%" height="15" fill="rgb(243,54,13)" fg:x="2875" fg:w="34"/><text x="4.9347%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (31 samples, 0.05%)</title><rect x="4.6896%" y="341" width="0.0505%" height="15" fill="rgb(243,180,28)" fg:x="2878" fg:w="31"/><text x="4.9396%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (28 samples, 0.05%)</title><rect x="4.6945%" y="325" width="0.0456%" height="15" fill="rgb(208,167,24)" fg:x="2881" fg:w="28"/><text x="4.9445%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (26 samples, 0.04%)</title><rect x="4.6977%" y="309" width="0.0424%" height="15" fill="rgb(245,73,45)" fg:x="2883" fg:w="26"/><text x="4.9477%" y="319.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (11 samples, 0.02%)</title><rect x="4.7743%" y="405" width="0.0179%" height="15" fill="rgb(237,203,48)" fg:x="2930" fg:w="11"/><text x="5.0243%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.02%)</title><rect x="4.8167%" y="309" width="0.0163%" height="15" fill="rgb(211,197,16)" fg:x="2956" fg:w="10"/><text x="5.0667%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (7 samples, 0.01%)</title><rect x="4.8330%" y="309" width="0.0114%" height="15" fill="rgb(243,99,51)" fg:x="2966" fg:w="7"/><text x="5.0830%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.04%)</title><rect x="4.8102%" y="341" width="0.0358%" height="15" fill="rgb(215,123,29)" fg:x="2952" fg:w="22"/><text x="5.0602%" y="351.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (21 samples, 0.03%)</title><rect x="4.8118%" y="325" width="0.0342%" height="15" fill="rgb(239,186,37)" fg:x="2953" fg:w="21"/><text x="5.0618%" y="335.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.06%)</title><rect x="4.7922%" y="405" width="0.0619%" height="15" fill="rgb(252,136,39)" fg:x="2941" fg:w="38"/><text x="5.0422%" y="415.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.06%)</title><rect x="4.7922%" y="389" width="0.0619%" height="15" fill="rgb(223,213,32)" fg:x="2941" fg:w="38"/><text x="5.0422%" y="399.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.06%)</title><rect x="4.7922%" y="373" width="0.0619%" height="15" fill="rgb(233,115,5)" fg:x="2941" fg:w="38"/><text x="5.0422%" y="383.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.06%)</title><rect x="4.7971%" y="357" width="0.0570%" height="15" fill="rgb(207,226,44)" fg:x="2944" fg:w="35"/><text x="5.0471%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (14 samples, 0.02%)</title><rect x="4.8982%" y="229" width="0.0228%" height="15" fill="rgb(208,126,0)" fg:x="3006" fg:w="14"/><text x="5.1482%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (67 samples, 0.11%)</title><rect x="4.8868%" y="277" width="0.1092%" height="15" fill="rgb(244,66,21)" fg:x="2999" fg:w="67"/><text x="5.1368%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (67 samples, 0.11%)</title><rect x="4.8868%" y="261" width="0.1092%" height="15" fill="rgb(222,97,12)" fg:x="2999" fg:w="67"/><text x="5.1368%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (67 samples, 0.11%)</title><rect x="4.8868%" y="245" width="0.1092%" height="15" fill="rgb(219,213,19)" fg:x="2999" fg:w="67"/><text x="5.1368%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (46 samples, 0.07%)</title><rect x="4.9210%" y="229" width="0.0750%" height="15" fill="rgb(252,169,30)" fg:x="3020" fg:w="46"/><text x="5.1710%" y="239.50"></text></g><g><title>[libc.so.6] (7 samples, 0.01%)</title><rect x="4.9976%" y="261" width="0.0114%" height="15" fill="rgb(206,32,51)" fg:x="3067" fg:w="7"/><text x="5.2476%" y="271.50"></text></g><g><title>[libc.so.6] (11 samples, 0.02%)</title><rect x="5.0090%" y="245" width="0.0179%" height="15" fill="rgb(250,172,42)" fg:x="3074" fg:w="11"/><text x="5.2590%" y="255.50"></text></g><g><title>[libc.so.6] (11 samples, 0.02%)</title><rect x="5.0285%" y="229" width="0.0179%" height="15" fill="rgb(209,34,43)" fg:x="3086" fg:w="11"/><text x="5.2785%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (32 samples, 0.05%)</title><rect x="4.9959%" y="277" width="0.0521%" height="15" fill="rgb(223,11,35)" fg:x="3066" fg:w="32"/><text x="5.2459%" y="287.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (24 samples, 0.04%)</title><rect x="5.0090%" y="261" width="0.0391%" height="15" fill="rgb(251,219,26)" fg:x="3074" fg:w="24"/><text x="5.2590%" y="271.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (13 samples, 0.02%)</title><rect x="5.0269%" y="245" width="0.0212%" height="15" fill="rgb(231,119,3)" fg:x="3085" fg:w="13"/><text x="5.2769%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9 samples, 0.01%)</title><rect x="5.0741%" y="165" width="0.0147%" height="15" fill="rgb(216,97,11)" fg:x="3114" fg:w="9"/><text x="5.3241%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (23 samples, 0.04%)</title><rect x="5.0530%" y="181" width="0.0375%" height="15" fill="rgb(223,59,9)" fg:x="3101" fg:w="23"/><text x="5.3030%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (139 samples, 0.23%)</title><rect x="4.8819%" y="309" width="0.2265%" height="15" fill="rgb(233,93,31)" fg:x="2996" fg:w="139"/><text x="5.1319%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (139 samples, 0.23%)</title><rect x="4.8819%" y="293" width="0.2265%" height="15" fill="rgb(239,81,33)" fg:x="2996" fg:w="139"/><text x="5.1319%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (37 samples, 0.06%)</title><rect x="5.0481%" y="277" width="0.0603%" height="15" fill="rgb(213,120,34)" fg:x="3098" fg:w="37"/><text x="5.2981%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (36 samples, 0.06%)</title><rect x="5.0497%" y="261" width="0.0587%" height="15" fill="rgb(243,49,53)" fg:x="3099" fg:w="36"/><text x="5.2997%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (34 samples, 0.06%)</title><rect x="5.0530%" y="245" width="0.0554%" height="15" fill="rgb(247,216,33)" fg:x="3101" fg:w="34"/><text x="5.3030%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (34 samples, 0.06%)</title><rect x="5.0530%" y="229" width="0.0554%" height="15" fill="rgb(226,26,14)" fg:x="3101" fg:w="34"/><text x="5.3030%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (34 samples, 0.06%)</title><rect x="5.0530%" y="213" width="0.0554%" height="15" fill="rgb(215,49,53)" fg:x="3101" fg:w="34"/><text x="5.3030%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (34 samples, 0.06%)</title><rect x="5.0530%" y="197" width="0.0554%" height="15" fill="rgb(245,162,40)" fg:x="3101" fg:w="34"/><text x="5.3030%" y="207.50"></text></g><g><title>core::hash::Hasher::write_u8 (11 samples, 0.02%)</title><rect x="5.0904%" y="181" width="0.0179%" height="15" fill="rgb(229,68,17)" fg:x="3124" fg:w="11"/><text x="5.3404%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11 samples, 0.02%)</title><rect x="5.0904%" y="165" width="0.0179%" height="15" fill="rgb(213,182,10)" fg:x="3124" fg:w="11"/><text x="5.3404%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.03%)</title><rect x="5.1670%" y="261" width="0.0293%" height="15" fill="rgb(245,125,30)" fg:x="3171" fg:w="18"/><text x="5.4170%" y="271.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (12 samples, 0.02%)</title><rect x="5.1768%" y="245" width="0.0196%" height="15" fill="rgb(232,202,2)" fg:x="3177" fg:w="12"/><text x="5.4268%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.01%)</title><rect x="5.2175%" y="165" width="0.0114%" height="15" fill="rgb(237,140,51)" fg:x="3202" fg:w="7"/><text x="5.4675%" y="175.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (22 samples, 0.04%)</title><rect x="5.2061%" y="245" width="0.0358%" height="15" fill="rgb(236,157,25)" fg:x="3195" fg:w="22"/><text x="5.4561%" y="255.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (22 samples, 0.04%)</title><rect x="5.2061%" y="229" width="0.0358%" height="15" fill="rgb(219,209,0)" fg:x="3195" fg:w="22"/><text x="5.4561%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (22 samples, 0.04%)</title><rect x="5.2061%" y="213" width="0.0358%" height="15" fill="rgb(240,116,54)" fg:x="3195" fg:w="22"/><text x="5.4561%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (20 samples, 0.03%)</title><rect x="5.2094%" y="197" width="0.0326%" height="15" fill="rgb(216,10,36)" fg:x="3197" fg:w="20"/><text x="5.4594%" y="207.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (17 samples, 0.03%)</title><rect x="5.2143%" y="181" width="0.0277%" height="15" fill="rgb(222,72,44)" fg:x="3200" fg:w="17"/><text x="5.4643%" y="191.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (8 samples, 0.01%)</title><rect x="5.2289%" y="165" width="0.0130%" height="15" fill="rgb(232,159,9)" fg:x="3209" fg:w="8"/><text x="5.4789%" y="175.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (8 samples, 0.01%)</title><rect x="5.2289%" y="149" width="0.0130%" height="15" fill="rgb(210,39,32)" fg:x="3209" fg:w="8"/><text x="5.4789%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (36 samples, 0.06%)</title><rect x="5.1964%" y="261" width="0.0587%" height="15" fill="rgb(216,194,45)" fg:x="3189" fg:w="36"/><text x="5.4464%" y="271.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (16 samples, 0.03%)</title><rect x="5.2550%" y="261" width="0.0261%" height="15" fill="rgb(218,18,35)" fg:x="3225" fg:w="16"/><text x="5.5050%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (16 samples, 0.03%)</title><rect x="5.2550%" y="245" width="0.0261%" height="15" fill="rgb(207,83,51)" fg:x="3225" fg:w="16"/><text x="5.5050%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (8 samples, 0.01%)</title><rect x="5.2925%" y="245" width="0.0130%" height="15" fill="rgb(225,63,43)" fg:x="3248" fg:w="8"/><text x="5.5425%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (13 samples, 0.02%)</title><rect x="5.3055%" y="245" width="0.0212%" height="15" fill="rgb(207,57,36)" fg:x="3256" fg:w="13"/><text x="5.5555%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (370 samples, 0.60%)</title><rect x="4.7434%" y="437" width="0.6029%" height="15" fill="rgb(216,99,33)" fg:x="2911" fg:w="370"/><text x="4.9934%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (368 samples, 0.60%)</title><rect x="4.7466%" y="421" width="0.5996%" height="15" fill="rgb(225,42,16)" fg:x="2913" fg:w="368"/><text x="4.9966%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (302 samples, 0.49%)</title><rect x="4.8542%" y="405" width="0.4921%" height="15" fill="rgb(220,201,45)" fg:x="2979" fg:w="302"/><text x="5.1042%" y="415.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (298 samples, 0.49%)</title><rect x="4.8607%" y="389" width="0.4856%" height="15" fill="rgb(225,33,4)" fg:x="2983" fg:w="298"/><text x="5.1107%" y="399.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (296 samples, 0.48%)</title><rect x="4.8639%" y="373" width="0.4823%" height="15" fill="rgb(224,33,50)" fg:x="2985" fg:w="296"/><text x="5.1139%" y="383.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (296 samples, 0.48%)</title><rect x="4.8639%" y="357" width="0.4823%" height="15" fill="rgb(246,198,51)" fg:x="2985" fg:w="296"/><text x="5.1139%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (296 samples, 0.48%)</title><rect x="4.8639%" y="341" width="0.4823%" height="15" fill="rgb(205,22,4)" fg:x="2985" fg:w="296"/><text x="5.1139%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (289 samples, 0.47%)</title><rect x="4.8753%" y="325" width="0.4709%" height="15" fill="rgb(206,3,8)" fg:x="2992" fg:w="289"/><text x="5.1253%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (146 samples, 0.24%)</title><rect x="5.1084%" y="309" width="0.2379%" height="15" fill="rgb(251,23,15)" fg:x="3135" fg:w="146"/><text x="5.3584%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (140 samples, 0.23%)</title><rect x="5.1181%" y="293" width="0.2281%" height="15" fill="rgb(252,88,28)" fg:x="3141" fg:w="140"/><text x="5.3681%" y="303.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (129 samples, 0.21%)</title><rect x="5.1361%" y="277" width="0.2102%" height="15" fill="rgb(212,127,14)" fg:x="3152" fg:w="129"/><text x="5.3861%" y="287.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (40 samples, 0.07%)</title><rect x="5.2811%" y="261" width="0.0652%" height="15" fill="rgb(247,145,37)" fg:x="3241" fg:w="40"/><text x="5.5311%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (12 samples, 0.02%)</title><rect x="5.3267%" y="245" width="0.0196%" height="15" fill="rgb(209,117,53)" fg:x="3269" fg:w="12"/><text x="5.5767%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (12 samples, 0.02%)</title><rect x="5.3267%" y="229" width="0.0196%" height="15" fill="rgb(212,90,42)" fg:x="3269" fg:w="12"/><text x="5.5767%" y="239.50"></text></g><g><title>[libc.so.6] (7 samples, 0.01%)</title><rect x="5.3511%" y="405" width="0.0114%" height="15" fill="rgb(218,164,37)" fg:x="3284" fg:w="7"/><text x="5.6011%" y="415.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (15 samples, 0.02%)</title><rect x="5.3788%" y="357" width="0.0244%" height="15" fill="rgb(246,65,34)" fg:x="3301" fg:w="15"/><text x="5.6288%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (11 samples, 0.02%)</title><rect x="5.3854%" y="341" width="0.0179%" height="15" fill="rgb(231,100,33)" fg:x="3305" fg:w="11"/><text x="5.6354%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (11 samples, 0.02%)</title><rect x="5.3854%" y="325" width="0.0179%" height="15" fill="rgb(228,126,14)" fg:x="3305" fg:w="11"/><text x="5.6354%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (11 samples, 0.02%)</title><rect x="5.3854%" y="309" width="0.0179%" height="15" fill="rgb(215,173,21)" fg:x="3305" fg:w="11"/><text x="5.6354%" y="319.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (916 samples, 1.49%)</title><rect x="3.9123%" y="517" width="1.4926%" height="15" fill="rgb(210,6,40)" fg:x="2401" fg:w="916"/><text x="4.1623%" y="527.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (916 samples, 1.49%)</title><rect x="3.9123%" y="501" width="1.4926%" height="15" fill="rgb(212,48,18)" fg:x="2401" fg:w="916"/><text x="4.1623%" y="511.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (909 samples, 1.48%)</title><rect x="3.9237%" y="485" width="1.4812%" height="15" fill="rgb(230,214,11)" fg:x="2408" fg:w="909"/><text x="4.1737%" y="495.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::cmp::PartialEq&gt;::eq (909 samples, 1.48%)</title><rect x="3.9237%" y="469" width="1.4812%" height="15" fill="rgb(254,105,39)" fg:x="2408" fg:w="909"/><text x="4.1737%" y="479.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (408 samples, 0.66%)</title><rect x="4.7401%" y="453" width="0.6648%" height="15" fill="rgb(245,158,5)" fg:x="2909" fg:w="408"/><text x="4.9901%" y="463.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (36 samples, 0.06%)</title><rect x="5.3463%" y="437" width="0.0587%" height="15" fill="rgb(249,208,11)" fg:x="3281" fg:w="36"/><text x="5.5963%" y="447.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (33 samples, 0.05%)</title><rect x="5.3511%" y="421" width="0.0538%" height="15" fill="rgb(210,39,28)" fg:x="3284" fg:w="33"/><text x="5.6011%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (26 samples, 0.04%)</title><rect x="5.3626%" y="405" width="0.0424%" height="15" fill="rgb(211,56,53)" fg:x="3291" fg:w="26"/><text x="5.6126%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (26 samples, 0.04%)</title><rect x="5.3626%" y="389" width="0.0424%" height="15" fill="rgb(226,201,30)" fg:x="3291" fg:w="26"/><text x="5.6126%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (24 samples, 0.04%)</title><rect x="5.3658%" y="373" width="0.0391%" height="15" fill="rgb(239,101,34)" fg:x="3293" fg:w="24"/><text x="5.6158%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.02%)</title><rect x="5.4880%" y="373" width="0.0196%" height="15" fill="rgb(226,209,5)" fg:x="3368" fg:w="12"/><text x="5.7380%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.05%)</title><rect x="5.4766%" y="405" width="0.0505%" height="15" fill="rgb(250,105,47)" fg:x="3361" fg:w="31"/><text x="5.7266%" y="415.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (27 samples, 0.04%)</title><rect x="5.4831%" y="389" width="0.0440%" height="15" fill="rgb(230,72,3)" fg:x="3365" fg:w="27"/><text x="5.7331%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (12 samples, 0.02%)</title><rect x="5.5076%" y="373" width="0.0196%" height="15" fill="rgb(232,218,39)" fg:x="3380" fg:w="12"/><text x="5.7576%" y="383.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.08%)</title><rect x="5.4538%" y="469" width="0.0815%" height="15" fill="rgb(248,166,6)" fg:x="3347" fg:w="50"/><text x="5.7038%" y="479.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.08%)</title><rect x="5.4538%" y="453" width="0.0815%" height="15" fill="rgb(247,89,20)" fg:x="3347" fg:w="50"/><text x="5.7038%" y="463.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.08%)</title><rect x="5.4538%" y="437" width="0.0815%" height="15" fill="rgb(248,130,54)" fg:x="3347" fg:w="50"/><text x="5.7038%" y="447.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.08%)</title><rect x="5.4571%" y="421" width="0.0782%" height="15" fill="rgb(234,196,4)" fg:x="3349" fg:w="48"/><text x="5.7071%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (17 samples, 0.03%)</title><rect x="5.5809%" y="293" width="0.0277%" height="15" fill="rgb(250,143,31)" fg:x="3425" fg:w="17"/><text x="5.8309%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (80 samples, 0.13%)</title><rect x="5.5646%" y="341" width="0.1304%" height="15" fill="rgb(211,110,34)" fg:x="3415" fg:w="80"/><text x="5.8146%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (80 samples, 0.13%)</title><rect x="5.5646%" y="325" width="0.1304%" height="15" fill="rgb(215,124,48)" fg:x="3415" fg:w="80"/><text x="5.8146%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (80 samples, 0.13%)</title><rect x="5.5646%" y="309" width="0.1304%" height="15" fill="rgb(216,46,13)" fg:x="3415" fg:w="80"/><text x="5.8146%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (53 samples, 0.09%)</title><rect x="5.6086%" y="293" width="0.0864%" height="15" fill="rgb(205,184,25)" fg:x="3442" fg:w="53"/><text x="5.8586%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (27 samples, 0.04%)</title><rect x="5.6950%" y="341" width="0.0440%" height="15" fill="rgb(228,1,10)" fg:x="3495" fg:w="27"/><text x="5.9450%" y="351.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (22 samples, 0.04%)</title><rect x="5.7031%" y="325" width="0.0358%" height="15" fill="rgb(213,116,27)" fg:x="3500" fg:w="22"/><text x="5.9531%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (16 samples, 0.03%)</title><rect x="5.7129%" y="309" width="0.0261%" height="15" fill="rgb(241,95,50)" fg:x="3506" fg:w="16"/><text x="5.9629%" y="319.50"></text></g><g><title>[libc.so.6] (16 samples, 0.03%)</title><rect x="5.7129%" y="293" width="0.0261%" height="15" fill="rgb(238,48,32)" fg:x="3506" fg:w="16"/><text x="5.9629%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (13 samples, 0.02%)</title><rect x="5.7585%" y="229" width="0.0212%" height="15" fill="rgb(235,113,49)" fg:x="3534" fg:w="13"/><text x="6.0085%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (26 samples, 0.04%)</title><rect x="5.7390%" y="245" width="0.0424%" height="15" fill="rgb(205,127,43)" fg:x="3522" fg:w="26"/><text x="5.9890%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (154 samples, 0.25%)</title><rect x="5.5532%" y="373" width="0.2509%" height="15" fill="rgb(250,162,2)" fg:x="3408" fg:w="154"/><text x="5.8032%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (154 samples, 0.25%)</title><rect x="5.5532%" y="357" width="0.2509%" height="15" fill="rgb(220,13,41)" fg:x="3408" fg:w="154"/><text x="5.8032%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (40 samples, 0.07%)</title><rect x="5.7390%" y="341" width="0.0652%" height="15" fill="rgb(249,221,25)" fg:x="3522" fg:w="40"/><text x="5.9890%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (40 samples, 0.07%)</title><rect x="5.7390%" y="325" width="0.0652%" height="15" fill="rgb(215,208,19)" fg:x="3522" fg:w="40"/><text x="5.9890%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (40 samples, 0.07%)</title><rect x="5.7390%" y="309" width="0.0652%" height="15" fill="rgb(236,175,2)" fg:x="3522" fg:w="40"/><text x="5.9890%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (40 samples, 0.07%)</title><rect x="5.7390%" y="293" width="0.0652%" height="15" fill="rgb(241,52,2)" fg:x="3522" fg:w="40"/><text x="5.9890%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (40 samples, 0.07%)</title><rect x="5.7390%" y="277" width="0.0652%" height="15" fill="rgb(248,140,14)" fg:x="3522" fg:w="40"/><text x="5.9890%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (40 samples, 0.07%)</title><rect x="5.7390%" y="261" width="0.0652%" height="15" fill="rgb(253,22,42)" fg:x="3522" fg:w="40"/><text x="5.9890%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (14 samples, 0.02%)</title><rect x="5.7813%" y="245" width="0.0228%" height="15" fill="rgb(234,61,47)" fg:x="3548" fg:w="14"/><text x="6.0313%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="5.7813%" y="229" width="0.0228%" height="15" fill="rgb(208,226,15)" fg:x="3548" fg:w="14"/><text x="6.0313%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (7 samples, 0.01%)</title><rect x="5.7927%" y="213" width="0.0114%" height="15" fill="rgb(217,221,4)" fg:x="3555" fg:w="7"/><text x="6.0427%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.03%)</title><rect x="5.8709%" y="325" width="0.0261%" height="15" fill="rgb(212,174,34)" fg:x="3603" fg:w="16"/><text x="6.1209%" y="335.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (10 samples, 0.02%)</title><rect x="5.8807%" y="309" width="0.0163%" height="15" fill="rgb(253,83,4)" fg:x="3609" fg:w="10"/><text x="6.1307%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (10 samples, 0.02%)</title><rect x="5.9117%" y="229" width="0.0163%" height="15" fill="rgb(250,195,49)" fg:x="3628" fg:w="10"/><text x="6.1617%" y="239.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (20 samples, 0.03%)</title><rect x="5.9052%" y="309" width="0.0326%" height="15" fill="rgb(241,192,25)" fg:x="3624" fg:w="20"/><text x="6.1552%" y="319.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (20 samples, 0.03%)</title><rect x="5.9052%" y="293" width="0.0326%" height="15" fill="rgb(208,124,10)" fg:x="3624" fg:w="20"/><text x="6.1552%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (19 samples, 0.03%)</title><rect x="5.9068%" y="277" width="0.0310%" height="15" fill="rgb(222,33,0)" fg:x="3625" fg:w="19"/><text x="6.1568%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (18 samples, 0.03%)</title><rect x="5.9084%" y="261" width="0.0293%" height="15" fill="rgb(234,209,28)" fg:x="3626" fg:w="18"/><text x="6.1584%" y="271.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (18 samples, 0.03%)</title><rect x="5.9084%" y="245" width="0.0293%" height="15" fill="rgb(224,11,23)" fg:x="3626" fg:w="18"/><text x="6.1584%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (38 samples, 0.06%)</title><rect x="5.8970%" y="325" width="0.0619%" height="15" fill="rgb(232,99,1)" fg:x="3619" fg:w="38"/><text x="6.1470%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (11 samples, 0.02%)</title><rect x="5.9410%" y="309" width="0.0179%" height="15" fill="rgb(237,95,45)" fg:x="3646" fg:w="11"/><text x="6.1910%" y="319.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (11 samples, 0.02%)</title><rect x="5.9410%" y="293" width="0.0179%" height="15" fill="rgb(208,109,11)" fg:x="3646" fg:w="11"/><text x="6.1910%" y="303.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (13 samples, 0.02%)</title><rect x="5.9606%" y="325" width="0.0212%" height="15" fill="rgb(216,190,48)" fg:x="3658" fg:w="13"/><text x="6.2106%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (11 samples, 0.02%)</title><rect x="5.9638%" y="309" width="0.0179%" height="15" fill="rgb(251,171,36)" fg:x="3660" fg:w="11"/><text x="6.2138%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (19 samples, 0.03%)</title><rect x="6.0111%" y="309" width="0.0310%" height="15" fill="rgb(230,62,22)" fg:x="3689" fg:w="19"/><text x="6.2611%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (398 samples, 0.65%)</title><rect x="5.4049%" y="501" width="0.6485%" height="15" fill="rgb(225,114,35)" fg:x="3317" fg:w="398"/><text x="5.6549%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (397 samples, 0.65%)</title><rect x="5.4066%" y="485" width="0.6469%" height="15" fill="rgb(215,118,42)" fg:x="3318" fg:w="397"/><text x="5.6566%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (318 samples, 0.52%)</title><rect x="5.5353%" y="469" width="0.5182%" height="15" fill="rgb(243,119,21)" fg:x="3397" fg:w="318"/><text x="5.7853%" y="479.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (315 samples, 0.51%)</title><rect x="5.5402%" y="453" width="0.5133%" height="15" fill="rgb(252,177,53)" fg:x="3400" fg:w="315"/><text x="5.7902%" y="463.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (314 samples, 0.51%)</title><rect x="5.5418%" y="437" width="0.5117%" height="15" fill="rgb(237,209,29)" fg:x="3401" fg:w="314"/><text x="5.7918%" y="447.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (314 samples, 0.51%)</title><rect x="5.5418%" y="421" width="0.5117%" height="15" fill="rgb(212,65,23)" fg:x="3401" fg:w="314"/><text x="5.7918%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (314 samples, 0.51%)</title><rect x="5.5418%" y="405" width="0.5117%" height="15" fill="rgb(230,222,46)" fg:x="3401" fg:w="314"/><text x="5.7918%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (310 samples, 0.51%)</title><rect x="5.5483%" y="389" width="0.5051%" height="15" fill="rgb(215,135,32)" fg:x="3405" fg:w="310"/><text x="5.7983%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (153 samples, 0.25%)</title><rect x="5.8041%" y="373" width="0.2493%" height="15" fill="rgb(246,101,22)" fg:x="3562" fg:w="153"/><text x="6.0541%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (143 samples, 0.23%)</title><rect x="5.8204%" y="357" width="0.2330%" height="15" fill="rgb(206,107,13)" fg:x="3572" fg:w="143"/><text x="6.0704%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (134 samples, 0.22%)</title><rect x="5.8351%" y="341" width="0.2183%" height="15" fill="rgb(250,100,44)" fg:x="3581" fg:w="134"/><text x="6.0851%" y="351.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (44 samples, 0.07%)</title><rect x="5.9818%" y="325" width="0.0717%" height="15" fill="rgb(231,147,38)" fg:x="3671" fg:w="44"/><text x="6.2318%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (7 samples, 0.01%)</title><rect x="6.0420%" y="309" width="0.0114%" height="15" fill="rgb(229,8,40)" fg:x="3708" fg:w="7"/><text x="6.2920%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (7 samples, 0.01%)</title><rect x="6.0420%" y="293" width="0.0114%" height="15" fill="rgb(221,135,30)" fg:x="3708" fg:w="7"/><text x="6.2920%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (8 samples, 0.01%)</title><rect x="6.0649%" y="453" width="0.0130%" height="15" fill="rgb(249,193,18)" fg:x="3722" fg:w="8"/><text x="6.3149%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (8 samples, 0.01%)</title><rect x="6.0649%" y="437" width="0.0130%" height="15" fill="rgb(209,133,39)" fg:x="3722" fg:w="8"/><text x="6.3149%" y="447.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,336 samples, 2.18%)</title><rect x="3.9026%" y="581" width="2.1770%" height="15" fill="rgb(232,100,14)" fg:x="2395" fg:w="1336"/><text x="4.1526%" y="591.50">&lt;..</text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (1,334 samples, 2.17%)</title><rect x="3.9058%" y="565" width="2.1737%" height="15" fill="rgb(224,185,1)" fg:x="2397" fg:w="1334"/><text x="4.1558%" y="575.50">&lt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (1,332 samples, 2.17%)</title><rect x="3.9091%" y="549" width="2.1704%" height="15" fill="rgb(223,139,8)" fg:x="2399" fg:w="1332"/><text x="4.1591%" y="559.50">&lt;..</text></g><g><title>&lt;aes_grinder::algo::Algo as core::cmp::PartialEq&gt;::eq (1,331 samples, 2.17%)</title><rect x="3.9107%" y="533" width="2.1688%" height="15" fill="rgb(232,213,38)" fg:x="2400" fg:w="1331"/><text x="4.1607%" y="543.50">&lt;..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (414 samples, 0.67%)</title><rect x="5.4049%" y="517" width="0.6746%" height="15" fill="rgb(207,94,22)" fg:x="3317" fg:w="414"/><text x="5.6549%" y="527.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (16 samples, 0.03%)</title><rect x="6.0534%" y="501" width="0.0261%" height="15" fill="rgb(219,183,54)" fg:x="3715" fg:w="16"/><text x="6.3034%" y="511.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (13 samples, 0.02%)</title><rect x="6.0583%" y="485" width="0.0212%" height="15" fill="rgb(216,185,54)" fg:x="3718" fg:w="13"/><text x="6.3083%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (12 samples, 0.02%)</title><rect x="6.0600%" y="469" width="0.0196%" height="15" fill="rgb(254,217,39)" fg:x="3719" fg:w="12"/><text x="6.3100%" y="479.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (9 samples, 0.01%)</title><rect x="6.1805%" y="533" width="0.0147%" height="15" fill="rgb(240,178,23)" fg:x="3793" fg:w="9"/><text x="6.4305%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.04%)</title><rect x="6.2734%" y="437" width="0.0440%" height="15" fill="rgb(218,11,47)" fg:x="3850" fg:w="27"/><text x="6.5234%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 0.13%)</title><rect x="6.2522%" y="469" width="0.1271%" height="15" fill="rgb(218,51,51)" fg:x="3837" fg:w="78"/><text x="6.5022%" y="479.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (75 samples, 0.12%)</title><rect x="6.2571%" y="453" width="0.1222%" height="15" fill="rgb(238,126,27)" fg:x="3840" fg:w="75"/><text x="6.5071%" y="463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (38 samples, 0.06%)</title><rect x="6.3174%" y="437" width="0.0619%" height="15" fill="rgb(249,202,22)" fg:x="3877" fg:w="38"/><text x="6.5674%" y="447.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (124 samples, 0.20%)</title><rect x="6.1952%" y="533" width="0.2021%" height="15" fill="rgb(254,195,49)" fg:x="3802" fg:w="124"/><text x="6.4452%" y="543.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (124 samples, 0.20%)</title><rect x="6.1952%" y="517" width="0.2021%" height="15" fill="rgb(208,123,14)" fg:x="3802" fg:w="124"/><text x="6.4452%" y="527.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (124 samples, 0.20%)</title><rect x="6.1952%" y="501" width="0.2021%" height="15" fill="rgb(224,200,8)" fg:x="3802" fg:w="124"/><text x="6.4452%" y="511.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (110 samples, 0.18%)</title><rect x="6.2180%" y="485" width="0.1792%" height="15" fill="rgb(217,61,36)" fg:x="3816" fg:w="110"/><text x="6.4680%" y="495.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (11 samples, 0.02%)</title><rect x="6.3793%" y="469" width="0.0179%" height="15" fill="rgb(206,35,45)" fg:x="3915" fg:w="11"/><text x="6.6293%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (34 samples, 0.06%)</title><rect x="6.4576%" y="357" width="0.0554%" height="15" fill="rgb(217,65,33)" fg:x="3963" fg:w="34"/><text x="6.7076%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (176 samples, 0.29%)</title><rect x="6.4299%" y="405" width="0.2868%" height="15" fill="rgb(222,158,48)" fg:x="3946" fg:w="176"/><text x="6.6799%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (176 samples, 0.29%)</title><rect x="6.4299%" y="389" width="0.2868%" height="15" fill="rgb(254,2,54)" fg:x="3946" fg:w="176"/><text x="6.6799%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (176 samples, 0.29%)</title><rect x="6.4299%" y="373" width="0.2868%" height="15" fill="rgb(250,143,38)" fg:x="3946" fg:w="176"/><text x="6.6799%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (125 samples, 0.20%)</title><rect x="6.5130%" y="357" width="0.2037%" height="15" fill="rgb(248,25,0)" fg:x="3997" fg:w="125"/><text x="6.7630%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (12 samples, 0.02%)</title><rect x="6.6971%" y="341" width="0.0196%" height="15" fill="rgb(206,152,27)" fg:x="4110" fg:w="12"/><text x="6.9471%" y="351.50"></text></g><g><title>[libc.so.6] (23 samples, 0.04%)</title><rect x="6.7215%" y="389" width="0.0375%" height="15" fill="rgb(240,77,30)" fg:x="4125" fg:w="23"/><text x="6.9715%" y="399.50"></text></g><g><title>[libc.so.6] (22 samples, 0.04%)</title><rect x="6.7590%" y="373" width="0.0358%" height="15" fill="rgb(231,5,3)" fg:x="4148" fg:w="22"/><text x="7.0090%" y="383.50"></text></g><g><title>[libc.so.6] (31 samples, 0.05%)</title><rect x="6.8014%" y="357" width="0.0505%" height="15" fill="rgb(207,226,32)" fg:x="4174" fg:w="31"/><text x="7.0514%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (84 samples, 0.14%)</title><rect x="6.7166%" y="405" width="0.1369%" height="15" fill="rgb(222,207,47)" fg:x="4122" fg:w="84"/><text x="6.9666%" y="415.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (58 samples, 0.09%)</title><rect x="6.7590%" y="389" width="0.0945%" height="15" fill="rgb(229,115,45)" fg:x="4148" fg:w="58"/><text x="7.0090%" y="399.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (36 samples, 0.06%)</title><rect x="6.7949%" y="373" width="0.0587%" height="15" fill="rgb(224,191,6)" fg:x="4170" fg:w="36"/><text x="7.0449%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (26 samples, 0.04%)</title><rect x="6.9187%" y="293" width="0.0424%" height="15" fill="rgb(230,227,24)" fg:x="4246" fg:w="26"/><text x="7.1687%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (70 samples, 0.11%)</title><rect x="6.8551%" y="309" width="0.1141%" height="15" fill="rgb(228,80,19)" fg:x="4207" fg:w="70"/><text x="7.1051%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (382 samples, 0.62%)</title><rect x="6.4250%" y="437" width="0.6225%" height="15" fill="rgb(247,229,0)" fg:x="3943" fg:w="382"/><text x="6.6750%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (382 samples, 0.62%)</title><rect x="6.4250%" y="421" width="0.6225%" height="15" fill="rgb(237,194,15)" fg:x="3943" fg:w="382"/><text x="6.6750%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (119 samples, 0.19%)</title><rect x="6.8535%" y="405" width="0.1939%" height="15" fill="rgb(219,203,20)" fg:x="4206" fg:w="119"/><text x="7.1035%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (119 samples, 0.19%)</title><rect x="6.8535%" y="389" width="0.1939%" height="15" fill="rgb(234,128,8)" fg:x="4206" fg:w="119"/><text x="7.1035%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (118 samples, 0.19%)</title><rect x="6.8551%" y="373" width="0.1923%" height="15" fill="rgb(248,202,8)" fg:x="4207" fg:w="118"/><text x="7.1051%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (118 samples, 0.19%)</title><rect x="6.8551%" y="357" width="0.1923%" height="15" fill="rgb(206,104,37)" fg:x="4207" fg:w="118"/><text x="7.1051%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (118 samples, 0.19%)</title><rect x="6.8551%" y="341" width="0.1923%" height="15" fill="rgb(223,8,27)" fg:x="4207" fg:w="118"/><text x="7.1051%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (118 samples, 0.19%)</title><rect x="6.8551%" y="325" width="0.1923%" height="15" fill="rgb(216,217,28)" fg:x="4207" fg:w="118"/><text x="7.1051%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u8 (48 samples, 0.08%)</title><rect x="6.9692%" y="309" width="0.0782%" height="15" fill="rgb(249,199,1)" fg:x="4277" fg:w="48"/><text x="7.2192%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (47 samples, 0.08%)</title><rect x="6.9708%" y="293" width="0.0766%" height="15" fill="rgb(240,85,17)" fg:x="4278" fg:w="47"/><text x="7.2208%" y="303.50"></text></g><g><title>core::hash::sip::u8to64_le (24 samples, 0.04%)</title><rect x="7.0083%" y="277" width="0.0391%" height="15" fill="rgb(206,108,45)" fg:x="4301" fg:w="24"/><text x="7.2583%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (14 samples, 0.02%)</title><rect x="7.1501%" y="389" width="0.0228%" height="15" fill="rgb(245,210,41)" fg:x="4388" fg:w="14"/><text x="7.4001%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.06%)</title><rect x="7.1729%" y="389" width="0.0570%" height="15" fill="rgb(206,13,37)" fg:x="4402" fg:w="35"/><text x="7.4229%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (14 samples, 0.02%)</title><rect x="7.2071%" y="373" width="0.0228%" height="15" fill="rgb(250,61,18)" fg:x="4423" fg:w="14"/><text x="7.4571%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (17 samples, 0.03%)</title><rect x="7.2625%" y="277" width="0.0277%" height="15" fill="rgb(235,172,48)" fg:x="4457" fg:w="17"/><text x="7.5125%" y="287.50"></text></g><g><title>core::slice::raw::from_raw_parts (11 samples, 0.02%)</title><rect x="7.2723%" y="261" width="0.0179%" height="15" fill="rgb(249,201,17)" fg:x="4463" fg:w="11"/><text x="7.5223%" y="271.50"></text></g><g><title>core::ptr::slice_from_raw_parts (11 samples, 0.02%)</title><rect x="7.2723%" y="245" width="0.0179%" height="15" fill="rgb(219,208,6)" fg:x="4463" fg:w="11"/><text x="7.5223%" y="255.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (11 samples, 0.02%)</title><rect x="7.2723%" y="229" width="0.0179%" height="15" fill="rgb(248,31,23)" fg:x="4463" fg:w="11"/><text x="7.5223%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (20 samples, 0.03%)</title><rect x="7.2592%" y="293" width="0.0326%" height="15" fill="rgb(245,15,42)" fg:x="4455" fg:w="20"/><text x="7.5092%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (44 samples, 0.07%)</title><rect x="7.2413%" y="373" width="0.0717%" height="15" fill="rgb(222,217,39)" fg:x="4444" fg:w="44"/><text x="7.4913%" y="383.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (43 samples, 0.07%)</title><rect x="7.2430%" y="357" width="0.0701%" height="15" fill="rgb(210,219,27)" fg:x="4445" fg:w="43"/><text x="7.4930%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (39 samples, 0.06%)</title><rect x="7.2495%" y="341" width="0.0635%" height="15" fill="rgb(252,166,36)" fg:x="4449" fg:w="39"/><text x="7.4995%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (35 samples, 0.06%)</title><rect x="7.2560%" y="325" width="0.0570%" height="15" fill="rgb(245,132,34)" fg:x="4453" fg:w="35"/><text x="7.5060%" y="335.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (35 samples, 0.06%)</title><rect x="7.2560%" y="309" width="0.0570%" height="15" fill="rgb(236,54,3)" fg:x="4453" fg:w="35"/><text x="7.5060%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (13 samples, 0.02%)</title><rect x="7.2918%" y="293" width="0.0212%" height="15" fill="rgb(241,173,43)" fg:x="4475" fg:w="13"/><text x="7.5418%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (13 samples, 0.02%)</title><rect x="7.2918%" y="277" width="0.0212%" height="15" fill="rgb(215,190,9)" fg:x="4475" fg:w="13"/><text x="7.5418%" y="287.50"></text></g><g><title>[libc.so.6] (9 samples, 0.01%)</title><rect x="7.2984%" y="261" width="0.0147%" height="15" fill="rgb(242,101,16)" fg:x="4479" fg:w="9"/><text x="7.5484%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (62 samples, 0.10%)</title><rect x="7.2299%" y="389" width="0.1010%" height="15" fill="rgb(223,190,21)" fg:x="4437" fg:w="62"/><text x="7.4799%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (9 samples, 0.01%)</title><rect x="7.3163%" y="373" width="0.0147%" height="15" fill="rgb(215,228,25)" fg:x="4490" fg:w="9"/><text x="7.5663%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (9 samples, 0.01%)</title><rect x="7.3163%" y="357" width="0.0147%" height="15" fill="rgb(225,36,22)" fg:x="4490" fg:w="9"/><text x="7.5663%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (44 samples, 0.07%)</title><rect x="7.3358%" y="389" width="0.0717%" height="15" fill="rgb(251,106,46)" fg:x="4502" fg:w="44"/><text x="7.5858%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (36 samples, 0.06%)</title><rect x="7.3489%" y="373" width="0.0587%" height="15" fill="rgb(208,90,1)" fg:x="4510" fg:w="36"/><text x="7.5989%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.03%)</title><rect x="7.3798%" y="357" width="0.0277%" height="15" fill="rgb(243,10,4)" fg:x="4529" fg:w="17"/><text x="7.6298%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (16 samples, 0.03%)</title><rect x="7.4532%" y="373" width="0.0261%" height="15" fill="rgb(212,137,27)" fg:x="4574" fg:w="16"/><text x="7.7032%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (58 samples, 0.09%)</title><rect x="7.4792%" y="373" width="0.0945%" height="15" fill="rgb(231,220,49)" fg:x="4590" fg:w="58"/><text x="7.7292%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (135 samples, 0.22%)</title><rect x="7.4075%" y="389" width="0.2200%" height="15" fill="rgb(237,96,20)" fg:x="4546" fg:w="135"/><text x="7.6575%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (33 samples, 0.05%)</title><rect x="7.5737%" y="373" width="0.0538%" height="15" fill="rgb(239,229,30)" fg:x="4648" fg:w="33"/><text x="7.8237%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (33 samples, 0.05%)</title><rect x="7.5737%" y="357" width="0.0538%" height="15" fill="rgb(219,65,33)" fg:x="4648" fg:w="33"/><text x="7.8237%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (10 samples, 0.02%)</title><rect x="7.6552%" y="357" width="0.0163%" height="15" fill="rgb(243,134,7)" fg:x="4698" fg:w="10"/><text x="7.9052%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (31 samples, 0.05%)</title><rect x="7.6715%" y="357" width="0.0505%" height="15" fill="rgb(216,177,54)" fg:x="4708" fg:w="31"/><text x="7.9215%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (1,003 samples, 1.63%)</title><rect x="6.1137%" y="565" width="1.6343%" height="15" fill="rgb(211,160,20)" fg:x="3752" fg:w="1003"/><text x="6.3637%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (997 samples, 1.62%)</title><rect x="6.1235%" y="549" width="1.6246%" height="15" fill="rgb(239,85,39)" fg:x="3758" fg:w="997"/><text x="6.3735%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (829 samples, 1.35%)</title><rect x="6.3973%" y="533" width="1.3508%" height="15" fill="rgb(232,125,22)" fg:x="3926" fg:w="829"/><text x="6.6473%" y="543.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (822 samples, 1.34%)</title><rect x="6.4087%" y="517" width="1.3394%" height="15" fill="rgb(244,57,34)" fg:x="3933" fg:w="822"/><text x="6.6587%" y="527.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (822 samples, 1.34%)</title><rect x="6.4087%" y="501" width="1.3394%" height="15" fill="rgb(214,203,32)" fg:x="3933" fg:w="822"/><text x="6.6587%" y="511.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (822 samples, 1.34%)</title><rect x="6.4087%" y="485" width="1.3394%" height="15" fill="rgb(207,58,43)" fg:x="3933" fg:w="822"/><text x="6.6587%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (820 samples, 1.34%)</title><rect x="6.4119%" y="469" width="1.3362%" height="15" fill="rgb(215,193,15)" fg:x="3935" fg:w="820"/><text x="6.6619%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (815 samples, 1.33%)</title><rect x="6.4201%" y="453" width="1.3280%" height="15" fill="rgb(232,15,44)" fg:x="3940" fg:w="815"/><text x="6.6701%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (430 samples, 0.70%)</title><rect x="7.0474%" y="437" width="0.7007%" height="15" fill="rgb(212,3,48)" fg:x="4325" fg:w="430"/><text x="7.2974%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (414 samples, 0.67%)</title><rect x="7.0735%" y="421" width="0.6746%" height="15" fill="rgb(218,128,7)" fg:x="4341" fg:w="414"/><text x="7.3235%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (404 samples, 0.66%)</title><rect x="7.0898%" y="405" width="0.6583%" height="15" fill="rgb(226,216,39)" fg:x="4351" fg:w="404"/><text x="7.3398%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (74 samples, 0.12%)</title><rect x="7.6275%" y="389" width="0.1206%" height="15" fill="rgb(243,47,51)" fg:x="4681" fg:w="74"/><text x="7.8775%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (69 samples, 0.11%)</title><rect x="7.6357%" y="373" width="0.1124%" height="15" fill="rgb(241,183,40)" fg:x="4686" fg:w="69"/><text x="7.8857%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (16 samples, 0.03%)</title><rect x="7.7220%" y="357" width="0.0261%" height="15" fill="rgb(231,217,32)" fg:x="4739" fg:w="16"/><text x="7.9720%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (16 samples, 0.03%)</title><rect x="7.7220%" y="341" width="0.0261%" height="15" fill="rgb(229,61,38)" fg:x="4739" fg:w="16"/><text x="7.9720%" y="351.50"></text></g><g><title>[libc.so.6] (10 samples, 0.02%)</title><rect x="7.7481%" y="549" width="0.0163%" height="15" fill="rgb(225,210,5)" fg:x="4755" fg:w="10"/><text x="7.9981%" y="559.50"></text></g><g><title>[libc.so.6] (7 samples, 0.01%)</title><rect x="7.7644%" y="533" width="0.0114%" height="15" fill="rgb(231,79,45)" fg:x="4765" fg:w="7"/><text x="8.0144%" y="543.50"></text></g><g><title>[libc.so.6] (10 samples, 0.02%)</title><rect x="7.7758%" y="517" width="0.0163%" height="15" fill="rgb(224,100,7)" fg:x="4772" fg:w="10"/><text x="8.0258%" y="527.50"></text></g><g><title>[libc.so.6] (10 samples, 0.02%)</title><rect x="7.7921%" y="501" width="0.0163%" height="15" fill="rgb(241,198,18)" fg:x="4782" fg:w="10"/><text x="8.0421%" y="511.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (2,463 samples, 4.01%)</title><rect x="3.8716%" y="677" width="4.0134%" height="15" fill="rgb(252,97,53)" fg:x="2376" fg:w="2463"/><text x="4.1216%" y="687.50">hash..</text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (2,461 samples, 4.01%)</title><rect x="3.8749%" y="661" width="4.0101%" height="15" fill="rgb(220,88,7)" fg:x="2378" fg:w="2461"/><text x="4.1249%" y="671.50">&lt;Q a..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (2,457 samples, 4.00%)</title><rect x="3.8814%" y="645" width="4.0036%" height="15" fill="rgb(213,176,14)" fg:x="2382" fg:w="2457"/><text x="4.1314%" y="655.50">core..</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (2,452 samples, 4.00%)</title><rect x="3.8895%" y="629" width="3.9954%" height="15" fill="rgb(246,73,7)" fg:x="2387" fg:w="2452"/><text x="4.1395%" y="639.50">core..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (2,450 samples, 3.99%)</title><rect x="3.8928%" y="613" width="3.9922%" height="15" fill="rgb(245,64,36)" fg:x="2389" fg:w="2450"/><text x="4.1428%" y="623.50">&lt;all..</text></g><g><title>&lt;aes_grinder::algo::Algo as core::cmp::PartialEq&gt;::eq (2,447 samples, 3.99%)</title><rect x="3.8977%" y="597" width="3.9873%" height="15" fill="rgb(245,80,10)" fg:x="2392" fg:w="2447"/><text x="4.1477%" y="607.50">&lt;aes..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (1,108 samples, 1.81%)</title><rect x="6.0795%" y="581" width="1.8054%" height="15" fill="rgb(232,107,50)" fg:x="3731" fg:w="1108"/><text x="6.3295%" y="591.50">&lt;..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (84 samples, 0.14%)</title><rect x="7.7481%" y="565" width="0.1369%" height="15" fill="rgb(253,3,0)" fg:x="4755" fg:w="84"/><text x="7.9981%" y="575.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (74 samples, 0.12%)</title><rect x="7.7644%" y="549" width="0.1206%" height="15" fill="rgb(212,99,53)" fg:x="4765" fg:w="74"/><text x="8.0144%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (67 samples, 0.11%)</title><rect x="7.7758%" y="533" width="0.1092%" height="15" fill="rgb(249,111,54)" fg:x="4772" fg:w="67"/><text x="8.0258%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (57 samples, 0.09%)</title><rect x="7.7921%" y="517" width="0.0929%" height="15" fill="rgb(249,55,30)" fg:x="4782" fg:w="57"/><text x="8.0421%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (47 samples, 0.08%)</title><rect x="7.8084%" y="501" width="0.0766%" height="15" fill="rgb(237,47,42)" fg:x="4792" fg:w="47"/><text x="8.0584%" y="511.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (33 samples, 0.05%)</title><rect x="7.8312%" y="485" width="0.0538%" height="15" fill="rgb(211,20,18)" fg:x="4806" fg:w="33"/><text x="8.0812%" y="495.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (24 samples, 0.04%)</title><rect x="7.8459%" y="469" width="0.0391%" height="15" fill="rgb(231,203,46)" fg:x="4815" fg:w="24"/><text x="8.0959%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (23 samples, 0.04%)</title><rect x="7.8475%" y="453" width="0.0375%" height="15" fill="rgb(237,142,3)" fg:x="4816" fg:w="23"/><text x="8.0975%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (22 samples, 0.04%)</title><rect x="7.8491%" y="437" width="0.0358%" height="15" fill="rgb(241,107,1)" fg:x="4817" fg:w="22"/><text x="8.0991%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (2,484 samples, 4.05%)</title><rect x="3.8569%" y="693" width="4.0476%" height="15" fill="rgb(229,83,13)" fg:x="2367" fg:w="2484"/><text x="4.1069%" y="703.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (8 samples, 0.01%)</title><rect x="7.8915%" y="677" width="0.0130%" height="15" fill="rgb(241,91,40)" fg:x="4843" fg:w="8"/><text x="8.1415%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (8 samples, 0.01%)</title><rect x="7.8915%" y="661" width="0.0130%" height="15" fill="rgb(225,3,45)" fg:x="4843" fg:w="8"/><text x="8.1415%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.01%)</title><rect x="7.9273%" y="677" width="0.0114%" height="15" fill="rgb(244,223,14)" fg:x="4865" fg:w="7"/><text x="8.1773%" y="687.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (12 samples, 0.02%)</title><rect x="7.9208%" y="693" width="0.0196%" height="15" fill="rgb(224,124,37)" fg:x="4861" fg:w="12"/><text x="8.1708%" y="703.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (4,267 samples, 6.95%)</title><rect x="1.0005%" y="1045" width="6.9529%" height="15" fill="rgb(251,171,30)" fg:x="614" fg:w="4267"/><text x="1.2505%" y="1055.50">&lt;std::col..</text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (4,267 samples, 6.95%)</title><rect x="1.0005%" y="1029" width="6.9529%" height="15" fill="rgb(236,46,54)" fg:x="614" fg:w="4267"/><text x="1.2505%" y="1039.50">&lt;hashbrow..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (4,267 samples, 6.95%)</title><rect x="1.0005%" y="1013" width="6.9529%" height="15" fill="rgb(245,213,5)" fg:x="614" fg:w="4267"/><text x="1.2505%" y="1023.50">&lt;hashbrow..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4,266 samples, 6.95%)</title><rect x="1.0021%" y="997" width="6.9513%" height="15" fill="rgb(230,144,27)" fg:x="615" fg:w="4266"/><text x="1.2521%" y="1007.50">core::ite..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,266 samples, 6.95%)</title><rect x="1.0021%" y="981" width="6.9513%" height="15" fill="rgb(220,86,6)" fg:x="615" fg:w="4266"/><text x="1.2521%" y="991.50">&lt;core::it..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,266 samples, 6.95%)</title><rect x="1.0021%" y="965" width="6.9513%" height="15" fill="rgb(240,20,13)" fg:x="615" fg:w="4266"/><text x="1.2521%" y="975.50">&lt;core::it..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,266 samples, 6.95%)</title><rect x="1.0021%" y="949" width="6.9513%" height="15" fill="rgb(217,89,34)" fg:x="615" fg:w="4266"/><text x="1.2521%" y="959.50">&lt;core::it..</text></g><g><title>core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold (4,266 samples, 6.95%)</title><rect x="1.0021%" y="933" width="6.9513%" height="15" fill="rgb(229,13,5)" fg:x="615" fg:w="4266"/><text x="1.2521%" y="943.50">core::ite..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,266 samples, 6.95%)</title><rect x="1.0021%" y="917" width="6.9513%" height="15" fill="rgb(244,67,35)" fg:x="615" fg:w="4266"/><text x="1.2521%" y="927.50">&lt;core::it..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4,266 samples, 6.95%)</title><rect x="1.0021%" y="901" width="6.9513%" height="15" fill="rgb(221,40,2)" fg:x="615" fg:w="4266"/><text x="1.2521%" y="911.50">&lt;core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (4,266 samples, 6.95%)</title><rect x="1.0021%" y="885" width="6.9513%" height="15" fill="rgb(237,157,21)" fg:x="615" fg:w="4266"/><text x="1.2521%" y="895.50">core::ite..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (4,263 samples, 6.95%)</title><rect x="1.0070%" y="869" width="6.9464%" height="15" fill="rgb(222,94,11)" fg:x="618" fg:w="4263"/><text x="1.2570%" y="879.50">core::ite..</text></g><g><title>core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold::flatten::_{{closure}} (3,044 samples, 4.96%)</title><rect x="2.9933%" y="853" width="4.9601%" height="15" fill="rgb(249,113,6)" fg:x="1837" fg:w="3044"/><text x="3.2433%" y="863.50">core::..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold::flatten::_{{closure}} (3,044 samples, 4.96%)</title><rect x="2.9933%" y="837" width="4.9601%" height="15" fill="rgb(238,137,36)" fg:x="1837" fg:w="3044"/><text x="3.2433%" y="847.50">&lt;core:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (3,044 samples, 4.96%)</title><rect x="2.9933%" y="821" width="4.9601%" height="15" fill="rgb(210,102,26)" fg:x="1837" fg:w="3044"/><text x="3.2433%" y="831.50">core::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3,040 samples, 4.95%)</title><rect x="2.9998%" y="805" width="4.9536%" height="15" fill="rgb(218,30,30)" fg:x="1841" fg:w="3040"/><text x="3.2498%" y="815.50">core::..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (3,040 samples, 4.95%)</title><rect x="2.9998%" y="789" width="4.9536%" height="15" fill="rgb(214,67,26)" fg:x="1841" fg:w="3040"/><text x="3.2498%" y="799.50">core::..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3,040 samples, 4.95%)</title><rect x="2.9998%" y="773" width="4.9536%" height="15" fill="rgb(251,9,53)" fg:x="1841" fg:w="3040"/><text x="3.2498%" y="783.50">core::..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (3,040 samples, 4.95%)</title><rect x="2.9998%" y="757" width="4.9536%" height="15" fill="rgb(228,204,25)" fg:x="1841" fg:w="3040"/><text x="3.2498%" y="767.50">&lt;hashb..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,040 samples, 4.95%)</title><rect x="2.9998%" y="741" width="4.9536%" height="15" fill="rgb(207,153,8)" fg:x="1841" fg:w="3040"/><text x="3.2498%" y="751.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (2,843 samples, 4.63%)</title><rect x="3.3208%" y="725" width="4.6326%" height="15" fill="rgb(242,9,16)" fg:x="2038" fg:w="2843"/><text x="3.5708%" y="735.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (2,550 samples, 4.16%)</title><rect x="3.7983%" y="709" width="4.1551%" height="15" fill="rgb(217,211,10)" fg:x="2331" fg:w="2550"/><text x="4.0483%" y="719.50">hashb..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (8 samples, 0.01%)</title><rect x="7.9404%" y="693" width="0.0130%" height="15" fill="rgb(219,228,52)" fg:x="4873" fg:w="8"/><text x="8.1904%" y="703.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (8 samples, 0.01%)</title><rect x="7.9404%" y="677" width="0.0130%" height="15" fill="rgb(231,92,29)" fg:x="4873" fg:w="8"/><text x="8.1904%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (13 samples, 0.02%)</title><rect x="7.9664%" y="965" width="0.0212%" height="15" fill="rgb(232,8,23)" fg:x="4889" fg:w="13"/><text x="8.2164%" y="975.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (13 samples, 0.02%)</title><rect x="7.9664%" y="949" width="0.0212%" height="15" fill="rgb(216,211,34)" fg:x="4889" fg:w="13"/><text x="8.2164%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (10 samples, 0.02%)</title><rect x="7.9713%" y="933" width="0.0163%" height="15" fill="rgb(236,151,0)" fg:x="4892" fg:w="10"/><text x="8.2213%" y="943.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::is_subset::_{{closure}} (10 samples, 0.02%)</title><rect x="7.9713%" y="917" width="0.0163%" height="15" fill="rgb(209,168,3)" fg:x="4892" fg:w="10"/><text x="8.2213%" y="927.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (10 samples, 0.02%)</title><rect x="7.9713%" y="901" width="0.0163%" height="15" fill="rgb(208,129,28)" fg:x="4892" fg:w="10"/><text x="8.2213%" y="911.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (10 samples, 0.02%)</title><rect x="7.9713%" y="885" width="0.0163%" height="15" fill="rgb(229,78,22)" fg:x="4892" fg:w="10"/><text x="8.2213%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (10 samples, 0.02%)</title><rect x="7.9713%" y="869" width="0.0163%" height="15" fill="rgb(228,187,13)" fg:x="4892" fg:w="10"/><text x="8.2213%" y="879.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (10 samples, 0.02%)</title><rect x="7.9713%" y="853" width="0.0163%" height="15" fill="rgb(240,119,24)" fg:x="4892" fg:w="10"/><text x="8.2213%" y="863.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9 samples, 0.01%)</title><rect x="7.9730%" y="837" width="0.0147%" height="15" fill="rgb(209,194,42)" fg:x="4893" fg:w="9"/><text x="8.2230%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 0.01%)</title><rect x="7.9730%" y="821" width="0.0147%" height="15" fill="rgb(247,200,46)" fg:x="4893" fg:w="9"/><text x="8.2230%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (9 samples, 0.01%)</title><rect x="7.9730%" y="805" width="0.0147%" height="15" fill="rgb(218,76,16)" fg:x="4893" fg:w="9"/><text x="8.2230%" y="815.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (18 samples, 0.03%)</title><rect x="7.9599%" y="1045" width="0.0293%" height="15" fill="rgb(225,21,48)" fg:x="4885" fg:w="18"/><text x="8.2099%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::cmp::PartialOrd&gt;::ge (18 samples, 0.03%)</title><rect x="7.9599%" y="1029" width="0.0293%" height="15" fill="rgb(239,223,50)" fg:x="4885" fg:w="18"/><text x="8.2099%" y="1039.50"></text></g><g><title>core::cmp::PartialOrd::ge (18 samples, 0.03%)</title><rect x="7.9599%" y="1013" width="0.0293%" height="15" fill="rgb(244,45,21)" fg:x="4885" fg:w="18"/><text x="8.2099%" y="1023.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::cmp::PartialOrd&gt;::partial_cmp (18 samples, 0.03%)</title><rect x="7.9599%" y="997" width="0.0293%" height="15" fill="rgb(232,33,43)" fg:x="4885" fg:w="18"/><text x="8.2099%" y="1007.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::is_subset (18 samples, 0.03%)</title><rect x="7.9599%" y="981" width="0.0293%" height="15" fill="rgb(209,8,3)" fg:x="4885" fg:w="18"/><text x="8.2099%" y="991.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (8 samples, 0.01%)</title><rect x="8.2532%" y="949" width="0.0130%" height="15" fill="rgb(214,25,53)" fg:x="5065" fg:w="8"/><text x="8.5032%" y="959.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (13 samples, 0.02%)</title><rect x="8.2923%" y="933" width="0.0212%" height="15" fill="rgb(254,186,54)" fg:x="5089" fg:w="13"/><text x="8.5423%" y="943.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (70 samples, 0.11%)</title><rect x="8.2141%" y="965" width="0.1141%" height="15" fill="rgb(208,174,49)" fg:x="5041" fg:w="70"/><text x="8.4641%" y="975.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (38 samples, 0.06%)</title><rect x="8.2663%" y="949" width="0.0619%" height="15" fill="rgb(233,191,51)" fg:x="5073" fg:w="38"/><text x="8.5163%" y="959.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (9 samples, 0.01%)</title><rect x="8.3135%" y="933" width="0.0147%" height="15" fill="rgb(222,134,10)" fg:x="5102" fg:w="9"/><text x="8.5635%" y="943.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (13 samples, 0.02%)</title><rect x="8.3917%" y="949" width="0.0212%" height="15" fill="rgb(230,226,20)" fg:x="5150" fg:w="13"/><text x="8.6417%" y="959.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (49 samples, 0.08%)</title><rect x="8.3347%" y="965" width="0.0798%" height="15" fill="rgb(251,111,25)" fg:x="5115" fg:w="49"/><text x="8.5847%" y="975.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (190 samples, 0.31%)</title><rect x="8.1212%" y="997" width="0.3096%" height="15" fill="rgb(224,40,46)" fg:x="4984" fg:w="190"/><text x="8.3712%" y="1007.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (160 samples, 0.26%)</title><rect x="8.1701%" y="981" width="0.2607%" height="15" fill="rgb(236,108,47)" fg:x="5014" fg:w="160"/><text x="8.4201%" y="991.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (210 samples, 0.34%)</title><rect x="8.5498%" y="965" width="0.3422%" height="15" fill="rgb(234,93,0)" fg:x="5247" fg:w="210"/><text x="8.7998%" y="975.50"></text></g><g><title>&lt;core::cmp::Ordering as core::option::SpecOptionPartialEq&gt;::eq (198 samples, 0.32%)</title><rect x="8.5693%" y="949" width="0.3226%" height="15" fill="rgb(224,213,32)" fg:x="5259" fg:w="198"/><text x="8.8193%" y="959.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (160 samples, 0.26%)</title><rect x="8.6313%" y="933" width="0.2607%" height="15" fill="rgb(251,11,48)" fg:x="5297" fg:w="160"/><text x="8.8813%" y="943.50"></text></g><g><title>&lt;core::cmp::Ordering as core::option::SpecOptionPartialEq&gt;::eq::_{{closure}} (19 samples, 0.03%)</title><rect x="8.8610%" y="917" width="0.0310%" height="15" fill="rgb(236,173,5)" fg:x="5438" fg:w="19"/><text x="9.1110%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::cloned (102 samples, 0.17%)</title><rect x="9.0240%" y="933" width="0.1662%" height="15" fill="rgb(230,95,12)" fg:x="5538" fg:w="102"/><text x="9.2740%" y="943.50"></text></g><g><title>core::iter::adapters::cloned::Cloned&lt;I&gt;::new (102 samples, 0.17%)</title><rect x="9.0240%" y="917" width="0.1662%" height="15" fill="rgb(232,209,1)" fg:x="5538" fg:w="102"/><text x="9.2740%" y="927.50"></text></g><g><title>[libc.so.6] (97 samples, 0.16%)</title><rect x="9.0321%" y="901" width="0.1581%" height="15" fill="rgb(232,6,1)" fg:x="5543" fg:w="97"/><text x="9.2821%" y="911.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (20 samples, 0.03%)</title><rect x="9.3694%" y="853" width="0.0326%" height="15" fill="rgb(210,224,50)" fg:x="5750" fg:w="20"/><text x="9.6194%" y="863.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (34 samples, 0.06%)</title><rect x="9.6855%" y="837" width="0.0554%" height="15" fill="rgb(228,127,35)" fg:x="5944" fg:w="34"/><text x="9.9355%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (40 samples, 0.07%)</title><rect x="9.7409%" y="837" width="0.0652%" height="15" fill="rgb(245,102,45)" fg:x="5978" fg:w="40"/><text x="9.9909%" y="847.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (118 samples, 0.19%)</title><rect x="9.8061%" y="837" width="0.1923%" height="15" fill="rgb(214,1,49)" fg:x="6018" fg:w="118"/><text x="10.0561%" y="847.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (93 samples, 0.15%)</title><rect x="9.8468%" y="821" width="0.1515%" height="15" fill="rgb(226,163,40)" fg:x="6043" fg:w="93"/><text x="10.0968%" y="831.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (30 samples, 0.05%)</title><rect x="9.9495%" y="805" width="0.0489%" height="15" fill="rgb(239,212,28)" fg:x="6106" fg:w="30"/><text x="10.1995%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (15 samples, 0.02%)</title><rect x="9.9739%" y="789" width="0.0244%" height="15" fill="rgb(220,20,13)" fg:x="6121" fg:w="15"/><text x="10.2239%" y="799.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (13 samples, 0.02%)</title><rect x="10.0081%" y="821" width="0.0212%" height="15" fill="rgb(210,164,35)" fg:x="6142" fg:w="13"/><text x="10.2581%" y="831.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::default::Default&gt;::default (466 samples, 0.76%)</title><rect x="9.3401%" y="901" width="0.7593%" height="15" fill="rgb(248,109,41)" fg:x="5732" fg:w="466"/><text x="9.5901%" y="911.50"></text></g><g><title>std::collections::hash::map::RandomState::new (462 samples, 0.75%)</title><rect x="9.3466%" y="885" width="0.7528%" height="15" fill="rgb(238,23,50)" fg:x="5736" fg:w="462"/><text x="9.5966%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (462 samples, 0.75%)</title><rect x="9.3466%" y="869" width="0.7528%" height="15" fill="rgb(211,48,49)" fg:x="5736" fg:w="462"/><text x="9.5966%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (428 samples, 0.70%)</title><rect x="9.4020%" y="853" width="0.6974%" height="15" fill="rgb(223,36,21)" fg:x="5770" fg:w="428"/><text x="9.6520%" y="863.50"></text></g><g><title>std::collections::hash::map::RandomState::new::_{{closure}} (62 samples, 0.10%)</title><rect x="9.9984%" y="837" width="0.1010%" height="15" fill="rgb(207,123,46)" fg:x="6136" fg:w="62"/><text x="10.2484%" y="847.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (43 samples, 0.07%)</title><rect x="10.0293%" y="821" width="0.0701%" height="15" fill="rgb(240,218,32)" fg:x="6155" fg:w="43"/><text x="10.2793%" y="831.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (43 samples, 0.07%)</title><rect x="10.0293%" y="805" width="0.0701%" height="15" fill="rgb(252,5,43)" fg:x="6155" fg:w="43"/><text x="10.2793%" y="815.50"></text></g><g><title>core::mem::replace (42 samples, 0.07%)</title><rect x="10.0310%" y="789" width="0.0684%" height="15" fill="rgb(252,84,19)" fg:x="6156" fg:w="42"/><text x="10.2810%" y="799.50"></text></g><g><title>core::ptr::write (42 samples, 0.07%)</title><rect x="10.0310%" y="773" width="0.0684%" height="15" fill="rgb(243,152,39)" fg:x="6156" fg:w="42"/><text x="10.2810%" y="783.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (113 samples, 0.18%)</title><rect x="10.2526%" y="869" width="0.1841%" height="15" fill="rgb(234,160,15)" fg:x="6292" fg:w="113"/><text x="10.5026%" y="879.50"></text></g><g><title>[libc.so.6] (109 samples, 0.18%)</title><rect x="10.2591%" y="853" width="0.1776%" height="15" fill="rgb(237,34,20)" fg:x="6296" fg:w="109"/><text x="10.5091%" y="863.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (99 samples, 0.16%)</title><rect x="10.6355%" y="853" width="0.1613%" height="15" fill="rgb(229,97,13)" fg:x="6527" fg:w="99"/><text x="10.8855%" y="863.50"></text></g><g><title>[libc.so.6] (94 samples, 0.15%)</title><rect x="10.6436%" y="837" width="0.1532%" height="15" fill="rgb(234,71,50)" fg:x="6532" fg:w="94"/><text x="10.8936%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (20 samples, 0.03%)</title><rect x="10.7968%" y="853" width="0.0326%" height="15" fill="rgb(253,155,4)" fg:x="6626" fg:w="20"/><text x="11.0468%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (17 samples, 0.03%)</title><rect x="10.8017%" y="837" width="0.0277%" height="15" fill="rgb(222,185,37)" fg:x="6629" fg:w="17"/><text x="11.0517%" y="847.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::FromResidual&gt;::from_residual (18 samples, 0.03%)</title><rect x="15.4929%" y="661" width="0.0293%" height="15" fill="rgb(251,177,13)" fg:x="9508" fg:w="18"/><text x="15.7429%" y="671.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (196 samples, 0.32%)</title><rect x="15.5222%" y="661" width="0.3194%" height="15" fill="rgb(250,179,40)" fg:x="9526" fg:w="196"/><text x="15.7722%" y="671.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (156 samples, 0.25%)</title><rect x="16.1626%" y="645" width="0.2542%" height="15" fill="rgb(242,44,2)" fg:x="9919" fg:w="156"/><text x="16.4126%" y="655.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (568 samples, 0.93%)</title><rect x="15.8416%" y="661" width="0.9255%" height="15" fill="rgb(216,177,13)" fg:x="9722" fg:w="568"/><text x="16.0916%" y="671.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (215 samples, 0.35%)</title><rect x="16.4168%" y="645" width="0.3503%" height="15" fill="rgb(216,106,43)" fg:x="10075" fg:w="215"/><text x="16.6668%" y="655.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (43 samples, 0.07%)</title><rect x="16.6971%" y="629" width="0.0701%" height="15" fill="rgb(216,183,2)" fg:x="10247" fg:w="43"/><text x="16.9471%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,131 samples, 1.84%)</title><rect x="14.9259%" y="677" width="1.8429%" height="15" fill="rgb(249,75,3)" fg:x="9160" fg:w="1131"/><text x="15.1759%" y="687.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (12 samples, 0.02%)</title><rect x="16.7688%" y="677" width="0.0196%" height="15" fill="rgb(219,67,39)" fg:x="10291" fg:w="12"/><text x="17.0188%" y="687.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (236 samples, 0.38%)</title><rect x="17.6487%" y="661" width="0.3846%" height="15" fill="rgb(253,228,2)" fg:x="10831" fg:w="236"/><text x="17.8987%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (74 samples, 0.12%)</title><rect x="17.9127%" y="645" width="0.1206%" height="15" fill="rgb(235,138,27)" fg:x="10993" fg:w="74"/><text x="18.1627%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (776 samples, 1.26%)</title><rect x="16.7883%" y="677" width="1.2645%" height="15" fill="rgb(236,97,51)" fg:x="10303" fg:w="776"/><text x="17.0383%" y="687.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (12 samples, 0.02%)</title><rect x="18.0332%" y="661" width="0.0196%" height="15" fill="rgb(240,80,30)" fg:x="11067" fg:w="12"/><text x="18.2832%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,635 samples, 4.29%)</title><rect x="13.7869%" y="709" width="4.2936%" height="15" fill="rgb(230,178,19)" fg:x="8461" fg:w="2635"/><text x="14.0369%" y="719.50">&lt;hash..</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (2,366 samples, 3.86%)</title><rect x="14.2252%" y="693" width="3.8553%" height="15" fill="rgb(210,190,27)" fg:x="8730" fg:w="2366"/><text x="14.4752%" y="703.50">hash..</text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (17 samples, 0.03%)</title><rect x="18.0528%" y="677" width="0.0277%" height="15" fill="rgb(222,107,31)" fg:x="11079" fg:w="17"/><text x="18.3028%" y="687.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,879 samples, 6.32%)</title><rect x="12.2878%" y="773" width="6.3207%" height="15" fill="rgb(216,127,34)" fg:x="7541" fg:w="3879"/><text x="12.5378%" y="783.50">&lt;std::co..</text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,871 samples, 6.31%)</title><rect x="12.3008%" y="757" width="6.3076%" height="15" fill="rgb(234,116,52)" fg:x="7549" fg:w="3871"/><text x="12.5508%" y="767.50">&lt;hashbro..</text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,871 samples, 6.31%)</title><rect x="12.3008%" y="741" width="6.3076%" height="15" fill="rgb(222,124,15)" fg:x="7549" fg:w="3871"/><text x="12.5508%" y="751.50">&lt;hashbro..</text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,539 samples, 5.77%)</title><rect x="12.8418%" y="725" width="5.7667%" height="15" fill="rgb(231,179,28)" fg:x="7881" fg:w="3539"/><text x="13.0918%" y="735.50">&lt;hashbr..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (324 samples, 0.53%)</title><rect x="18.0805%" y="709" width="0.5279%" height="15" fill="rgb(226,93,45)" fg:x="11096" fg:w="324"/><text x="18.3305%" y="719.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (162 samples, 0.26%)</title><rect x="18.3445%" y="693" width="0.2640%" height="15" fill="rgb(215,8,51)" fg:x="11258" fg:w="162"/><text x="18.5945%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (35 samples, 0.06%)</title><rect x="18.5514%" y="677" width="0.0570%" height="15" fill="rgb(223,106,5)" fg:x="11385" fg:w="35"/><text x="18.8014%" y="687.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend::_{{closure}} (205 samples, 0.33%)</title><rect x="20.6339%" y="741" width="0.3340%" height="15" fill="rgb(250,191,5)" fg:x="12663" fg:w="205"/><text x="20.8839%" y="751.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (60 samples, 0.10%)</title><rect x="24.8786%" y="597" width="0.0978%" height="15" fill="rgb(242,132,44)" fg:x="15268" fg:w="60"/><text x="25.1286%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,139 samples, 1.86%)</title><rect x="23.1497%" y="613" width="1.8560%" height="15" fill="rgb(251,152,29)" fg:x="14207" fg:w="1139"/><text x="23.3997%" y="623.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (18 samples, 0.03%)</title><rect x="24.9764%" y="597" width="0.0293%" height="15" fill="rgb(218,179,5)" fg:x="15328" fg:w="18"/><text x="25.2264%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (261 samples, 0.43%)</title><rect x="30.2330%" y="597" width="0.4253%" height="15" fill="rgb(227,67,19)" fg:x="18554" fg:w="261"/><text x="30.4830%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (5,115 samples, 8.33%)</title><rect x="22.3252%" y="661" width="8.3347%" height="15" fill="rgb(233,119,31)" fg:x="13701" fg:w="5115"/><text x="22.5752%" y="671.50">&lt;std::collec..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5,085 samples, 8.29%)</title><rect x="22.3741%" y="645" width="8.2858%" height="15" fill="rgb(241,120,22)" fg:x="13731" fg:w="5085"/><text x="22.6241%" y="655.50">&lt;core::hash:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5,085 samples, 8.29%)</title><rect x="22.3741%" y="629" width="8.2858%" height="15" fill="rgb(224,102,30)" fg:x="13731" fg:w="5085"/><text x="22.6241%" y="639.50">&lt;core::hash:..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3,470 samples, 5.65%)</title><rect x="25.0057%" y="613" width="5.6542%" height="15" fill="rgb(210,164,37)" fg:x="15346" fg:w="3470"/><text x="25.2557%" y="623.50">&lt;core::..</text></g><g><title>[libc.so.6] (659 samples, 1.07%)</title><rect x="30.7528%" y="645" width="1.0738%" height="15" fill="rgb(226,191,16)" fg:x="18873" fg:w="659"/><text x="31.0028%" y="655.50"></text></g><g><title>[libc.so.6] (647 samples, 1.05%)</title><rect x="31.8397%" y="629" width="1.0543%" height="15" fill="rgb(214,40,45)" fg:x="19540" fg:w="647"/><text x="32.0897%" y="639.50"></text></g><g><title>[libc.so.6] (920 samples, 1.50%)</title><rect x="32.9998%" y="613" width="1.4991%" height="15" fill="rgb(244,29,26)" fg:x="20252" fg:w="920"/><text x="33.2498%" y="623.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (189 samples, 0.31%)</title><rect x="34.4989%" y="613" width="0.3080%" height="15" fill="rgb(216,16,5)" fg:x="21172" fg:w="189"/><text x="34.7489%" y="623.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1,193 samples, 1.94%)</title><rect x="32.8939%" y="629" width="1.9439%" height="15" fill="rgb(249,76,35)" fg:x="20187" fg:w="1193"/><text x="33.1439%" y="639.50">c..</text></g><g><title>memcpy@plt (19 samples, 0.03%)</title><rect x="34.8069%" y="613" width="0.0310%" height="15" fill="rgb(207,11,44)" fg:x="21361" fg:w="19"/><text x="35.0569%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (2,580 samples, 4.20%)</title><rect x="30.6599%" y="661" width="4.2040%" height="15" fill="rgb(228,190,49)" fg:x="18816" fg:w="2580"/><text x="30.9099%" y="671.50">&lt;std:..</text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,864 samples, 3.04%)</title><rect x="31.8266%" y="645" width="3.0373%" height="15" fill="rgb(214,173,12)" fg:x="19532" fg:w="1864"/><text x="32.0766%" y="655.50">cor..</text></g><g><title>memcpy@plt (16 samples, 0.03%)</title><rect x="34.8379%" y="629" width="0.0261%" height="15" fill="rgb(218,26,35)" fg:x="21380" fg:w="16"/><text x="35.0879%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (41 samples, 0.07%)</title><rect x="34.9666%" y="613" width="0.0668%" height="15" fill="rgb(220,200,19)" fg:x="21459" fg:w="41"/><text x="35.2166%" y="623.50"></text></g><g><title>core::slice::raw::from_raw_parts (22 samples, 0.04%)</title><rect x="34.9976%" y="597" width="0.0358%" height="15" fill="rgb(239,95,49)" fg:x="21478" fg:w="22"/><text x="35.2476%" y="607.50"></text></g><g><title>core::ptr::slice_from_raw_parts (22 samples, 0.04%)</title><rect x="34.9976%" y="581" width="0.0358%" height="15" fill="rgb(235,85,53)" fg:x="21478" fg:w="22"/><text x="35.2476%" y="591.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (22 samples, 0.04%)</title><rect x="34.9976%" y="565" width="0.0358%" height="15" fill="rgb(233,133,31)" fg:x="21478" fg:w="22"/><text x="35.2476%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (42 samples, 0.07%)</title><rect x="34.9666%" y="629" width="0.0684%" height="15" fill="rgb(218,25,20)" fg:x="21459" fg:w="42"/><text x="35.2166%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,162 samples, 1.89%)</title><rect x="36.7411%" y="549" width="1.8934%" height="15" fill="rgb(252,210,38)" fg:x="22548" fg:w="1162"/><text x="36.9911%" y="559.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (62 samples, 0.10%)</title><rect x="38.5335%" y="533" width="0.1010%" height="15" fill="rgb(242,134,21)" fg:x="23648" fg:w="62"/><text x="38.7835%" y="543.50"></text></g><g><title>core::hash::sip::u8to64_le (57 samples, 0.09%)</title><rect x="38.6345%" y="549" width="0.0929%" height="15" fill="rgb(213,28,48)" fg:x="23710" fg:w="57"/><text x="38.8845%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.03%)</title><rect x="38.6981%" y="533" width="0.0293%" height="15" fill="rgb(250,196,2)" fg:x="23749" fg:w="18"/><text x="38.9481%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,293 samples, 3.74%)</title><rect x="35.0904%" y="565" width="3.7364%" height="15" fill="rgb(227,5,17)" fg:x="21535" fg:w="2293"/><text x="35.3404%" y="575.50">&lt;cor..</text></g><g><title>core::intrinsics::copy_nonoverlapping (61 samples, 0.10%)</title><rect x="38.7274%" y="549" width="0.0994%" height="15" fill="rgb(221,226,24)" fg:x="23767" fg:w="61"/><text x="38.9774%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (91 samples, 0.15%)</title><rect x="40.3015%" y="517" width="0.1483%" height="15" fill="rgb(211,5,48)" fg:x="24733" fg:w="91"/><text x="40.5515%" y="527.50"></text></g><g><title>core::hash::sip::u8to64_le (629 samples, 1.02%)</title><rect x="39.4606%" y="533" width="1.0249%" height="15" fill="rgb(219,150,6)" fg:x="24217" fg:w="629"/><text x="39.7106%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (22 samples, 0.04%)</title><rect x="40.4497%" y="517" width="0.0358%" height="15" fill="rgb(251,46,16)" fg:x="24824" fg:w="22"/><text x="40.6997%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (22 samples, 0.04%)</title><rect x="40.4497%" y="501" width="0.0358%" height="15" fill="rgb(220,204,40)" fg:x="24824" fg:w="22"/><text x="40.6997%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::as_ptr (22 samples, 0.04%)</title><rect x="40.4497%" y="485" width="0.0358%" height="15" fill="rgb(211,85,2)" fg:x="24824" fg:w="22"/><text x="40.6997%" y="495.50"></text></g><g><title>hashbrown::map::make_hash (11,355 samples, 18.50%)</title><rect x="21.9863%" y="693" width="18.5025%" height="15" fill="rgb(229,17,7)" fg:x="13493" fg:w="11355"/><text x="22.2363%" y="703.50">hashbrown::map::make_hash</text></g><g><title>core::hash::BuildHasher::hash_one (11,355 samples, 18.50%)</title><rect x="21.9863%" y="677" width="18.5025%" height="15" fill="rgb(239,72,28)" fg:x="13493" fg:w="11355"/><text x="22.2363%" y="687.50">core::hash::BuildHasher::hash..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,452 samples, 5.62%)</title><rect x="34.8639%" y="661" width="5.6249%" height="15" fill="rgb(230,47,54)" fg:x="21396" fg:w="3452"/><text x="35.1139%" y="671.50">core::h..</text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (3,432 samples, 5.59%)</title><rect x="34.8965%" y="645" width="5.5923%" height="15" fill="rgb(214,50,8)" fg:x="21416" fg:w="3432"/><text x="35.1465%" y="655.50">&lt;alloc:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,347 samples, 5.45%)</title><rect x="35.0350%" y="629" width="5.4538%" height="15" fill="rgb(216,198,43)" fg:x="21501" fg:w="3347"/><text x="35.2850%" y="639.50">core::h..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (3,347 samples, 5.45%)</title><rect x="35.0350%" y="613" width="5.4538%" height="15" fill="rgb(234,20,35)" fg:x="21501" fg:w="3347"/><text x="35.2850%" y="623.50">&lt;std::c..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,329 samples, 5.42%)</title><rect x="35.0644%" y="597" width="5.4245%" height="15" fill="rgb(254,45,19)" fg:x="21519" fg:w="3329"/><text x="35.3144%" y="607.50">&lt;core::..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,314 samples, 5.40%)</title><rect x="35.0888%" y="581" width="5.4000%" height="15" fill="rgb(219,14,44)" fg:x="21534" fg:w="3314"/><text x="35.3388%" y="591.50">&lt;core::..</text></g><g><title>core::hash::Hasher::write_u8 (1,020 samples, 1.66%)</title><rect x="38.8268%" y="565" width="1.6620%" height="15" fill="rgb(217,220,26)" fg:x="23828" fg:w="1020"/><text x="39.0768%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (990 samples, 1.61%)</title><rect x="38.8757%" y="549" width="1.6132%" height="15" fill="rgb(213,158,28)" fg:x="23858" fg:w="990"/><text x="39.1257%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (29 samples, 0.05%)</title><rect x="40.6795%" y="677" width="0.0473%" height="15" fill="rgb(252,51,52)" fg:x="24965" fg:w="29"/><text x="40.9295%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (132 samples, 0.22%)</title><rect x="40.7267%" y="677" width="0.2151%" height="15" fill="rgb(246,89,16)" fg:x="24994" fg:w="132"/><text x="40.9767%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (175 samples, 0.29%)</title><rect x="42.3122%" y="661" width="0.2852%" height="15" fill="rgb(216,158,49)" fg:x="25967" fg:w="175"/><text x="42.5622%" y="671.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (23 samples, 0.04%)</title><rect x="42.9347%" y="645" width="0.0375%" height="15" fill="rgb(236,107,19)" fg:x="26349" fg:w="23"/><text x="43.1847%" y="655.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (26 samples, 0.04%)</title><rect x="42.9803%" y="629" width="0.0424%" height="15" fill="rgb(228,185,30)" fg:x="26377" fg:w="26"/><text x="43.2303%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (262 samples, 0.43%)</title><rect x="42.5974%" y="661" width="0.4269%" height="15" fill="rgb(246,134,8)" fg:x="26142" fg:w="262"/><text x="42.8474%" y="671.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (32 samples, 0.05%)</title><rect x="42.9721%" y="645" width="0.0521%" height="15" fill="rgb(214,143,50)" fg:x="26372" fg:w="32"/><text x="43.2221%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (17 samples, 0.03%)</title><rect x="43.0259%" y="661" width="0.0277%" height="15" fill="rgb(228,75,8)" fg:x="26405" fg:w="17"/><text x="43.2759%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (17 samples, 0.03%)</title><rect x="43.0259%" y="645" width="0.0277%" height="15" fill="rgb(207,175,4)" fg:x="26405" fg:w="17"/><text x="43.2759%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_unchecked (16 samples, 0.03%)</title><rect x="43.0536%" y="661" width="0.0261%" height="15" fill="rgb(205,108,24)" fg:x="26422" fg:w="16"/><text x="43.3036%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (26 samples, 0.04%)</title><rect x="43.1041%" y="565" width="0.0424%" height="15" fill="rgb(244,120,49)" fg:x="26453" fg:w="26"/><text x="43.3541%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (12 samples, 0.02%)</title><rect x="43.1269%" y="549" width="0.0196%" height="15" fill="rgb(223,47,38)" fg:x="26467" fg:w="12"/><text x="43.3769%" y="559.50"></text></g><g><title>core::slice::raw::from_raw_parts (12 samples, 0.02%)</title><rect x="43.1269%" y="533" width="0.0196%" height="15" fill="rgb(229,179,11)" fg:x="26467" fg:w="12"/><text x="43.3769%" y="543.50"></text></g><g><title>core::ptr::slice_from_raw_parts (12 samples, 0.02%)</title><rect x="43.1269%" y="517" width="0.0196%" height="15" fill="rgb(231,122,1)" fg:x="26467" fg:w="12"/><text x="43.3769%" y="527.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (12 samples, 0.02%)</title><rect x="43.1269%" y="501" width="0.0196%" height="15" fill="rgb(245,119,9)" fg:x="26467" fg:w="12"/><text x="43.3769%" y="511.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (48 samples, 0.08%)</title><rect x="43.0943%" y="645" width="0.0782%" height="15" fill="rgb(241,163,25)" fg:x="26447" fg:w="48"/><text x="43.3443%" y="655.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (48 samples, 0.08%)</title><rect x="43.0943%" y="629" width="0.0782%" height="15" fill="rgb(217,214,3)" fg:x="26447" fg:w="48"/><text x="43.3443%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (47 samples, 0.08%)</title><rect x="43.0960%" y="613" width="0.0766%" height="15" fill="rgb(240,86,28)" fg:x="26448" fg:w="47"/><text x="43.3460%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (45 samples, 0.07%)</title><rect x="43.0992%" y="597" width="0.0733%" height="15" fill="rgb(215,47,9)" fg:x="26450" fg:w="45"/><text x="43.3492%" y="607.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (43 samples, 0.07%)</title><rect x="43.1025%" y="581" width="0.0701%" height="15" fill="rgb(252,25,45)" fg:x="26452" fg:w="43"/><text x="43.3525%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (16 samples, 0.03%)</title><rect x="43.1465%" y="565" width="0.0261%" height="15" fill="rgb(251,164,9)" fg:x="26479" fg:w="16"/><text x="43.3965%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (16 samples, 0.03%)</title><rect x="43.1465%" y="549" width="0.0261%" height="15" fill="rgb(233,194,0)" fg:x="26479" fg:w="16"/><text x="43.3965%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (77 samples, 0.13%)</title><rect x="43.0797%" y="661" width="0.1255%" height="15" fill="rgb(249,111,24)" fg:x="26438" fg:w="77"/><text x="43.3297%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (14 samples, 0.02%)</title><rect x="43.1823%" y="645" width="0.0228%" height="15" fill="rgb(250,223,3)" fg:x="26501" fg:w="14"/><text x="43.4323%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (11 samples, 0.02%)</title><rect x="43.1872%" y="629" width="0.0179%" height="15" fill="rgb(236,178,37)" fg:x="26504" fg:w="11"/><text x="43.4372%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::ctrl (117 samples, 0.19%)</title><rect x="43.2051%" y="661" width="0.1906%" height="15" fill="rgb(241,158,50)" fg:x="26515" fg:w="117"/><text x="43.4551%" y="671.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (117 samples, 0.19%)</title><rect x="43.2051%" y="645" width="0.1906%" height="15" fill="rgb(213,121,41)" fg:x="26515" fg:w="117"/><text x="43.4551%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (68 samples, 0.11%)</title><rect x="44.1372%" y="645" width="0.1108%" height="15" fill="rgb(240,92,3)" fg:x="27087" fg:w="68"/><text x="44.3872%" y="655.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (315 samples, 0.51%)</title><rect x="44.6440%" y="629" width="0.5133%" height="15" fill="rgb(205,123,3)" fg:x="27398" fg:w="315"/><text x="44.8940%" y="639.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (762 samples, 1.24%)</title><rect x="44.2480%" y="645" width="1.2416%" height="15" fill="rgb(205,97,47)" fg:x="27155" fg:w="762"/><text x="44.4980%" y="655.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (204 samples, 0.33%)</title><rect x="45.1572%" y="629" width="0.3324%" height="15" fill="rgb(247,152,14)" fg:x="27713" fg:w="204"/><text x="45.4072%" y="639.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (65 samples, 0.11%)</title><rect x="45.3837%" y="613" width="0.1059%" height="15" fill="rgb(248,195,53)" fg:x="27852" fg:w="65"/><text x="45.6337%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (2,891 samples, 4.71%)</title><rect x="43.3958%" y="661" width="4.7108%" height="15" fill="rgb(226,201,16)" fg:x="26632" fg:w="2891"/><text x="43.6458%" y="671.50">hashb..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1,606 samples, 2.62%)</title><rect x="45.4897%" y="645" width="2.6169%" height="15" fill="rgb(205,98,0)" fg:x="27917" fg:w="1606"/><text x="45.7397%" y="655.50">ha..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,590 samples, 2.59%)</title><rect x="45.5157%" y="629" width="2.5908%" height="15" fill="rgb(214,191,48)" fg:x="27933" fg:w="1590"/><text x="45.7657%" y="639.50">co..</text></g><g><title>core::core_arch::simd::i8x16::splat (53 samples, 0.09%)</title><rect x="48.0202%" y="613" width="0.0864%" height="15" fill="rgb(237,112,39)" fg:x="29470" fg:w="53"/><text x="48.2702%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_bucket_full (17 samples, 0.03%)</title><rect x="48.2353%" y="645" width="0.0277%" height="15" fill="rgb(247,203,27)" fg:x="29602" fg:w="17"/><text x="48.4853%" y="655.50"></text></g><g><title>hashbrown::raw::is_full (17 samples, 0.03%)</title><rect x="48.2353%" y="629" width="0.0277%" height="15" fill="rgb(235,124,28)" fg:x="29602" fg:w="17"/><text x="48.4853%" y="639.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (13 samples, 0.02%)</title><rect x="48.2630%" y="645" width="0.0212%" height="15" fill="rgb(208,207,46)" fg:x="29619" fg:w="13"/><text x="48.5130%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fix_insert_slot (152 samples, 0.25%)</title><rect x="48.1066%" y="661" width="0.2477%" height="15" fill="rgb(234,176,4)" fg:x="29523" fg:w="152"/><text x="48.3566%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (40 samples, 0.07%)</title><rect x="48.2891%" y="645" width="0.0652%" height="15" fill="rgb(230,133,28)" fg:x="29635" fg:w="40"/><text x="48.5391%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (40 samples, 0.07%)</title><rect x="48.2891%" y="629" width="0.0652%" height="15" fill="rgb(211,137,40)" fg:x="29635" fg:w="40"/><text x="48.5391%" y="639.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (26 samples, 0.04%)</title><rect x="48.3542%" y="661" width="0.0424%" height="15" fill="rgb(254,35,13)" fg:x="29675" fg:w="26"/><text x="48.6042%" y="671.50"></text></g><g><title>hashbrown::raw::h2 (17 samples, 0.03%)</title><rect x="48.3966%" y="661" width="0.0277%" height="15" fill="rgb(225,49,51)" fg:x="29701" fg:w="17"/><text x="48.6466%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_undefined_si128 (66 samples, 0.11%)</title><rect x="50.0896%" y="629" width="0.1075%" height="15" fill="rgb(251,10,15)" fg:x="30740" fg:w="66"/><text x="50.3396%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1,162 samples, 1.89%)</title><rect x="48.4243%" y="661" width="1.8934%" height="15" fill="rgb(228,207,15)" fg:x="29718" fg:w="1162"/><text x="48.6743%" y="671.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,004 samples, 1.64%)</title><rect x="48.6818%" y="645" width="1.6360%" height="15" fill="rgb(241,99,19)" fg:x="29876" fg:w="1004"/><text x="48.9318%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (74 samples, 0.12%)</title><rect x="50.1972%" y="629" width="0.1206%" height="15" fill="rgb(207,104,49)" fg:x="30806" fg:w="74"/><text x="50.4472%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (496 samples, 0.81%)</title><rect x="51.3785%" y="645" width="0.8082%" height="15" fill="rgb(234,99,18)" fg:x="31531" fg:w="496"/><text x="51.6285%" y="655.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (143 samples, 0.23%)</title><rect x="51.9537%" y="629" width="0.2330%" height="15" fill="rgb(213,191,49)" fg:x="31884" fg:w="143"/><text x="52.2037%" y="639.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (44 samples, 0.07%)</title><rect x="54.0867%" y="629" width="0.0717%" height="15" fill="rgb(210,226,19)" fg:x="33193" fg:w="44"/><text x="54.3367%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,345 samples, 2.19%)</title><rect x="52.1867%" y="645" width="2.1916%" height="15" fill="rgb(229,97,18)" fg:x="32027" fg:w="1345"/><text x="52.4367%" y="655.50">c..</text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (135 samples, 0.22%)</title><rect x="54.1584%" y="629" width="0.2200%" height="15" fill="rgb(211,167,15)" fg:x="33237" fg:w="135"/><text x="54.4084%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3,396 samples, 5.53%)</title><rect x="50.3177%" y="661" width="5.5336%" height="15" fill="rgb(210,169,34)" fg:x="30880" fg:w="3396"/><text x="50.5677%" y="671.50">hashbro..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (904 samples, 1.47%)</title><rect x="54.3784%" y="645" width="1.4730%" height="15" fill="rgb(241,121,31)" fg:x="33372" fg:w="904"/><text x="54.6284%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (885 samples, 1.44%)</title><rect x="54.4093%" y="629" width="1.4421%" height="15" fill="rgb(232,40,11)" fg:x="33391" fg:w="885"/><text x="54.6593%" y="639.50"></text></g><g><title>core::core_arch::simd::i8x16::new (44 samples, 0.07%)</title><rect x="55.7797%" y="613" width="0.0717%" height="15" fill="rgb(205,86,26)" fg:x="34232" fg:w="44"/><text x="56.0297%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (548 samples, 0.89%)</title><rect x="56.6743%" y="629" width="0.8929%" height="15" fill="rgb(231,126,28)" fg:x="34781" fg:w="548"/><text x="56.9243%" y="639.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (155 samples, 0.25%)</title><rect x="57.3146%" y="613" width="0.2526%" height="15" fill="rgb(219,221,18)" fg:x="35174" fg:w="155"/><text x="57.5646%" y="623.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (41 samples, 0.07%)</title><rect x="59.4346%" y="613" width="0.0668%" height="15" fill="rgb(211,40,0)" fg:x="36475" fg:w="41"/><text x="59.6846%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,299 samples, 2.12%)</title><rect x="57.5672%" y="629" width="2.1167%" height="15" fill="rgb(239,85,43)" fg:x="35329" fg:w="1299"/><text x="57.8172%" y="639.50">c..</text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (112 samples, 0.18%)</title><rect x="59.5014%" y="613" width="0.1825%" height="15" fill="rgb(231,55,21)" fg:x="36516" fg:w="112"/><text x="59.7514%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (12,687 samples, 20.67%)</title><rect x="40.4888%" y="693" width="20.6730%" height="15" fill="rgb(225,184,43)" fg:x="24848" fg:w="12687"/><text x="40.7388%" y="703.50">hashbrown::raw::RawTable&lt;T,A&gt;::fi..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (12,409 samples, 20.22%)</title><rect x="40.9418%" y="677" width="20.2200%" height="15" fill="rgb(251,158,41)" fg:x="25126" fg:w="12409"/><text x="41.1918%" y="687.50">hashbrown::raw::RawTableInner&lt;A&gt;..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (3,259 samples, 5.31%)</title><rect x="55.8514%" y="661" width="5.3104%" height="15" fill="rgb(234,159,37)" fg:x="34276" fg:w="3259"/><text x="56.1014%" y="671.50">hashbro..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3,238 samples, 5.28%)</title><rect x="55.8856%" y="645" width="5.2762%" height="15" fill="rgb(216,204,22)" fg:x="34297" fg:w="3238"/><text x="56.1356%" y="655.50">hashbr..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (907 samples, 1.48%)</title><rect x="59.6839%" y="629" width="1.4779%" height="15" fill="rgb(214,17,3)" fg:x="36628" fg:w="907"/><text x="59.9339%" y="639.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (864 samples, 1.41%)</title><rect x="59.7540%" y="613" width="1.4079%" height="15" fill="rgb(212,111,17)" fg:x="36671" fg:w="864"/><text x="60.0040%" y="623.50"></text></g><g><title>core::core_arch::simd::i8x16::new (35 samples, 0.06%)</title><rect x="61.1048%" y="597" width="0.0570%" height="15" fill="rgb(221,157,24)" fg:x="37500" fg:w="35"/><text x="61.3548%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (300 samples, 0.49%)</title><rect x="61.4714%" y="661" width="0.4888%" height="15" fill="rgb(252,16,13)" fg:x="37725" fg:w="300"/><text x="61.7214%" y="671.50"></text></g><g><title>core::ptr::write (300 samples, 0.49%)</title><rect x="61.4714%" y="645" width="0.4888%" height="15" fill="rgb(221,62,2)" fg:x="37725" fg:w="300"/><text x="61.7214%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (563 samples, 0.92%)</title><rect x="61.4714%" y="677" width="0.9174%" height="15" fill="rgb(247,87,22)" fg:x="37725" fg:w="563"/><text x="61.7214%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (263 samples, 0.43%)</title><rect x="61.9602%" y="661" width="0.4285%" height="15" fill="rgb(215,73,9)" fg:x="38025" fg:w="263"/><text x="62.2102%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (229 samples, 0.37%)</title><rect x="62.0156%" y="645" width="0.3731%" height="15" fill="rgb(207,175,33)" fg:x="38059" fg:w="229"/><text x="62.2656%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (220 samples, 0.36%)</title><rect x="62.0303%" y="629" width="0.3585%" height="15" fill="rgb(243,129,54)" fg:x="38068" fg:w="220"/><text x="62.2803%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (23 samples, 0.04%)</title><rect x="64.1568%" y="645" width="0.0375%" height="15" fill="rgb(227,119,45)" fg:x="39373" fg:w="23"/><text x="64.4068%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (908 samples, 1.48%)</title><rect x="62.9558%" y="661" width="1.4796%" height="15" fill="rgb(205,109,36)" fg:x="38636" fg:w="908"/><text x="63.2058%" y="671.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (148 samples, 0.24%)</title><rect x="64.1942%" y="645" width="0.2412%" height="15" fill="rgb(205,6,39)" fg:x="39396" fg:w="148"/><text x="64.4442%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::cast (14 samples, 0.02%)</title><rect x="64.4745%" y="645" width="0.0228%" height="15" fill="rgb(221,32,16)" fg:x="39568" fg:w="14"/><text x="64.7245%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1,334 samples, 2.17%)</title><rect x="62.3888%" y="677" width="2.1737%" height="15" fill="rgb(228,144,50)" fg:x="38288" fg:w="1334"/><text x="62.6388%" y="687.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::data_end (78 samples, 0.13%)</title><rect x="64.4354%" y="661" width="0.1271%" height="15" fill="rgb(229,201,53)" fg:x="39544" fg:w="78"/><text x="64.6854%" y="671.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (39 samples, 0.06%)</title><rect x="64.4989%" y="645" width="0.0635%" height="15" fill="rgb(249,153,27)" fg:x="39583" fg:w="39"/><text x="64.7489%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::ctrl (31 samples, 0.05%)</title><rect x="64.5625%" y="677" width="0.0505%" height="15" fill="rgb(227,106,25)" fg:x="39622" fg:w="31"/><text x="64.8125%" y="687.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (12 samples, 0.02%)</title><rect x="64.5934%" y="661" width="0.0196%" height="15" fill="rgb(230,65,29)" fg:x="39641" fg:w="12"/><text x="64.8434%" y="671.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (23 samples, 0.04%)</title><rect x="64.7759%" y="629" width="0.0375%" height="15" fill="rgb(221,57,46)" fg:x="39753" fg:w="23"/><text x="65.0259%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (139 samples, 0.23%)</title><rect x="64.7140%" y="645" width="0.2265%" height="15" fill="rgb(229,161,17)" fg:x="39715" fg:w="139"/><text x="64.9640%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::ctrl (78 samples, 0.13%)</title><rect x="64.8134%" y="629" width="0.1271%" height="15" fill="rgb(222,213,11)" fg:x="39776" fg:w="78"/><text x="65.0634%" y="639.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (42 samples, 0.07%)</title><rect x="64.8721%" y="613" width="0.0684%" height="15" fill="rgb(235,35,13)" fg:x="39812" fg:w="42"/><text x="65.1221%" y="623.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (27,884 samples, 45.44%)</title><rect x="19.5698%" y="757" width="45.4359%" height="15" fill="rgb(233,158,34)" fg:x="12010" fg:w="27884"/><text x="19.8198%" y="767.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (27,026 samples, 44.04%)</title><rect x="20.9679%" y="741" width="44.0378%" height="15" fill="rgb(215,151,48)" fg:x="12868" fg:w="27026"/><text x="21.2179%" y="751.50">core::iter::traits::iterator::Iterator::for_each::call::_{{closure}}</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (26,864 samples, 43.77%)</title><rect x="21.2319%" y="725" width="43.7738%" height="15" fill="rgb(229,84,14)" fg:x="13030" fg:w="26864"/><text x="21.4819%" y="735.50">&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (26,703 samples, 43.51%)</title><rect x="21.4942%" y="709" width="43.5115%" height="15" fill="rgb(229,68,14)" fg:x="13191" fg:w="26703"/><text x="21.7442%" y="719.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (2,359 samples, 3.84%)</title><rect x="61.1618%" y="693" width="3.8439%" height="15" fill="rgb(243,106,26)" fg:x="37535" fg:w="2359"/><text x="61.4118%" y="703.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (241 samples, 0.39%)</title><rect x="64.6130%" y="677" width="0.3927%" height="15" fill="rgb(206,45,38)" fg:x="39653" fg:w="241"/><text x="64.8630%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (179 samples, 0.29%)</title><rect x="64.7140%" y="661" width="0.2917%" height="15" fill="rgb(226,6,15)" fg:x="39715" fg:w="179"/><text x="64.9640%" y="671.50"></text></g><g><title>hashbrown::raw::h2 (40 samples, 0.07%)</title><rect x="64.9405%" y="645" width="0.0652%" height="15" fill="rgb(232,22,54)" fg:x="39854" fg:w="40"/><text x="65.1905%" y="655.50"></text></g><g><title>__rdl_alloc (21 samples, 0.03%)</title><rect x="67.1289%" y="565" width="0.0342%" height="15" fill="rgb(229,222,32)" fg:x="41197" fg:w="21"/><text x="67.3789%" y="575.50"></text></g><g><title>__rust_alloc (33 samples, 0.05%)</title><rect x="67.1631%" y="565" width="0.0538%" height="15" fill="rgb(228,62,29)" fg:x="41218" fg:w="33"/><text x="67.4131%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (392 samples, 0.64%)</title><rect x="67.0670%" y="661" width="0.6387%" height="15" fill="rgb(251,103,34)" fg:x="41159" fg:w="392"/><text x="67.3170%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (392 samples, 0.64%)</title><rect x="67.0670%" y="645" width="0.6387%" height="15" fill="rgb(233,12,30)" fg:x="41159" fg:w="392"/><text x="67.3170%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (392 samples, 0.64%)</title><rect x="67.0670%" y="629" width="0.6387%" height="15" fill="rgb(238,52,0)" fg:x="41159" fg:w="392"/><text x="67.3170%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (357 samples, 0.58%)</title><rect x="67.1240%" y="613" width="0.5817%" height="15" fill="rgb(223,98,5)" fg:x="41194" fg:w="357"/><text x="67.3740%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (357 samples, 0.58%)</title><rect x="67.1240%" y="597" width="0.5817%" height="15" fill="rgb(228,75,37)" fg:x="41194" fg:w="357"/><text x="67.3740%" y="607.50"></text></g><g><title>alloc::alloc::alloc (357 samples, 0.58%)</title><rect x="67.1240%" y="581" width="0.5817%" height="15" fill="rgb(205,115,49)" fg:x="41194" fg:w="357"/><text x="67.3740%" y="591.50"></text></g><g><title>malloc (300 samples, 0.49%)</title><rect x="67.2169%" y="565" width="0.4888%" height="15" fill="rgb(250,154,43)" fg:x="41251" fg:w="300"/><text x="67.4669%" y="575.50"></text></g><g><title>[libc.so.6] (191 samples, 0.31%)</title><rect x="67.3945%" y="549" width="0.3112%" height="15" fill="rgb(226,43,29)" fg:x="41360" fg:w="191"/><text x="67.6445%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (35,503 samples, 57.85%)</title><rect x="11.2368%" y="805" width="57.8507%" height="15" fill="rgb(249,228,39)" fg:x="6896" fg:w="35503"/><text x="11.4868%" y="815.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (35,398 samples, 57.68%)</title><rect x="11.4079%" y="789" width="57.6796%" height="15" fill="rgb(216,79,43)" fg:x="7001" fg:w="35398"/><text x="11.6579%" y="799.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (30,979 samples, 50.48%)</title><rect x="18.6084%" y="773" width="50.4791%" height="15" fill="rgb(228,95,12)" fg:x="11420" fg:w="30979"/><text x="18.8584%" y="783.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>core::ops::function::FnMut::call_mut (2,505 samples, 4.08%)</title><rect x="65.0057%" y="757" width="4.0818%" height="15" fill="rgb(249,221,15)" fg:x="39894" fg:w="2505"/><text x="65.2557%" y="767.50">core..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,331 samples, 3.80%)</title><rect x="65.2892%" y="741" width="3.7983%" height="15" fill="rgb(233,34,13)" fg:x="40068" fg:w="2331"/><text x="65.5392%" y="751.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,240 samples, 2.02%)</title><rect x="67.0670%" y="725" width="2.0205%" height="15" fill="rgb(214,103,39)" fg:x="41159" fg:w="1240"/><text x="67.3170%" y="735.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,240 samples, 2.02%)</title><rect x="67.0670%" y="709" width="2.0205%" height="15" fill="rgb(251,126,39)" fg:x="41159" fg:w="1240"/><text x="67.3170%" y="719.50">a..</text></g><g><title>alloc::slice::hack::to_vec (1,240 samples, 2.02%)</title><rect x="67.0670%" y="693" width="2.0205%" height="15" fill="rgb(214,216,36)" fg:x="41159" fg:w="1240"/><text x="67.3170%" y="703.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,240 samples, 2.02%)</title><rect x="67.0670%" y="677" width="2.0205%" height="15" fill="rgb(220,221,8)" fg:x="41159" fg:w="1240"/><text x="67.3170%" y="687.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (848 samples, 1.38%)</title><rect x="67.7057%" y="661" width="1.3818%" height="15" fill="rgb(240,216,3)" fg:x="41551" fg:w="848"/><text x="67.9557%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (848 samples, 1.38%)</title><rect x="67.7057%" y="645" width="1.3818%" height="15" fill="rgb(232,218,17)" fg:x="41551" fg:w="848"/><text x="67.9557%" y="655.50"></text></g><g><title>[libc.so.6] (832 samples, 1.36%)</title><rect x="67.7318%" y="629" width="1.3557%" height="15" fill="rgb(229,163,45)" fg:x="41567" fg:w="832"/><text x="67.9818%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (35,699 samples, 58.17%)</title><rect x="11.1097%" y="821" width="58.1701%" height="15" fill="rgb(231,110,42)" fg:x="6818" fg:w="35699"/><text x="11.3597%" y="831.50">&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::map (118 samples, 0.19%)</title><rect x="69.0875%" y="805" width="0.1923%" height="15" fill="rgb(208,170,48)" fg:x="42399" fg:w="118"/><text x="69.3375%" y="815.50"></text></g><g><title>core::iter::adapters::map::Map&lt;I,F&gt;::new (118 samples, 0.19%)</title><rect x="69.0875%" y="789" width="0.1923%" height="15" fill="rgb(239,116,25)" fg:x="42399" fg:w="118"/><text x="69.3375%" y="799.50"></text></g><g><title>[libc.so.6] (113 samples, 0.18%)</title><rect x="69.0956%" y="773" width="0.1841%" height="15" fill="rgb(219,200,50)" fg:x="42404" fg:w="113"/><text x="69.3456%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (35,805 samples, 58.34%)</title><rect x="10.9451%" y="837" width="58.3428%" height="15" fill="rgb(245,200,0)" fg:x="6717" fg:w="35805"/><text x="11.1951%" y="847.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (35,881 samples, 58.47%)</title><rect x="10.8294%" y="853" width="58.4667%" height="15" fill="rgb(245,119,33)" fg:x="6646" fg:w="35881"/><text x="11.0794%" y="863.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (30 samples, 0.05%)</title><rect x="69.3955%" y="821" width="0.0489%" height="15" fill="rgb(231,125,12)" fg:x="42588" fg:w="30"/><text x="69.6455%" y="831.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (30 samples, 0.05%)</title><rect x="69.3955%" y="805" width="0.0489%" height="15" fill="rgb(216,96,41)" fg:x="42588" fg:w="30"/><text x="69.6455%" y="815.50"></text></g><g><title>core::cmp::Ord::max (215 samples, 0.35%)</title><rect x="69.9055%" y="789" width="0.3503%" height="15" fill="rgb(248,43,45)" fg:x="42901" fg:w="215"/><text x="70.1555%" y="799.50"></text></g><g><title>core::cmp::max_by (205 samples, 0.33%)</title><rect x="69.9218%" y="773" width="0.3340%" height="15" fill="rgb(217,222,7)" fg:x="42911" fg:w="205"/><text x="70.1718%" y="783.50"></text></g><g><title>core::ops::function::FnOnce::call_once (99 samples, 0.16%)</title><rect x="70.0945%" y="757" width="0.1613%" height="15" fill="rgb(233,28,6)" fg:x="43017" fg:w="99"/><text x="70.3445%" y="767.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (55 samples, 0.09%)</title><rect x="70.1662%" y="741" width="0.0896%" height="15" fill="rgb(231,218,15)" fg:x="43061" fg:w="55"/><text x="70.4162%" y="751.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (46 samples, 0.07%)</title><rect x="70.2558%" y="789" width="0.0750%" height="15" fill="rgb(226,171,48)" fg:x="43116" fg:w="46"/><text x="70.5058%" y="799.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (21 samples, 0.03%)</title><rect x="70.2966%" y="773" width="0.0342%" height="15" fill="rgb(235,201,9)" fg:x="43141" fg:w="21"/><text x="70.5466%" y="783.50"></text></g><g><title>[libc.so.6] (45 samples, 0.07%)</title><rect x="70.5801%" y="757" width="0.0733%" height="15" fill="rgb(217,80,15)" fg:x="43315" fg:w="45"/><text x="70.8301%" y="767.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (64 samples, 0.10%)</title><rect x="70.5508%" y="773" width="0.1043%" height="15" fill="rgb(219,152,8)" fg:x="43297" fg:w="64"/><text x="70.8008%" y="783.50"></text></g><g><title>[libc.so.6] (44 samples, 0.07%)</title><rect x="70.6550%" y="773" width="0.0717%" height="15" fill="rgb(243,107,38)" fg:x="43361" fg:w="44"/><text x="70.9050%" y="783.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (18 samples, 0.03%)</title><rect x="70.7267%" y="773" width="0.0293%" height="15" fill="rgb(231,17,5)" fg:x="43405" fg:w="18"/><text x="70.9767%" y="783.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (18 samples, 0.03%)</title><rect x="70.7267%" y="757" width="0.0293%" height="15" fill="rgb(209,25,54)" fg:x="43405" fg:w="18"/><text x="70.9767%" y="767.50"></text></g><g><title>core::ptr::read (8 samples, 0.01%)</title><rect x="70.7675%" y="741" width="0.0130%" height="15" fill="rgb(219,0,2)" fg:x="43430" fg:w="8"/><text x="71.0175%" y="751.50"></text></g><g><title>core::mem::swap (55 samples, 0.09%)</title><rect x="70.7561%" y="773" width="0.0896%" height="15" fill="rgb(246,9,5)" fg:x="43423" fg:w="55"/><text x="71.0061%" y="783.50"></text></g><g><title>core::mem::swap_simple (48 samples, 0.08%)</title><rect x="70.7675%" y="757" width="0.0782%" height="15" fill="rgb(226,159,4)" fg:x="43430" fg:w="48"/><text x="71.0175%" y="767.50"></text></g><g><title>core::ptr::write (40 samples, 0.07%)</title><rect x="70.7805%" y="741" width="0.0652%" height="15" fill="rgb(219,175,34)" fg:x="43438" fg:w="40"/><text x="71.0305%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (68 samples, 0.11%)</title><rect x="70.8457%" y="773" width="0.1108%" height="15" fill="rgb(236,10,46)" fg:x="43478" fg:w="68"/><text x="71.0957%" y="783.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.09%)</title><rect x="70.8652%" y="757" width="0.0912%" height="15" fill="rgb(240,211,16)" fg:x="43490" fg:w="56"/><text x="71.1152%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::_{{closure}} (24 samples, 0.04%)</title><rect x="70.9174%" y="741" width="0.0391%" height="15" fill="rgb(205,3,43)" fg:x="43522" fg:w="24"/><text x="71.1674%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket_ptr (21 samples, 0.03%)</title><rect x="70.9565%" y="773" width="0.0342%" height="15" fill="rgb(245,7,22)" fg:x="43546" fg:w="21"/><text x="71.2065%" y="783.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_bucket_full (22 samples, 0.04%)</title><rect x="70.9923%" y="773" width="0.0358%" height="15" fill="rgb(239,132,32)" fg:x="43568" fg:w="22"/><text x="71.2423%" y="783.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (45 samples, 0.07%)</title><rect x="71.2302%" y="757" width="0.0733%" height="15" fill="rgb(228,202,34)" fg:x="43714" fg:w="45"/><text x="71.4802%" y="767.50"></text></g><g><title>[libc.so.6] (142 samples, 0.23%)</title><rect x="71.3036%" y="757" width="0.2314%" height="15" fill="rgb(254,200,22)" fg:x="43759" fg:w="142"/><text x="71.5536%" y="767.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (82 samples, 0.13%)</title><rect x="71.8120%" y="741" width="0.1336%" height="15" fill="rgb(219,10,39)" fg:x="44071" fg:w="82"/><text x="72.0620%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or_else (37 samples, 0.06%)</title><rect x="71.9456%" y="741" width="0.0603%" height="15" fill="rgb(226,210,39)" fg:x="44153" fg:w="37"/><text x="72.1956%" y="751.50"></text></g><g><title>[libc.so.6] (17 samples, 0.03%)</title><rect x="72.0173%" y="709" width="0.0277%" height="15" fill="rgb(208,219,16)" fg:x="44197" fg:w="17"/><text x="72.2673%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (28 samples, 0.05%)</title><rect x="72.0059%" y="741" width="0.0456%" height="15" fill="rgb(216,158,51)" fg:x="44190" fg:w="28"/><text x="72.2559%" y="751.50"></text></g><g><title>core::intrinsics::write_bytes (27 samples, 0.04%)</title><rect x="72.0075%" y="725" width="0.0440%" height="15" fill="rgb(233,14,44)" fg:x="44191" fg:w="27"/><text x="72.2575%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::ctrl (52 samples, 0.08%)</title><rect x="72.0515%" y="741" width="0.0847%" height="15" fill="rgb(237,97,39)" fg:x="44218" fg:w="52"/><text x="72.3015%" y="751.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (27 samples, 0.04%)</title><rect x="72.4132%" y="725" width="0.0440%" height="15" fill="rgb(218,198,43)" fg:x="44440" fg:w="27"/><text x="72.6632%" y="735.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::FromResidual&gt;::from_residual (10 samples, 0.02%)</title><rect x="72.7652%" y="709" width="0.0163%" height="15" fill="rgb(231,104,20)" fg:x="44656" fg:w="10"/><text x="73.0152%" y="719.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (75 samples, 0.12%)</title><rect x="72.7815%" y="709" width="0.1222%" height="15" fill="rgb(254,36,13)" fg:x="44666" fg:w="75"/><text x="73.0315%" y="719.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (31 samples, 0.05%)</title><rect x="72.9037%" y="709" width="0.0505%" height="15" fill="rgb(248,14,50)" fg:x="44741" fg:w="31"/><text x="73.1537%" y="719.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (124 samples, 0.20%)</title><rect x="72.9542%" y="709" width="0.2021%" height="15" fill="rgb(217,107,29)" fg:x="44772" fg:w="124"/><text x="73.2042%" y="719.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (39 samples, 0.06%)</title><rect x="73.0927%" y="693" width="0.0635%" height="15" fill="rgb(251,169,33)" fg:x="44857" fg:w="39"/><text x="73.3427%" y="703.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (536 samples, 0.87%)</title><rect x="72.4637%" y="725" width="0.8734%" height="15" fill="rgb(217,108,32)" fg:x="44471" fg:w="536"/><text x="72.7137%" y="735.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (111 samples, 0.18%)</title><rect x="73.1563%" y="709" width="0.1809%" height="15" fill="rgb(219,66,42)" fg:x="44896" fg:w="111"/><text x="73.4063%" y="719.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (9 samples, 0.01%)</title><rect x="73.3225%" y="693" width="0.0147%" height="15" fill="rgb(206,180,7)" fg:x="44998" fg:w="9"/><text x="73.5725%" y="703.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (38 samples, 0.06%)</title><rect x="73.7021%" y="677" width="0.0619%" height="15" fill="rgb(208,226,31)" fg:x="45231" fg:w="38"/><text x="73.9521%" y="687.50"></text></g><g><title>core::ptr::read_volatile (7 samples, 0.01%)</title><rect x="73.8015%" y="661" width="0.0114%" height="15" fill="rgb(218,26,49)" fg:x="45292" fg:w="7"/><text x="74.0515%" y="671.50"></text></g><g><title>alloc::alloc::alloc (116 samples, 0.19%)</title><rect x="73.7673%" y="677" width="0.1890%" height="15" fill="rgb(233,197,48)" fg:x="45271" fg:w="116"/><text x="74.0173%" y="687.50"></text></g><g><title>malloc (88 samples, 0.14%)</title><rect x="73.8129%" y="661" width="0.1434%" height="15" fill="rgb(252,181,51)" fg:x="45299" fg:w="88"/><text x="74.0629%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (40 samples, 0.07%)</title><rect x="73.9563%" y="677" width="0.0652%" height="15" fill="rgb(253,90,19)" fg:x="45387" fg:w="40"/><text x="74.2063%" y="687.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (62 samples, 0.10%)</title><rect x="74.0215%" y="677" width="0.1010%" height="15" fill="rgb(215,171,30)" fg:x="45427" fg:w="62"/><text x="74.2715%" y="687.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (24 samples, 0.04%)</title><rect x="74.0834%" y="661" width="0.0391%" height="15" fill="rgb(214,222,9)" fg:x="45465" fg:w="24"/><text x="74.3334%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (1,275 samples, 2.08%)</title><rect x="72.1362%" y="741" width="2.0776%" height="15" fill="rgb(223,3,22)" fg:x="44270" fg:w="1275"/><text x="72.3862%" y="751.50">h..</text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (538 samples, 0.88%)</title><rect x="73.3371%" y="725" width="0.8766%" height="15" fill="rgb(225,196,46)" fg:x="45007" fg:w="538"/><text x="73.5871%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (450 samples, 0.73%)</title><rect x="73.4805%" y="709" width="0.7333%" height="15" fill="rgb(209,110,37)" fg:x="45095" fg:w="450"/><text x="73.7305%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (444 samples, 0.72%)</title><rect x="73.4903%" y="693" width="0.7235%" height="15" fill="rgb(249,89,12)" fg:x="45101" fg:w="444"/><text x="73.7403%" y="703.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (56 samples, 0.09%)</title><rect x="74.1225%" y="677" width="0.0912%" height="15" fill="rgb(226,27,33)" fg:x="45489" fg:w="56"/><text x="74.3725%" y="687.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (54 samples, 0.09%)</title><rect x="74.1258%" y="661" width="0.0880%" height="15" fill="rgb(213,82,22)" fg:x="45491" fg:w="54"/><text x="74.3758%" y="671.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (54 samples, 0.09%)</title><rect x="74.1258%" y="645" width="0.0880%" height="15" fill="rgb(248,140,0)" fg:x="45491" fg:w="54"/><text x="74.3758%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1,802 samples, 2.94%)</title><rect x="71.5350%" y="757" width="2.9363%" height="15" fill="rgb(228,106,3)" fg:x="43901" fg:w="1802"/><text x="71.7850%" y="767.50">ha..</text></g><g><title>hashbrown::raw::capacity_to_buckets (155 samples, 0.25%)</title><rect x="74.2187%" y="741" width="0.2526%" height="15" fill="rgb(209,23,37)" fg:x="45548" fg:w="155"/><text x="74.4687%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (2,129 samples, 3.47%)</title><rect x="71.0282%" y="773" width="3.4691%" height="15" fill="rgb(241,93,50)" fg:x="43590" fg:w="2129"/><text x="71.2782%" y="783.50">has..</text></g><g><title>hashbrown::scopeguard::guard (16 samples, 0.03%)</title><rect x="74.4712%" y="757" width="0.0261%" height="15" fill="rgb(253,46,43)" fg:x="45703" fg:w="16"/><text x="74.7212%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (2,559 samples, 4.17%)</title><rect x="70.3308%" y="789" width="4.1698%" height="15" fill="rgb(226,206,43)" fg:x="43162" fg:w="2559"/><text x="70.5808%" y="799.50">hashb..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (39,321 samples, 64.07%)</title><rect x="10.4367%" y="869" width="64.0720%" height="15" fill="rgb(217,54,7)" fg:x="6405" fg:w="39321"/><text x="10.6867%" y="879.50">&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (3,199 samples, 5.21%)</title><rect x="69.2961%" y="853" width="5.2126%" height="15" fill="rgb(223,5,52)" fg:x="42527" fg:w="3199"/><text x="69.5461%" y="863.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3,197 samples, 5.21%)</title><rect x="69.2993%" y="837" width="5.2094%" height="15" fill="rgb(206,52,46)" fg:x="42529" fg:w="3197"/><text x="69.5493%" y="847.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3,108 samples, 5.06%)</title><rect x="69.4444%" y="821" width="5.0644%" height="15" fill="rgb(253,136,11)" fg:x="42618" fg:w="3108"/><text x="69.6944%" y="831.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (2,966 samples, 4.83%)</title><rect x="69.6757%" y="805" width="4.8330%" height="15" fill="rgb(208,106,33)" fg:x="42760" fg:w="2966"/><text x="69.9257%" y="815.50">hashbr..</text></g><g><title>[libc.so.6] (94 samples, 0.15%)</title><rect x="74.5152%" y="837" width="0.1532%" height="15" fill="rgb(206,54,4)" fg:x="45730" fg:w="94"/><text x="74.7652%" y="847.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (39,628 samples, 64.57%)</title><rect x="10.0994%" y="901" width="64.5723%" height="15" fill="rgb(213,3,15)" fg:x="6198" fg:w="39628"/><text x="10.3494%" y="911.50">&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend</text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (39,608 samples, 64.54%)</title><rect x="10.1320%" y="885" width="64.5397%" height="15" fill="rgb(252,211,39)" fg:x="6218" fg:w="39608"/><text x="10.3820%" y="895.50">&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend</text></g><g><title>core::iter::traits::iterator::Iterator::map (100 samples, 0.16%)</title><rect x="74.5087%" y="869" width="0.1629%" height="15" fill="rgb(223,6,36)" fg:x="45726" fg:w="100"/><text x="74.7587%" y="879.50"></text></g><g><title>core::iter::adapters::map::Map&lt;I,F&gt;::new (96 samples, 0.16%)</title><rect x="74.5152%" y="853" width="0.1564%" height="15" fill="rgb(252,169,45)" fg:x="45730" fg:w="96"/><text x="74.7652%" y="863.50"></text></g><g><title>[libc.so.6] (71 samples, 0.12%)</title><rect x="74.6717%" y="901" width="0.1157%" height="15" fill="rgb(212,48,26)" fg:x="45826" fg:w="71"/><text x="74.9217%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (40,531 samples, 66.04%)</title><rect x="9.1902%" y="933" width="66.0437%" height="15" fill="rgb(251,102,48)" fg:x="5640" fg:w="40531"/><text x="9.4402%" y="943.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (40,518 samples, 66.02%)</title><rect x="9.2113%" y="917" width="66.0225%" height="15" fill="rgb(243,208,16)" fg:x="5653" fg:w="40518"/><text x="9.4613%" y="927.50">&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::with_hasher (271 samples, 0.44%)</title><rect x="74.7922%" y="901" width="0.4416%" height="15" fill="rgb(219,96,24)" fg:x="45900" fg:w="271"/><text x="75.0422%" y="911.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S&gt;::with_hasher (238 samples, 0.39%)</title><rect x="74.8460%" y="885" width="0.3878%" height="15" fill="rgb(219,33,29)" fg:x="45933" fg:w="238"/><text x="75.0960%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_hasher (151 samples, 0.25%)</title><rect x="74.9878%" y="869" width="0.2460%" height="15" fill="rgb(223,176,5)" fg:x="46020" fg:w="151"/><text x="75.2378%" y="879.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::new (127 samples, 0.21%)</title><rect x="75.0269%" y="853" width="0.2069%" height="15" fill="rgb(228,140,14)" fg:x="46044" fg:w="127"/><text x="75.2769%" y="863.50"></text></g><g><title>[libc.so.6] (93 samples, 0.15%)</title><rect x="75.3283%" y="917" width="0.1515%" height="15" fill="rgb(217,179,31)" fg:x="46229" fg:w="93"/><text x="75.5783%" y="927.50"></text></g><g><title>[libc.so.6] (105 samples, 0.17%)</title><rect x="75.4848%" y="901" width="0.1711%" height="15" fill="rgb(230,9,30)" fg:x="46325" fg:w="105"/><text x="75.7348%" y="911.50"></text></g><g><title>[libc.so.6] (93 samples, 0.15%)</title><rect x="75.6559%" y="885" width="0.1515%" height="15" fill="rgb(230,136,20)" fg:x="46430" fg:w="93"/><text x="75.9059%" y="895.50"></text></g><g><title>[libc.so.6] (93 samples, 0.15%)</title><rect x="75.8188%" y="869" width="0.1515%" height="15" fill="rgb(215,210,22)" fg:x="46530" fg:w="93"/><text x="76.0688%" y="879.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (109 samples, 0.18%)</title><rect x="76.1838%" y="853" width="0.1776%" height="15" fill="rgb(218,43,5)" fg:x="46754" fg:w="109"/><text x="76.4338%" y="863.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (27 samples, 0.04%)</title><rect x="76.3174%" y="837" width="0.0440%" height="15" fill="rgb(216,11,5)" fg:x="46836" fg:w="27"/><text x="76.5674%" y="847.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (41 samples, 0.07%)</title><rect x="76.4152%" y="837" width="0.0668%" height="15" fill="rgb(209,82,29)" fg:x="46896" fg:w="41"/><text x="76.6652%" y="847.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (644 samples, 1.05%)</title><rect x="76.4853%" y="837" width="1.0494%" height="15" fill="rgb(244,115,12)" fg:x="46939" fg:w="644"/><text x="76.7353%" y="847.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (628 samples, 1.02%)</title><rect x="76.5113%" y="821" width="1.0233%" height="15" fill="rgb(222,82,18)" fg:x="46955" fg:w="628"/><text x="76.7613%" y="831.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (1,071 samples, 1.75%)</title><rect x="76.3614%" y="853" width="1.7452%" height="15" fill="rgb(249,227,8)" fg:x="46863" fg:w="1071"/><text x="76.6114%" y="863.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (351 samples, 0.57%)</title><rect x="77.5346%" y="837" width="0.5719%" height="15" fill="rgb(253,141,45)" fg:x="47583" fg:w="351"/><text x="77.7846%" y="847.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (306 samples, 0.50%)</title><rect x="77.6080%" y="821" width="0.4986%" height="15" fill="rgb(234,184,4)" fg:x="47628" fg:w="306"/><text x="77.8580%" y="831.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (292 samples, 0.48%)</title><rect x="77.6308%" y="805" width="0.4758%" height="15" fill="rgb(218,194,23)" fg:x="47642" fg:w="292"/><text x="77.8808%" y="815.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (38 samples, 0.06%)</title><rect x="78.0446%" y="789" width="0.0619%" height="15" fill="rgb(235,66,41)" fg:x="47896" fg:w="38"/><text x="78.2946%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (2,583 samples, 4.21%)</title><rect x="75.9703%" y="869" width="4.2089%" height="15" fill="rgb(245,217,1)" fg:x="46623" fg:w="2583"/><text x="76.2203%" y="879.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::data_end (1,272 samples, 2.07%)</title><rect x="78.1066%" y="853" width="2.0727%" height="15" fill="rgb(229,91,1)" fg:x="47934" fg:w="1272"/><text x="78.3566%" y="863.50">h..</text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (7 samples, 0.01%)</title><rect x="80.1678%" y="837" width="0.0114%" height="15" fill="rgb(207,101,30)" fg:x="49199" fg:w="7"/><text x="80.4178%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (2,684 samples, 4.37%)</title><rect x="75.8074%" y="885" width="4.3735%" height="15" fill="rgb(223,82,49)" fg:x="46523" fg:w="2684"/><text x="76.0574%" y="895.50">hashb..</text></g><g><title>aes_grinder::algo::Algo::get_all_variables (43,702 samples, 71.21%)</title><rect x="8.9718%" y="949" width="71.2107%" height="15" fill="rgb(218,167,17)" fg:x="5506" fg:w="43702"/><text x="9.2218%" y="959.50">aes_grinder::algo::Algo::get_all_variables</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (3,037 samples, 4.95%)</title><rect x="75.2338%" y="933" width="4.9487%" height="15" fill="rgb(208,103,14)" fg:x="46171" fg:w="3037"/><text x="75.4838%" y="943.50">std::c..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (2,886 samples, 4.70%)</title><rect x="75.4799%" y="917" width="4.7026%" height="15" fill="rgb(238,20,8)" fg:x="46322" fg:w="2886"/><text x="75.7299%" y="927.50">hashb..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (2,778 samples, 4.53%)</title><rect x="75.6559%" y="901" width="4.5266%" height="15" fill="rgb(218,80,54)" fg:x="46430" fg:w="2778"/><text x="75.9059%" y="911.50">hashb..</text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (81 samples, 0.13%)</title><rect x="80.9679%" y="853" width="0.1320%" height="15" fill="rgb(240,144,17)" fg:x="49690" fg:w="81"/><text x="81.2179%" y="863.50"></text></g><g><title>[libc.so.6] (77 samples, 0.13%)</title><rect x="80.9744%" y="837" width="0.1255%" height="15" fill="rgb(245,27,50)" fg:x="49694" fg:w="77"/><text x="81.2244%" y="847.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::FromResidual&gt;::from_residual (11 samples, 0.02%)</title><rect x="83.1872%" y="805" width="0.0179%" height="15" fill="rgb(251,51,7)" fg:x="51052" fg:w="11"/><text x="83.4372%" y="815.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (182 samples, 0.30%)</title><rect x="83.2051%" y="805" width="0.2966%" height="15" fill="rgb(245,217,29)" fg:x="51063" fg:w="182"/><text x="83.4551%" y="815.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (303 samples, 0.49%)</title><rect x="83.8406%" y="789" width="0.4937%" height="15" fill="rgb(221,176,29)" fg:x="51453" fg:w="303"/><text x="84.0906%" y="799.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,341 samples, 2.19%)</title><rect x="82.5306%" y="821" width="2.1851%" height="15" fill="rgb(212,180,24)" fg:x="50649" fg:w="1341"/><text x="82.7806%" y="831.50">&lt;..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (745 samples, 1.21%)</title><rect x="83.5017%" y="805" width="1.2139%" height="15" fill="rgb(254,24,2)" fg:x="51245" fg:w="745"/><text x="83.7517%" y="815.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (234 samples, 0.38%)</title><rect x="84.3344%" y="789" width="0.3813%" height="15" fill="rgb(230,100,2)" fg:x="51756" fg:w="234"/><text x="84.5844%" y="799.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (60 samples, 0.10%)</title><rect x="84.6179%" y="773" width="0.0978%" height="15" fill="rgb(219,142,25)" fg:x="51930" fg:w="60"/><text x="84.8679%" y="783.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (25 samples, 0.04%)</title><rect x="84.7157%" y="821" width="0.0407%" height="15" fill="rgb(240,73,43)" fg:x="51990" fg:w="25"/><text x="84.9657%" y="831.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (669 samples, 1.09%)</title><rect x="84.7564%" y="821" width="1.0901%" height="15" fill="rgb(214,114,15)" fg:x="52015" fg:w="669"/><text x="85.0064%" y="831.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (209 samples, 0.34%)</title><rect x="85.5059%" y="805" width="0.3406%" height="15" fill="rgb(207,130,4)" fg:x="52475" fg:w="209"/><text x="85.7559%" y="815.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (67 samples, 0.11%)</title><rect x="85.7373%" y="789" width="0.1092%" height="15" fill="rgb(221,25,40)" fg:x="52617" fg:w="67"/><text x="85.9873%" y="799.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,915 samples, 4.75%)</title><rect x="81.0999%" y="853" width="4.7499%" height="15" fill="rgb(241,184,7)" fg:x="49771" fg:w="2915"/><text x="81.3499%" y="863.50">&lt;hashb..</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (2,498 samples, 4.07%)</title><rect x="81.7794%" y="837" width="4.0704%" height="15" fill="rgb(235,159,4)" fg:x="50188" fg:w="2498"/><text x="82.0294%" y="847.50">hash..</text></g><g><title>[libc.so.6] (93 samples, 0.15%)</title><rect x="85.8498%" y="853" width="0.1515%" height="15" fill="rgb(214,87,48)" fg:x="52686" fg:w="93"/><text x="86.0998%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (22 samples, 0.04%)</title><rect x="86.4641%" y="757" width="0.0358%" height="15" fill="rgb(246,198,24)" fg:x="53063" fg:w="22"/><text x="86.7141%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (22 samples, 0.04%)</title><rect x="86.4641%" y="741" width="0.0358%" height="15" fill="rgb(209,66,40)" fg:x="53063" fg:w="22"/><text x="86.7141%" y="751.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (22 samples, 0.04%)</title><rect x="86.4641%" y="725" width="0.0358%" height="15" fill="rgb(233,147,39)" fg:x="53063" fg:w="22"/><text x="86.7141%" y="735.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (22 samples, 0.04%)</title><rect x="86.4641%" y="709" width="0.0358%" height="15" fill="rgb(231,145,52)" fg:x="53063" fg:w="22"/><text x="86.7141%" y="719.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (229 samples, 0.37%)</title><rect x="86.4999%" y="741" width="0.3731%" height="15" fill="rgb(206,20,26)" fg:x="53085" fg:w="229"/><text x="86.7499%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (260 samples, 0.42%)</title><rect x="86.4641%" y="773" width="0.4237%" height="15" fill="rgb(238,220,4)" fg:x="53063" fg:w="260"/><text x="86.7141%" y="783.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (238 samples, 0.39%)</title><rect x="86.4999%" y="757" width="0.3878%" height="15" fill="rgb(252,195,42)" fg:x="53085" fg:w="238"/><text x="86.7499%" y="767.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::cast (9 samples, 0.01%)</title><rect x="86.8731%" y="741" width="0.0147%" height="15" fill="rgb(209,10,6)" fg:x="53314" fg:w="9"/><text x="87.1231%" y="751.50"></text></g><g><title>__rdl_dealloc (24 samples, 0.04%)</title><rect x="87.6796%" y="709" width="0.0391%" height="15" fill="rgb(229,3,52)" fg:x="53809" fg:w="24"/><text x="87.9296%" y="719.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (24 samples, 0.04%)</title><rect x="87.6796%" y="693" width="0.0391%" height="15" fill="rgb(253,49,37)" fg:x="53809" fg:w="24"/><text x="87.9296%" y="703.50"></text></g><g><title>__rust_dealloc (40 samples, 0.07%)</title><rect x="87.7188%" y="709" width="0.0652%" height="15" fill="rgb(240,103,49)" fg:x="53833" fg:w="40"/><text x="87.9688%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (801 samples, 1.31%)</title><rect x="87.3831%" y="741" width="1.3052%" height="15" fill="rgb(250,182,30)" fg:x="53627" fg:w="801"/><text x="87.6331%" y="751.50"></text></g><g><title>alloc::alloc::dealloc (620 samples, 1.01%)</title><rect x="87.6780%" y="725" width="1.0103%" height="15" fill="rgb(248,8,30)" fg:x="53808" fg:w="620"/><text x="87.9280%" y="735.50"></text></g><g><title>cfree (555 samples, 0.90%)</title><rect x="87.7839%" y="709" width="0.9044%" height="15" fill="rgb(237,120,30)" fg:x="53873" fg:w="555"/><text x="88.0339%" y="719.50"></text></g><g><title>[libc.so.6] (476 samples, 0.78%)</title><rect x="87.9127%" y="693" width="0.7756%" height="15" fill="rgb(221,146,34)" fg:x="53952" fg:w="476"/><text x="88.1627%" y="703.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (160 samples, 0.26%)</title><rect x="89.3173%" y="725" width="0.2607%" height="15" fill="rgb(242,55,13)" fg:x="54814" fg:w="160"/><text x="89.5673%" y="735.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (160 samples, 0.26%)</title><rect x="89.3173%" y="709" width="0.2607%" height="15" fill="rgb(242,112,31)" fg:x="54814" fg:w="160"/><text x="89.5673%" y="719.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (160 samples, 0.26%)</title><rect x="89.3173%" y="693" width="0.2607%" height="15" fill="rgb(249,192,27)" fg:x="54814" fg:w="160"/><text x="89.5673%" y="703.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (160 samples, 0.26%)</title><rect x="89.3173%" y="677" width="0.2607%" height="15" fill="rgb(208,204,44)" fg:x="54814" fg:w="160"/><text x="89.5673%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (20 samples, 0.03%)</title><rect x="89.5829%" y="725" width="0.0326%" height="15" fill="rgb(208,93,54)" fg:x="54977" fg:w="20"/><text x="89.8329%" y="735.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (121 samples, 0.20%)</title><rect x="89.6154%" y="709" width="0.1972%" height="15" fill="rgb(242,1,31)" fg:x="54997" fg:w="121"/><text x="89.8654%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (2,336 samples, 3.81%)</title><rect x="86.0127%" y="837" width="3.8064%" height="15" fill="rgb(241,83,25)" fg:x="52786" fg:w="2336"/><text x="86.2627%" y="847.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,())&gt; (2,176 samples, 3.55%)</title><rect x="86.2734%" y="821" width="3.5457%" height="15" fill="rgb(205,169,50)" fg:x="52946" fg:w="2176"/><text x="86.5234%" y="831.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2,162 samples, 3.52%)</title><rect x="86.2962%" y="805" width="3.5229%" height="15" fill="rgb(239,186,37)" fg:x="52960" fg:w="2162"/><text x="86.5462%" y="815.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2,103 samples, 3.43%)</title><rect x="86.3924%" y="789" width="3.4268%" height="15" fill="rgb(205,221,10)" fg:x="53019" fg:w="2103"/><text x="86.6424%" y="799.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,799 samples, 2.93%)</title><rect x="86.8877%" y="773" width="2.9314%" height="15" fill="rgb(218,196,15)" fg:x="53323" fg:w="1799"/><text x="87.1377%" y="783.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,699 samples, 2.77%)</title><rect x="87.0507%" y="757" width="2.7685%" height="15" fill="rgb(218,196,35)" fg:x="53423" fg:w="1699"/><text x="87.3007%" y="767.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (694 samples, 1.13%)</title><rect x="88.6883%" y="741" width="1.1308%" height="15" fill="rgb(233,63,24)" fg:x="54428" fg:w="694"/><text x="88.9383%" y="751.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::cast (125 samples, 0.20%)</title><rect x="89.6154%" y="725" width="0.2037%" height="15" fill="rgb(225,8,4)" fg:x="54997" fg:w="125"/><text x="89.8654%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (189 samples, 0.31%)</title><rect x="89.9690%" y="821" width="0.3080%" height="15" fill="rgb(234,105,35)" fg:x="55214" fg:w="189"/><text x="90.2190%" y="831.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (148 samples, 0.24%)</title><rect x="90.0358%" y="805" width="0.2412%" height="15" fill="rgb(236,21,32)" fg:x="55255" fg:w="148"/><text x="90.2858%" y="815.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2,627 samples, 4.28%)</title><rect x="86.0013%" y="853" width="4.2806%" height="15" fill="rgb(228,109,6)" fg:x="52779" fg:w="2627"/><text x="86.2513%" y="863.50">hashb..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (284 samples, 0.46%)</title><rect x="89.8191%" y="837" width="0.4628%" height="15" fill="rgb(229,215,31)" fg:x="55122" fg:w="284"/><text x="90.0691%" y="847.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (142 samples, 0.23%)</title><rect x="90.4872%" y="837" width="0.2314%" height="15" fill="rgb(221,52,54)" fg:x="55532" fg:w="142"/><text x="90.7372%" y="847.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (30 samples, 0.05%)</title><rect x="90.6697%" y="821" width="0.0489%" height="15" fill="rgb(252,129,43)" fg:x="55644" fg:w="30"/><text x="90.9197%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (46 samples, 0.07%)</title><rect x="90.7935%" y="821" width="0.0750%" height="15" fill="rgb(248,183,27)" fg:x="55720" fg:w="46"/><text x="91.0435%" y="831.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (18 samples, 0.03%)</title><rect x="90.8734%" y="821" width="0.0293%" height="15" fill="rgb(250,0,22)" fg:x="55769" fg:w="18"/><text x="91.1234%" y="831.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (8 samples, 0.01%)</title><rect x="91.3573%" y="773" width="0.0130%" height="15" fill="rgb(213,166,10)" fg:x="56066" fg:w="8"/><text x="91.6073%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (716 samples, 1.17%)</title><rect x="90.2819%" y="853" width="1.1667%" height="15" fill="rgb(207,163,36)" fg:x="55406" fg:w="716"/><text x="90.5319%" y="863.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (448 samples, 0.73%)</title><rect x="90.7186%" y="837" width="0.7300%" height="15" fill="rgb(208,122,22)" fg:x="55674" fg:w="448"/><text x="90.9686%" y="847.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (335 samples, 0.55%)</title><rect x="90.9027%" y="821" width="0.5459%" height="15" fill="rgb(207,104,49)" fg:x="55787" fg:w="335"/><text x="91.1527%" y="831.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (310 samples, 0.51%)</title><rect x="90.9435%" y="805" width="0.5051%" height="15" fill="rgb(248,211,50)" fg:x="55812" fg:w="310"/><text x="91.1935%" y="815.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (298 samples, 0.49%)</title><rect x="90.9630%" y="789" width="0.4856%" height="15" fill="rgb(217,13,45)" fg:x="55824" fg:w="298"/><text x="91.2130%" y="799.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (48 samples, 0.08%)</title><rect x="91.3704%" y="773" width="0.0782%" height="15" fill="rgb(211,216,49)" fg:x="56074" fg:w="48"/><text x="91.6204%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (6,762 samples, 11.02%)</title><rect x="80.4334%" y="869" width="11.0184%" height="15" fill="rgb(221,58,53)" fg:x="49362" fg:w="6762"/><text x="80.6834%" y="879.50">hashbrown::raw::..</text></g><g><title>__rust_dealloc (13 samples, 0.02%)</title><rect x="91.5855%" y="805" width="0.0212%" height="15" fill="rgb(220,112,41)" fg:x="56206" fg:w="13"/><text x="91.8355%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (111 samples, 0.18%)</title><rect x="91.5170%" y="837" width="0.1809%" height="15" fill="rgb(236,38,28)" fg:x="56164" fg:w="111"/><text x="91.7670%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (79 samples, 0.13%)</title><rect x="91.5692%" y="821" width="0.1287%" height="15" fill="rgb(227,195,22)" fg:x="56196" fg:w="79"/><text x="91.8192%" y="831.50"></text></g><g><title>cfree (56 samples, 0.09%)</title><rect x="91.6066%" y="805" width="0.0912%" height="15" fill="rgb(214,55,33)" fg:x="56219" fg:w="56"/><text x="91.8566%" y="815.50"></text></g><g><title>[libc.so.6] (47 samples, 0.08%)</title><rect x="91.6213%" y="789" width="0.0766%" height="15" fill="rgb(248,80,13)" fg:x="56228" fg:w="47"/><text x="91.8713%" y="799.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (8 samples, 0.01%)</title><rect x="91.9146%" y="821" width="0.0130%" height="15" fill="rgb(238,52,6)" fg:x="56408" fg:w="8"/><text x="92.1646%" y="831.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (80 samples, 0.13%)</title><rect x="92.1818%" y="805" width="0.1304%" height="15" fill="rgb(224,198,47)" fg:x="56572" fg:w="80"/><text x="92.4318%" y="815.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (26 samples, 0.04%)</title><rect x="92.3122%" y="805" width="0.0424%" height="15" fill="rgb(233,171,20)" fg:x="56652" fg:w="26"/><text x="92.5622%" y="815.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (159 samples, 0.26%)</title><rect x="92.3546%" y="805" width="0.2591%" height="15" fill="rgb(241,30,25)" fg:x="56678" fg:w="159"/><text x="92.6046%" y="815.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (22 samples, 0.04%)</title><rect x="92.5778%" y="789" width="0.0358%" height="15" fill="rgb(207,171,38)" fg:x="56815" fg:w="22"/><text x="92.8278%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;alloc::string::String&gt;&gt; (7,704 samples, 12.55%)</title><rect x="80.1825%" y="949" width="12.5534%" height="15" fill="rgb(234,70,1)" fg:x="49208" fg:w="7704"/><text x="80.4325%" y="959.50">core::ptr::drop_in_..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;alloc::string::String,std::collections::hash::map::RandomState&gt;&gt; (7,665 samples, 12.49%)</title><rect x="80.2460%" y="933" width="12.4898%" height="15" fill="rgb(232,178,18)" fg:x="49247" fg:w="7665"/><text x="80.4960%" y="943.50">core::ptr::drop_in_..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,(),std::collections::hash::map::RandomState&gt;&gt; (7,641 samples, 12.45%)</title><rect x="80.2852%" y="917" width="12.4507%" height="15" fill="rgb(241,78,40)" fg:x="49271" fg:w="7641"/><text x="80.5352%" y="927.50">core::ptr::drop_in_..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,())&gt;&gt; (7,630 samples, 12.43%)</title><rect x="80.3031%" y="901" width="12.4328%" height="15" fill="rgb(222,35,25)" fg:x="49282" fg:w="7630"/><text x="80.5531%" y="911.50">core::ptr::drop_in_..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,610 samples, 12.40%)</title><rect x="80.3357%" y="885" width="12.4002%" height="15" fill="rgb(207,92,16)" fg:x="49302" fg:w="7610"/><text x="80.5857%" y="895.50">&lt;hashbrown::raw::Ra..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (788 samples, 1.28%)</title><rect x="91.4518%" y="869" width="1.2840%" height="15" fill="rgb(216,59,51)" fg:x="56124" fg:w="788"/><text x="91.7018%" y="879.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (781 samples, 1.27%)</title><rect x="91.4633%" y="853" width="1.2726%" height="15" fill="rgb(213,80,28)" fg:x="56131" fg:w="781"/><text x="91.7133%" y="863.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::allocation_info (637 samples, 1.04%)</title><rect x="91.6979%" y="837" width="1.0380%" height="15" fill="rgb(220,93,7)" fg:x="56275" fg:w="637"/><text x="91.9479%" y="847.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (495 samples, 0.81%)</title><rect x="91.9293%" y="821" width="0.8066%" height="15" fill="rgb(225,24,44)" fg:x="56417" fg:w="495"/><text x="92.1793%" y="831.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (75 samples, 0.12%)</title><rect x="92.6137%" y="805" width="0.1222%" height="15" fill="rgb(243,74,40)" fg:x="56837" fg:w="75"/><text x="92.8637%" y="815.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (25 samples, 0.04%)</title><rect x="92.6951%" y="789" width="0.0407%" height="15" fill="rgb(228,39,7)" fg:x="56887" fg:w="25"/><text x="92.9451%" y="799.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (13 samples, 0.02%)</title><rect x="92.9852%" y="901" width="0.0212%" height="15" fill="rgb(227,79,8)" fg:x="57065" fg:w="13"/><text x="93.2352%" y="911.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (10 samples, 0.02%)</title><rect x="93.4284%" y="789" width="0.0163%" height="15" fill="rgb(236,58,11)" fg:x="57337" fg:w="10"/><text x="93.6784%" y="799.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (10 samples, 0.02%)</title><rect x="93.4626%" y="773" width="0.0163%" height="15" fill="rgb(249,63,35)" fg:x="57358" fg:w="10"/><text x="93.7126%" y="783.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (37 samples, 0.06%)</title><rect x="93.4447%" y="789" width="0.0603%" height="15" fill="rgb(252,114,16)" fg:x="57347" fg:w="37"/><text x="93.6947%" y="799.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (16 samples, 0.03%)</title><rect x="93.4789%" y="773" width="0.0261%" height="15" fill="rgb(254,151,24)" fg:x="57368" fg:w="16"/><text x="93.7289%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (119 samples, 0.19%)</title><rect x="93.3160%" y="805" width="0.1939%" height="15" fill="rgb(253,54,39)" fg:x="57268" fg:w="119"/><text x="93.5660%" y="815.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (268 samples, 0.44%)</title><rect x="93.1856%" y="837" width="0.4367%" height="15" fill="rgb(243,25,45)" fg:x="57188" fg:w="268"/><text x="93.4356%" y="847.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (243 samples, 0.40%)</title><rect x="93.2263%" y="821" width="0.3960%" height="15" fill="rgb(234,134,9)" fg:x="57213" fg:w="243"/><text x="93.4763%" y="831.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (68 samples, 0.11%)</title><rect x="93.5115%" y="805" width="0.1108%" height="15" fill="rgb(227,166,31)" fg:x="57388" fg:w="68"/><text x="93.7615%" y="815.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (9 samples, 0.01%)</title><rect x="93.6076%" y="789" width="0.0147%" height="15" fill="rgb(245,143,41)" fg:x="57447" fg:w="9"/><text x="93.8576%" y="799.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (412 samples, 0.67%)</title><rect x="93.0064%" y="901" width="0.6713%" height="15" fill="rgb(238,181,32)" fg:x="57078" fg:w="412"/><text x="93.2564%" y="911.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (412 samples, 0.67%)</title><rect x="93.0064%" y="885" width="0.6713%" height="15" fill="rgb(224,113,18)" fg:x="57078" fg:w="412"/><text x="93.2564%" y="895.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (412 samples, 0.67%)</title><rect x="93.0064%" y="869" width="0.6713%" height="15" fill="rgb(240,229,28)" fg:x="57078" fg:w="412"/><text x="93.2564%" y="879.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (376 samples, 0.61%)</title><rect x="93.0650%" y="853" width="0.6127%" height="15" fill="rgb(250,185,3)" fg:x="57114" fg:w="376"/><text x="93.3150%" y="863.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (34 samples, 0.06%)</title><rect x="93.6223%" y="837" width="0.0554%" height="15" fill="rgb(212,59,25)" fg:x="57456" fg:w="34"/><text x="93.8723%" y="847.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (13 samples, 0.02%)</title><rect x="93.6565%" y="821" width="0.0212%" height="15" fill="rgb(221,87,20)" fg:x="57477" fg:w="13"/><text x="93.9065%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (8 samples, 0.01%)</title><rect x="93.7282%" y="821" width="0.0130%" height="15" fill="rgb(213,74,28)" fg:x="57521" fg:w="8"/><text x="93.9782%" y="831.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (102 samples, 0.17%)</title><rect x="93.9205%" y="725" width="0.1662%" height="15" fill="rgb(224,132,34)" fg:x="57639" fg:w="102"/><text x="94.1705%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (524 samples, 0.85%)</title><rect x="93.8211%" y="773" width="0.8538%" height="15" fill="rgb(222,101,24)" fg:x="57578" fg:w="524"/><text x="94.0711%" y="783.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (521 samples, 0.85%)</title><rect x="93.8260%" y="757" width="0.8489%" height="15" fill="rgb(254,142,4)" fg:x="57581" fg:w="521"/><text x="94.0760%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (521 samples, 0.85%)</title><rect x="93.8260%" y="741" width="0.8489%" height="15" fill="rgb(230,229,49)" fg:x="57581" fg:w="521"/><text x="94.0760%" y="751.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (361 samples, 0.59%)</title><rect x="94.0867%" y="725" width="0.5882%" height="15" fill="rgb(238,70,47)" fg:x="57741" fg:w="361"/><text x="94.3367%" y="735.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (22 samples, 0.04%)</title><rect x="94.6391%" y="709" width="0.0358%" height="15" fill="rgb(231,160,17)" fg:x="58080" fg:w="22"/><text x="94.8891%" y="719.50"></text></g><g><title>[libc.so.6] (66 samples, 0.11%)</title><rect x="94.6847%" y="757" width="0.1075%" height="15" fill="rgb(218,68,53)" fg:x="58108" fg:w="66"/><text x="94.9347%" y="767.50"></text></g><g><title>[libc.so.6] (73 samples, 0.12%)</title><rect x="94.7955%" y="741" width="0.1190%" height="15" fill="rgb(236,111,10)" fg:x="58176" fg:w="73"/><text x="95.0455%" y="751.50"></text></g><g><title>[libc.so.6] (111 samples, 0.18%)</title><rect x="94.9210%" y="725" width="0.1809%" height="15" fill="rgb(224,34,41)" fg:x="58253" fg:w="111"/><text x="95.1710%" y="735.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (119 samples, 0.19%)</title><rect x="94.9145%" y="741" width="0.1939%" height="15" fill="rgb(241,118,19)" fg:x="58249" fg:w="119"/><text x="95.1645%" y="751.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (267 samples, 0.44%)</title><rect x="94.6749%" y="773" width="0.4351%" height="15" fill="rgb(238,129,25)" fg:x="58102" fg:w="267"/><text x="94.9249%" y="783.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (195 samples, 0.32%)</title><rect x="94.7922%" y="757" width="0.3177%" height="15" fill="rgb(238,22,31)" fg:x="58174" fg:w="195"/><text x="95.0422%" y="767.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (117 samples, 0.19%)</title><rect x="95.3072%" y="661" width="0.1906%" height="15" fill="rgb(222,174,48)" fg:x="58490" fg:w="117"/><text x="95.5572%" y="671.50"></text></g><g><title>core::hash::sip::u8to64_le (7 samples, 0.01%)</title><rect x="95.4978%" y="661" width="0.0114%" height="15" fill="rgb(206,152,40)" fg:x="58607" fg:w="7"/><text x="95.7478%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (243 samples, 0.40%)</title><rect x="95.1263%" y="677" width="0.3960%" height="15" fill="rgb(218,99,54)" fg:x="58379" fg:w="243"/><text x="95.3763%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.01%)</title><rect x="95.5092%" y="661" width="0.0130%" height="15" fill="rgb(220,174,26)" fg:x="58614" fg:w="8"/><text x="95.7592%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (1,177 samples, 1.92%)</title><rect x="93.7787%" y="805" width="1.9179%" height="15" fill="rgb(245,116,9)" fg:x="57552" fg:w="1177"/><text x="94.0287%" y="815.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (1,177 samples, 1.92%)</title><rect x="93.7787%" y="789" width="1.9179%" height="15" fill="rgb(209,72,35)" fg:x="57552" fg:w="1177"/><text x="94.0287%" y="799.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (360 samples, 0.59%)</title><rect x="95.1100%" y="773" width="0.5866%" height="15" fill="rgb(226,126,21)" fg:x="58369" fg:w="360"/><text x="95.3600%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (355 samples, 0.58%)</title><rect x="95.1181%" y="757" width="0.5785%" height="15" fill="rgb(227,192,1)" fg:x="58374" fg:w="355"/><text x="95.3681%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (354 samples, 0.58%)</title><rect x="95.1198%" y="741" width="0.5768%" height="15" fill="rgb(237,180,29)" fg:x="58375" fg:w="354"/><text x="95.3698%" y="751.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (354 samples, 0.58%)</title><rect x="95.1198%" y="725" width="0.5768%" height="15" fill="rgb(230,197,35)" fg:x="58375" fg:w="354"/><text x="95.3698%" y="735.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (351 samples, 0.57%)</title><rect x="95.1247%" y="709" width="0.5719%" height="15" fill="rgb(246,193,31)" fg:x="58378" fg:w="351"/><text x="95.3747%" y="719.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (350 samples, 0.57%)</title><rect x="95.1263%" y="693" width="0.5703%" height="15" fill="rgb(241,36,4)" fg:x="58379" fg:w="350"/><text x="95.3763%" y="703.50"></text></g><g><title>core::hash::Hasher::write_u8 (107 samples, 0.17%)</title><rect x="95.5222%" y="677" width="0.1744%" height="15" fill="rgb(241,130,17)" fg:x="58622" fg:w="107"/><text x="95.7722%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (107 samples, 0.17%)</title><rect x="95.5222%" y="661" width="0.1744%" height="15" fill="rgb(206,137,32)" fg:x="58622" fg:w="107"/><text x="95.7722%" y="671.50"></text></g><g><title>core::hash::sip::u8to64_le (57 samples, 0.09%)</title><rect x="95.6037%" y="645" width="0.0929%" height="15" fill="rgb(237,228,51)" fg:x="58672" fg:w="57"/><text x="95.8537%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (36 samples, 0.06%)</title><rect x="95.7764%" y="773" width="0.0587%" height="15" fill="rgb(243,6,42)" fg:x="58778" fg:w="36"/><text x="96.0264%" y="783.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (36 samples, 0.06%)</title><rect x="95.7764%" y="757" width="0.0587%" height="15" fill="rgb(251,74,28)" fg:x="58778" fg:w="36"/><text x="96.0264%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (81 samples, 0.13%)</title><rect x="96.0926%" y="757" width="0.1320%" height="15" fill="rgb(218,20,49)" fg:x="58972" fg:w="81"/><text x="96.3426%" y="767.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (12 samples, 0.02%)</title><rect x="96.3060%" y="741" width="0.0196%" height="15" fill="rgb(238,28,14)" fg:x="59103" fg:w="12"/><text x="96.5560%" y="751.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (31 samples, 0.05%)</title><rect x="96.3549%" y="725" width="0.0505%" height="15" fill="rgb(229,40,46)" fg:x="59133" fg:w="31"/><text x="96.6049%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (127 samples, 0.21%)</title><rect x="96.2245%" y="757" width="0.2069%" height="15" fill="rgb(244,195,20)" fg:x="59053" fg:w="127"/><text x="96.4745%" y="767.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (65 samples, 0.11%)</title><rect x="96.3256%" y="741" width="0.1059%" height="15" fill="rgb(253,56,35)" fg:x="59115" fg:w="65"/><text x="96.5756%" y="751.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (16 samples, 0.03%)</title><rect x="96.4054%" y="725" width="0.0261%" height="15" fill="rgb(210,149,44)" fg:x="59164" fg:w="16"/><text x="96.6554%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (16 samples, 0.03%)</title><rect x="96.5390%" y="645" width="0.0261%" height="15" fill="rgb(240,135,12)" fg:x="59246" fg:w="16"/><text x="96.7890%" y="655.50"></text></g><g><title>core::slice::raw::from_raw_parts (15 samples, 0.02%)</title><rect x="96.5407%" y="629" width="0.0244%" height="15" fill="rgb(251,24,50)" fg:x="59247" fg:w="15"/><text x="96.7907%" y="639.50"></text></g><g><title>core::ptr::slice_from_raw_parts (15 samples, 0.02%)</title><rect x="96.5407%" y="613" width="0.0244%" height="15" fill="rgb(243,200,47)" fg:x="59247" fg:w="15"/><text x="96.7907%" y="623.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (15 samples, 0.02%)</title><rect x="96.5407%" y="597" width="0.0244%" height="15" fill="rgb(224,166,26)" fg:x="59247" fg:w="15"/><text x="96.7907%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (34 samples, 0.06%)</title><rect x="96.5195%" y="661" width="0.0554%" height="15" fill="rgb(233,0,47)" fg:x="59234" fg:w="34"/><text x="96.7695%" y="671.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (114 samples, 0.19%)</title><rect x="96.4543%" y="741" width="0.1858%" height="15" fill="rgb(253,80,5)" fg:x="59194" fg:w="114"/><text x="96.7043%" y="751.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (112 samples, 0.18%)</title><rect x="96.4576%" y="725" width="0.1825%" height="15" fill="rgb(214,133,25)" fg:x="59196" fg:w="112"/><text x="96.7076%" y="735.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (100 samples, 0.16%)</title><rect x="96.4771%" y="709" width="0.1629%" height="15" fill="rgb(209,27,14)" fg:x="59208" fg:w="100"/><text x="96.7271%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (91 samples, 0.15%)</title><rect x="96.4918%" y="693" width="0.1483%" height="15" fill="rgb(219,102,51)" fg:x="59217" fg:w="91"/><text x="96.7418%" y="703.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (85 samples, 0.14%)</title><rect x="96.5015%" y="677" width="0.1385%" height="15" fill="rgb(237,18,16)" fg:x="59223" fg:w="85"/><text x="96.7515%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (40 samples, 0.07%)</title><rect x="96.5749%" y="661" width="0.0652%" height="15" fill="rgb(241,85,17)" fg:x="59268" fg:w="40"/><text x="96.8249%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (40 samples, 0.07%)</title><rect x="96.5749%" y="645" width="0.0652%" height="15" fill="rgb(236,90,42)" fg:x="59268" fg:w="40"/><text x="96.8249%" y="655.50"></text></g><g><title>[libc.so.6] (18 samples, 0.03%)</title><rect x="96.6107%" y="629" width="0.0293%" height="15" fill="rgb(249,57,21)" fg:x="59290" fg:w="18"/><text x="96.8607%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (7 samples, 0.01%)</title><rect x="96.6401%" y="741" width="0.0114%" height="15" fill="rgb(243,12,36)" fg:x="59308" fg:w="7"/><text x="96.8901%" y="751.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (7 samples, 0.01%)</title><rect x="96.6401%" y="725" width="0.0114%" height="15" fill="rgb(253,128,47)" fg:x="59308" fg:w="7"/><text x="96.8901%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (161 samples, 0.26%)</title><rect x="96.4315%" y="757" width="0.2623%" height="15" fill="rgb(207,33,20)" fg:x="59180" fg:w="161"/><text x="96.6815%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (26 samples, 0.04%)</title><rect x="96.6515%" y="741" width="0.0424%" height="15" fill="rgb(233,215,35)" fg:x="59315" fg:w="26"/><text x="96.9015%" y="751.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (26 samples, 0.04%)</title><rect x="96.6515%" y="725" width="0.0424%" height="15" fill="rgb(249,188,52)" fg:x="59315" fg:w="26"/><text x="96.9015%" y="735.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (122 samples, 0.20%)</title><rect x="96.7052%" y="757" width="0.1988%" height="15" fill="rgb(225,12,32)" fg:x="59348" fg:w="122"/><text x="96.9552%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (103 samples, 0.17%)</title><rect x="96.7362%" y="741" width="0.1678%" height="15" fill="rgb(247,98,14)" fg:x="59367" fg:w="103"/><text x="96.9862%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.02%)</title><rect x="96.8877%" y="725" width="0.0163%" height="15" fill="rgb(247,219,48)" fg:x="59460" fg:w="10"/><text x="97.1377%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (62 samples, 0.10%)</title><rect x="97.0344%" y="741" width="0.1010%" height="15" fill="rgb(253,60,48)" fg:x="59550" fg:w="62"/><text x="97.2844%" y="751.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (28 samples, 0.05%)</title><rect x="97.0898%" y="725" width="0.0456%" height="15" fill="rgb(245,15,52)" fg:x="59584" fg:w="28"/><text x="97.3398%" y="735.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (7 samples, 0.01%)</title><rect x="97.3440%" y="725" width="0.0114%" height="15" fill="rgb(220,133,28)" fg:x="59740" fg:w="7"/><text x="97.5940%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (148 samples, 0.24%)</title><rect x="97.1354%" y="741" width="0.2412%" height="15" fill="rgb(217,180,4)" fg:x="59612" fg:w="148"/><text x="97.3854%" y="751.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (13 samples, 0.02%)</title><rect x="97.3554%" y="725" width="0.0212%" height="15" fill="rgb(251,24,1)" fg:x="59747" fg:w="13"/><text x="97.6054%" y="735.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (378 samples, 0.62%)</title><rect x="96.9040%" y="757" width="0.6159%" height="15" fill="rgb(212,185,49)" fg:x="59470" fg:w="378"/><text x="97.1540%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (88 samples, 0.14%)</title><rect x="97.3766%" y="741" width="0.1434%" height="15" fill="rgb(215,175,22)" fg:x="59760" fg:w="88"/><text x="97.6266%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (87 samples, 0.14%)</title><rect x="97.3782%" y="725" width="0.1418%" height="15" fill="rgb(250,205,14)" fg:x="59761" fg:w="87"/><text x="97.6282%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (35 samples, 0.06%)</title><rect x="97.6031%" y="725" width="0.0570%" height="15" fill="rgb(225,211,22)" fg:x="59899" fg:w="35"/><text x="97.8531%" y="735.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (13 samples, 0.02%)</title><rect x="97.6389%" y="709" width="0.0212%" height="15" fill="rgb(251,179,42)" fg:x="59921" fg:w="13"/><text x="97.8889%" y="719.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (95 samples, 0.15%)</title><rect x="97.6601%" y="725" width="0.1548%" height="15" fill="rgb(208,216,51)" fg:x="59934" fg:w="95"/><text x="97.9101%" y="735.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (15 samples, 0.02%)</title><rect x="97.7905%" y="709" width="0.0244%" height="15" fill="rgb(235,36,11)" fg:x="60014" fg:w="15"/><text x="98.0405%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (3,119 samples, 5.08%)</title><rect x="92.8320%" y="933" width="5.0823%" height="15" fill="rgb(213,189,28)" fg:x="56971" fg:w="3119"/><text x="93.0820%" y="943.50">core::..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,111 samples, 5.07%)</title><rect x="92.8450%" y="917" width="5.0693%" height="15" fill="rgb(227,203,42)" fg:x="56979" fg:w="3111"/><text x="93.0950%" y="927.50">core::..</text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (2,600 samples, 4.24%)</title><rect x="93.6777%" y="901" width="4.2366%" height="15" fill="rgb(244,72,36)" fg:x="57490" fg:w="2600"/><text x="93.9277%" y="911.50">core:..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::is_subset::_{{closure}} (2,576 samples, 4.20%)</title><rect x="93.7168%" y="885" width="4.1975%" height="15" fill="rgb(213,53,17)" fg:x="57514" fg:w="2576"/><text x="93.9668%" y="895.50">std::..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (2,576 samples, 4.20%)</title><rect x="93.7168%" y="869" width="4.1975%" height="15" fill="rgb(207,167,3)" fg:x="57514" fg:w="2576"/><text x="93.9668%" y="879.50">std::..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (2,576 samples, 4.20%)</title><rect x="93.7168%" y="853" width="4.1975%" height="15" fill="rgb(216,98,30)" fg:x="57514" fg:w="2576"/><text x="93.9668%" y="863.50">hashb..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2,573 samples, 4.19%)</title><rect x="93.7217%" y="837" width="4.1926%" height="15" fill="rgb(236,123,15)" fg:x="57517" fg:w="2573"/><text x="93.9717%" y="847.50">hashb..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,561 samples, 4.17%)</title><rect x="93.7412%" y="821" width="4.1730%" height="15" fill="rgb(248,81,50)" fg:x="57529" fg:w="2561"/><text x="93.9912%" y="831.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,361 samples, 2.22%)</title><rect x="95.6966%" y="805" width="2.2177%" height="15" fill="rgb(214,120,4)" fg:x="58729" fg:w="1361"/><text x="95.9466%" y="815.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,340 samples, 2.18%)</title><rect x="95.7308%" y="789" width="2.1835%" height="15" fill="rgb(208,179,34)" fg:x="58750" fg:w="1340"/><text x="95.9808%" y="799.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1,276 samples, 2.08%)</title><rect x="95.8351%" y="773" width="2.0792%" height="15" fill="rgb(227,140,7)" fg:x="58814" fg:w="1276"/><text x="96.0851%" y="783.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (242 samples, 0.39%)</title><rect x="97.5200%" y="757" width="0.3943%" height="15" fill="rgb(214,22,6)" fg:x="59848" fg:w="242"/><text x="97.7700%" y="767.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (229 samples, 0.37%)</title><rect x="97.5411%" y="741" width="0.3731%" height="15" fill="rgb(207,137,27)" fg:x="59861" fg:w="229"/><text x="97.7911%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (61 samples, 0.10%)</title><rect x="97.8149%" y="725" width="0.0994%" height="15" fill="rgb(210,8,46)" fg:x="60029" fg:w="61"/><text x="98.0649%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (60 samples, 0.10%)</title><rect x="97.8165%" y="709" width="0.0978%" height="15" fill="rgb(240,16,54)" fg:x="60030" fg:w="60"/><text x="98.0665%" y="719.50"></text></g><g><title>[libc.so.6] (35 samples, 0.06%)</title><rect x="97.9224%" y="917" width="0.0570%" height="15" fill="rgb(211,209,29)" fg:x="60095" fg:w="35"/><text x="98.1724%" y="927.50"></text></g><g><title>[libc.so.6] (37 samples, 0.06%)</title><rect x="97.9811%" y="901" width="0.0603%" height="15" fill="rgb(226,228,24)" fg:x="60131" fg:w="37"/><text x="98.2311%" y="911.50"></text></g><g><title>[libc.so.6] (32 samples, 0.05%)</title><rect x="98.0414%" y="885" width="0.0521%" height="15" fill="rgb(222,84,9)" fg:x="60168" fg:w="32"/><text x="98.2914%" y="895.50"></text></g><g><title>[libc.so.6] (32 samples, 0.05%)</title><rect x="98.1017%" y="869" width="0.0521%" height="15" fill="rgb(234,203,30)" fg:x="60205" fg:w="32"/><text x="98.3517%" y="879.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (45 samples, 0.07%)</title><rect x="98.2369%" y="853" width="0.0733%" height="15" fill="rgb(238,109,14)" fg:x="60288" fg:w="45"/><text x="98.4869%" y="863.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (14 samples, 0.02%)</title><rect x="98.2874%" y="837" width="0.0228%" height="15" fill="rgb(233,206,34)" fg:x="60319" fg:w="14"/><text x="98.5374%" y="847.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (19 samples, 0.03%)</title><rect x="98.3282%" y="837" width="0.0310%" height="15" fill="rgb(220,167,47)" fg:x="60344" fg:w="19"/><text x="98.5782%" y="847.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (8 samples, 0.01%)</title><rect x="98.3657%" y="837" width="0.0130%" height="15" fill="rgb(238,105,10)" fg:x="60367" fg:w="8"/><text x="98.6157%" y="847.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (181 samples, 0.29%)</title><rect x="98.3102%" y="853" width="0.2949%" height="15" fill="rgb(213,227,17)" fg:x="60333" fg:w="181"/><text x="98.5602%" y="863.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (139 samples, 0.23%)</title><rect x="98.3787%" y="837" width="0.2265%" height="15" fill="rgb(217,132,38)" fg:x="60375" fg:w="139"/><text x="98.6287%" y="847.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (119 samples, 0.19%)</title><rect x="98.4113%" y="821" width="0.1939%" height="15" fill="rgb(242,146,4)" fg:x="60395" fg:w="119"/><text x="98.6613%" y="831.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (115 samples, 0.19%)</title><rect x="98.4178%" y="805" width="0.1874%" height="15" fill="rgb(212,61,9)" fg:x="60399" fg:w="115"/><text x="98.6678%" y="815.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (10 samples, 0.02%)</title><rect x="98.5889%" y="789" width="0.0163%" height="15" fill="rgb(247,126,22)" fg:x="60504" fg:w="10"/><text x="98.8389%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (315 samples, 0.51%)</title><rect x="98.0935%" y="885" width="0.5133%" height="15" fill="rgb(220,196,2)" fg:x="60200" fg:w="315"/><text x="98.3435%" y="895.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (278 samples, 0.45%)</title><rect x="98.1538%" y="869" width="0.4530%" height="15" fill="rgb(208,46,4)" fg:x="60237" fg:w="278"/><text x="98.4038%" y="879.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (428 samples, 0.70%)</title><rect x="97.9143%" y="933" width="0.6974%" height="15" fill="rgb(252,104,46)" fg:x="60090" fg:w="428"/><text x="98.1643%" y="943.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (388 samples, 0.63%)</title><rect x="97.9795%" y="917" width="0.6322%" height="15" fill="rgb(237,152,48)" fg:x="60130" fg:w="388"/><text x="98.2295%" y="927.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (350 samples, 0.57%)</title><rect x="98.0414%" y="901" width="0.5703%" height="15" fill="rgb(221,59,37)" fg:x="60168" fg:w="350"/><text x="98.2914%" y="911.50"></text></g><g><title>aes_grinder::exaustive_search::update_queue (59,908 samples, 97.62%)</title><rect x="0.9989%" y="1061" width="97.6177%" height="15" fill="rgb(209,202,51)" fg:x="613" fg:w="59908"/><text x="1.2489%" y="1071.50">aes_grinder::exaustive_search::update_queue</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::retain (55,613 samples, 90.62%)</title><rect x="7.9974%" y="1045" width="90.6192%" height="15" fill="rgb(228,81,30)" fg:x="4908" fg:w="55613"/><text x="8.2474%" y="1055.50">std::collections::hash::set::HashSet&lt;T,S&gt;::retain</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::retain (55,613 samples, 90.62%)</title><rect x="7.9974%" y="1029" width="90.6192%" height="15" fill="rgb(227,42,39)" fg:x="4908" fg:w="55613"/><text x="8.2474%" y="1039.50">hashbrown::set::HashSet&lt;T,S,A&gt;::retain</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::retain (55,613 samples, 90.62%)</title><rect x="7.9974%" y="1013" width="90.6192%" height="15" fill="rgb(221,26,2)" fg:x="4908" fg:w="55613"/><text x="8.2474%" y="1023.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::retain</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::retain::_{{closure}} (55,341 samples, 90.18%)</title><rect x="8.4406%" y="997" width="90.1760%" height="15" fill="rgb(254,61,31)" fg:x="5180" fg:w="55341"/><text x="8.6906%" y="1007.50">hashbrown::set::HashSet&lt;T,S,A&gt;::retain::_{{closure}}</text></g><g><title>aes_grinder::exaustive_search::update_queue::_{{closure}} (55,325 samples, 90.15%)</title><rect x="8.4667%" y="981" width="90.1499%" height="15" fill="rgb(222,173,38)" fg:x="5196" fg:w="55325"/><text x="8.7167%" y="991.50">aes_grinder::exaustive_search::update_queue::_{{closure}}</text></g><g><title>aes_grinder::algo::Algo::compare1 (55,064 samples, 89.72%)</title><rect x="8.8920%" y="965" width="89.7246%" height="15" fill="rgb(218,50,12)" fg:x="5457" fg:w="55064"/><text x="9.1420%" y="975.50">aes_grinder::algo::Algo::compare1</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::is_subset (3,609 samples, 5.88%)</title><rect x="92.7359%" y="949" width="5.8807%" height="15" fill="rgb(223,88,40)" fg:x="56912" fg:w="3609"/><text x="92.9859%" y="959.50">std::co..</text></g><g><title>core::iter::traits::iterator::Iterator::all (7 samples, 0.01%)</title><rect x="98.6313%" y="661" width="0.0114%" height="15" fill="rgb(237,54,19)" fg:x="60530" fg:w="7"/><text x="98.8813%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (7 samples, 0.01%)</title><rect x="98.6313%" y="645" width="0.0114%" height="15" fill="rgb(251,129,25)" fg:x="60530" fg:w="7"/><text x="98.8813%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (7 samples, 0.01%)</title><rect x="98.6313%" y="629" width="0.0114%" height="15" fill="rgb(238,97,19)" fg:x="60530" fg:w="7"/><text x="98.8813%" y="639.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (7 samples, 0.01%)</title><rect x="98.6313%" y="613" width="0.0114%" height="15" fill="rgb(240,169,18)" fg:x="60530" fg:w="7"/><text x="98.8813%" y="623.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (7 samples, 0.01%)</title><rect x="98.6313%" y="597" width="0.0114%" height="15" fill="rgb(230,187,49)" fg:x="60530" fg:w="7"/><text x="98.8813%" y="607.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (7 samples, 0.01%)</title><rect x="98.6313%" y="581" width="0.0114%" height="15" fill="rgb(209,44,26)" fg:x="60530" fg:w="7"/><text x="98.8813%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (7 samples, 0.01%)</title><rect x="98.6313%" y="565" width="0.0114%" height="15" fill="rgb(244,0,6)" fg:x="60530" fg:w="7"/><text x="98.8813%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (7 samples, 0.01%)</title><rect x="98.6313%" y="549" width="0.0114%" height="15" fill="rgb(248,18,21)" fg:x="60530" fg:w="7"/><text x="98.8813%" y="559.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (12 samples, 0.02%)</title><rect x="98.6296%" y="773" width="0.0196%" height="15" fill="rgb(245,180,19)" fg:x="60529" fg:w="12"/><text x="98.8796%" y="783.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (12 samples, 0.02%)</title><rect x="98.6296%" y="757" width="0.0196%" height="15" fill="rgb(252,118,36)" fg:x="60529" fg:w="12"/><text x="98.8796%" y="767.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (12 samples, 0.02%)</title><rect x="98.6296%" y="741" width="0.0196%" height="15" fill="rgb(210,224,19)" fg:x="60529" fg:w="12"/><text x="98.8796%" y="751.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (12 samples, 0.02%)</title><rect x="98.6296%" y="725" width="0.0196%" height="15" fill="rgb(218,30,24)" fg:x="60529" fg:w="12"/><text x="98.8796%" y="735.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (12 samples, 0.02%)</title><rect x="98.6296%" y="709" width="0.0196%" height="15" fill="rgb(219,75,50)" fg:x="60529" fg:w="12"/><text x="98.8796%" y="719.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::cmp::PartialEq&gt;::eq (12 samples, 0.02%)</title><rect x="98.6296%" y="693" width="0.0196%" height="15" fill="rgb(234,72,50)" fg:x="60529" fg:w="12"/><text x="98.8796%" y="703.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (11 samples, 0.02%)</title><rect x="98.6313%" y="677" width="0.0179%" height="15" fill="rgb(219,100,48)" fg:x="60530" fg:w="11"/><text x="98.8813%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (15 samples, 0.02%)</title><rect x="98.6264%" y="1061" width="0.0244%" height="15" fill="rgb(253,5,41)" fg:x="60527" fg:w="15"/><text x="98.8764%" y="1071.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.02%)</title><rect x="98.6264%" y="1045" width="0.0244%" height="15" fill="rgb(247,181,11)" fg:x="60527" fg:w="15"/><text x="98.8764%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (15 samples, 0.02%)</title><rect x="98.6264%" y="1029" width="0.0244%" height="15" fill="rgb(222,223,25)" fg:x="60527" fg:w="15"/><text x="98.8764%" y="1039.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (15 samples, 0.02%)</title><rect x="98.6264%" y="1013" width="0.0244%" height="15" fill="rgb(214,198,28)" fg:x="60527" fg:w="15"/><text x="98.8764%" y="1023.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (15 samples, 0.02%)</title><rect x="98.6264%" y="997" width="0.0244%" height="15" fill="rgb(230,46,43)" fg:x="60527" fg:w="15"/><text x="98.8764%" y="1007.50"></text></g><g><title>aes_grinder::exaustive_search::exhaustive_search::_{{closure}} (15 samples, 0.02%)</title><rect x="98.6264%" y="981" width="0.0244%" height="15" fill="rgb(233,65,53)" fg:x="60527" fg:w="15"/><text x="98.8764%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (15 samples, 0.02%)</title><rect x="98.6264%" y="965" width="0.0244%" height="15" fill="rgb(221,121,27)" fg:x="60527" fg:w="15"/><text x="98.8764%" y="975.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.02%)</title><rect x="98.6264%" y="949" width="0.0244%" height="15" fill="rgb(247,70,47)" fg:x="60527" fg:w="15"/><text x="98.8764%" y="959.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (15 samples, 0.02%)</title><rect x="98.6264%" y="933" width="0.0244%" height="15" fill="rgb(228,85,35)" fg:x="60527" fg:w="15"/><text x="98.8764%" y="943.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (15 samples, 0.02%)</title><rect x="98.6264%" y="917" width="0.0244%" height="15" fill="rgb(209,50,18)" fg:x="60527" fg:w="15"/><text x="98.8764%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (15 samples, 0.02%)</title><rect x="98.6264%" y="901" width="0.0244%" height="15" fill="rgb(250,19,35)" fg:x="60527" fg:w="15"/><text x="98.8764%" y="911.50"></text></g><g><title>aes_grinder::exaustive_search::exhaustive_search::_{{closure}}::_{{closure}} (15 samples, 0.02%)</title><rect x="98.6264%" y="885" width="0.0244%" height="15" fill="rgb(253,107,29)" fg:x="60527" fg:w="15"/><text x="98.8764%" y="895.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (15 samples, 0.02%)</title><rect x="98.6264%" y="869" width="0.0244%" height="15" fill="rgb(252,179,29)" fg:x="60527" fg:w="15"/><text x="98.8764%" y="879.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (15 samples, 0.02%)</title><rect x="98.6264%" y="853" width="0.0244%" height="15" fill="rgb(238,194,6)" fg:x="60527" fg:w="15"/><text x="98.8764%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (15 samples, 0.02%)</title><rect x="98.6264%" y="837" width="0.0244%" height="15" fill="rgb(238,164,29)" fg:x="60527" fg:w="15"/><text x="98.8764%" y="847.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (15 samples, 0.02%)</title><rect x="98.6264%" y="821" width="0.0244%" height="15" fill="rgb(224,25,9)" fg:x="60527" fg:w="15"/><text x="98.8764%" y="831.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (14 samples, 0.02%)</title><rect x="98.6280%" y="805" width="0.0228%" height="15" fill="rgb(244,153,23)" fg:x="60528" fg:w="14"/><text x="98.8780%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (13 samples, 0.02%)</title><rect x="98.6296%" y="789" width="0.0212%" height="15" fill="rgb(212,203,14)" fg:x="60529" fg:w="13"/><text x="98.8796%" y="799.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (14 samples, 0.02%)</title><rect x="98.9001%" y="901" width="0.0228%" height="15" fill="rgb(220,164,20)" fg:x="60695" fg:w="14"/><text x="99.1501%" y="911.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 0.09%)</title><rect x="98.8480%" y="917" width="0.0945%" height="15" fill="rgb(222,203,48)" fg:x="60663" fg:w="58"/><text x="99.0980%" y="927.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (12 samples, 0.02%)</title><rect x="98.9229%" y="901" width="0.0196%" height="15" fill="rgb(215,159,22)" fg:x="60709" fg:w="12"/><text x="99.1729%" y="911.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (8 samples, 0.01%)</title><rect x="98.9294%" y="885" width="0.0130%" height="15" fill="rgb(216,183,47)" fg:x="60713" fg:w="8"/><text x="99.1794%" y="895.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (57 samples, 0.09%)</title><rect x="98.9441%" y="917" width="0.0929%" height="15" fill="rgb(229,195,25)" fg:x="60722" fg:w="57"/><text x="99.1941%" y="927.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (9 samples, 0.01%)</title><rect x="99.0223%" y="901" width="0.0147%" height="15" fill="rgb(224,132,51)" fg:x="60770" fg:w="9"/><text x="99.2723%" y="911.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (174 samples, 0.28%)</title><rect x="98.7812%" y="949" width="0.2835%" height="15" fill="rgb(240,63,7)" fg:x="60622" fg:w="174"/><text x="99.0312%" y="959.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (161 samples, 0.26%)</title><rect x="98.8023%" y="933" width="0.2623%" height="15" fill="rgb(249,182,41)" fg:x="60635" fg:w="161"/><text x="99.0523%" y="943.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (14 samples, 0.02%)</title><rect x="99.0419%" y="917" width="0.0228%" height="15" fill="rgb(243,47,26)" fg:x="60782" fg:w="14"/><text x="99.2919%" y="927.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (12 samples, 0.02%)</title><rect x="99.0451%" y="901" width="0.0196%" height="15" fill="rgb(233,48,2)" fg:x="60784" fg:w="12"/><text x="99.2951%" y="911.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (12 samples, 0.02%)</title><rect x="99.0451%" y="885" width="0.0196%" height="15" fill="rgb(244,165,34)" fg:x="60784" fg:w="12"/><text x="99.2951%" y="895.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (264 samples, 0.43%)</title><rect x="98.6704%" y="1013" width="0.4302%" height="15" fill="rgb(207,89,7)" fg:x="60554" fg:w="264"/><text x="98.9204%" y="1023.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (264 samples, 0.43%)</title><rect x="98.6704%" y="997" width="0.4302%" height="15" fill="rgb(244,117,36)" fg:x="60554" fg:w="264"/><text x="98.9204%" y="1007.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (261 samples, 0.43%)</title><rect x="98.6752%" y="981" width="0.4253%" height="15" fill="rgb(226,144,34)" fg:x="60557" fg:w="261"/><text x="98.9252%" y="991.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (250 samples, 0.41%)</title><rect x="98.6932%" y="965" width="0.4074%" height="15" fill="rgb(213,23,19)" fg:x="60568" fg:w="250"/><text x="98.9432%" y="975.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (22 samples, 0.04%)</title><rect x="99.0647%" y="949" width="0.0358%" height="15" fill="rgb(217,75,12)" fg:x="60796" fg:w="22"/><text x="99.3147%" y="959.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (11 samples, 0.02%)</title><rect x="99.0826%" y="933" width="0.0179%" height="15" fill="rgb(224,159,17)" fg:x="60807" fg:w="11"/><text x="99.3326%" y="943.50"></text></g><g><title>rand::seq::IteratorRandom::choose (283 samples, 0.46%)</title><rect x="98.6622%" y="1061" width="0.4611%" height="15" fill="rgb(217,118,1)" fg:x="60549" fg:w="283"/><text x="98.9122%" y="1071.50"></text></g><g><title>core::iter::traits::iterator::Iterator::nth (283 samples, 0.46%)</title><rect x="98.6622%" y="1045" width="0.4611%" height="15" fill="rgb(232,180,48)" fg:x="60549" fg:w="283"/><text x="98.9122%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (283 samples, 0.46%)</title><rect x="98.6622%" y="1029" width="0.4611%" height="15" fill="rgb(230,27,33)" fg:x="60549" fg:w="283"/><text x="98.9122%" y="1039.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (12 samples, 0.02%)</title><rect x="99.1038%" y="1013" width="0.0196%" height="15" fill="rgb(205,31,21)" fg:x="60820" fg:w="12"/><text x="99.3538%" y="1023.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (12 samples, 0.02%)</title><rect x="99.1038%" y="997" width="0.0196%" height="15" fill="rgb(253,59,4)" fg:x="60820" fg:w="12"/><text x="99.3538%" y="1007.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (11 samples, 0.02%)</title><rect x="99.1331%" y="725" width="0.0179%" height="15" fill="rgb(224,201,9)" fg:x="60838" fg:w="11"/><text x="99.3831%" y="735.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (11 samples, 0.02%)</title><rect x="99.1331%" y="709" width="0.0179%" height="15" fill="rgb(229,206,30)" fg:x="60838" fg:w="11"/><text x="99.3831%" y="719.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (11 samples, 0.02%)</title><rect x="99.1331%" y="693" width="0.0179%" height="15" fill="rgb(212,67,47)" fg:x="60838" fg:w="11"/><text x="99.3831%" y="703.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::cmp::PartialEq&gt;::eq (11 samples, 0.02%)</title><rect x="99.1331%" y="677" width="0.0179%" height="15" fill="rgb(211,96,50)" fg:x="60838" fg:w="11"/><text x="99.3831%" y="687.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (21 samples, 0.03%)</title><rect x="99.1315%" y="789" width="0.0342%" height="15" fill="rgb(252,114,18)" fg:x="60837" fg:w="21"/><text x="99.3815%" y="799.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (21 samples, 0.03%)</title><rect x="99.1315%" y="773" width="0.0342%" height="15" fill="rgb(223,58,37)" fg:x="60837" fg:w="21"/><text x="99.3815%" y="783.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (21 samples, 0.03%)</title><rect x="99.1315%" y="757" width="0.0342%" height="15" fill="rgb(237,70,4)" fg:x="60837" fg:w="21"/><text x="99.3815%" y="767.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::cmp::PartialEq&gt;::eq (21 samples, 0.03%)</title><rect x="99.1315%" y="741" width="0.0342%" height="15" fill="rgb(244,85,46)" fg:x="60837" fg:w="21"/><text x="99.3815%" y="751.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (9 samples, 0.01%)</title><rect x="99.1511%" y="725" width="0.0147%" height="15" fill="rgb(223,39,52)" fg:x="60849" fg:w="9"/><text x="99.4011%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (9 samples, 0.01%)</title><rect x="99.1511%" y="709" width="0.0147%" height="15" fill="rgb(218,200,14)" fg:x="60849" fg:w="9"/><text x="99.4011%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (9 samples, 0.01%)</title><rect x="99.1511%" y="693" width="0.0147%" height="15" fill="rgb(208,171,16)" fg:x="60849" fg:w="9"/><text x="99.4011%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (8 samples, 0.01%)</title><rect x="99.1527%" y="677" width="0.0130%" height="15" fill="rgb(234,200,18)" fg:x="60850" fg:w="8"/><text x="99.4027%" y="687.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (8 samples, 0.01%)</title><rect x="99.1527%" y="661" width="0.0130%" height="15" fill="rgb(228,45,11)" fg:x="60850" fg:w="8"/><text x="99.4027%" y="671.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (8 samples, 0.01%)</title><rect x="99.1527%" y="645" width="0.0130%" height="15" fill="rgb(237,182,11)" fg:x="60850" fg:w="8"/><text x="99.4027%" y="655.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (8 samples, 0.01%)</title><rect x="99.1527%" y="629" width="0.0130%" height="15" fill="rgb(241,175,49)" fg:x="60850" fg:w="8"/><text x="99.4027%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (8 samples, 0.01%)</title><rect x="99.1527%" y="613" width="0.0130%" height="15" fill="rgb(247,38,35)" fg:x="60850" fg:w="8"/><text x="99.4027%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (8 samples, 0.01%)</title><rect x="99.1527%" y="597" width="0.0130%" height="15" fill="rgb(228,39,49)" fg:x="60850" fg:w="8"/><text x="99.4027%" y="607.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (30 samples, 0.05%)</title><rect x="99.1315%" y="853" width="0.0489%" height="15" fill="rgb(226,101,26)" fg:x="60837" fg:w="30"/><text x="99.3815%" y="863.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (30 samples, 0.05%)</title><rect x="99.1315%" y="837" width="0.0489%" height="15" fill="rgb(206,141,19)" fg:x="60837" fg:w="30"/><text x="99.3815%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (30 samples, 0.05%)</title><rect x="99.1315%" y="821" width="0.0489%" height="15" fill="rgb(211,200,13)" fg:x="60837" fg:w="30"/><text x="99.3815%" y="831.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::cmp::PartialEq&gt;::eq (30 samples, 0.05%)</title><rect x="99.1315%" y="805" width="0.0489%" height="15" fill="rgb(241,121,6)" fg:x="60837" fg:w="30"/><text x="99.3815%" y="815.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (9 samples, 0.01%)</title><rect x="99.1657%" y="789" width="0.0147%" height="15" fill="rgb(234,221,29)" fg:x="60858" fg:w="9"/><text x="99.4157%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (9 samples, 0.01%)</title><rect x="99.1657%" y="773" width="0.0147%" height="15" fill="rgb(229,136,5)" fg:x="60858" fg:w="9"/><text x="99.4157%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (9 samples, 0.01%)</title><rect x="99.1657%" y="757" width="0.0147%" height="15" fill="rgb(238,36,11)" fg:x="60858" fg:w="9"/><text x="99.4157%" y="767.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 0.02%)</title><rect x="99.1983%" y="709" width="0.0163%" height="15" fill="rgb(251,55,41)" fg:x="60878" fg:w="10"/><text x="99.4483%" y="719.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.02%)</title><rect x="99.1983%" y="693" width="0.0163%" height="15" fill="rgb(242,34,40)" fg:x="60878" fg:w="10"/><text x="99.4483%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (28 samples, 0.05%)</title><rect x="99.1853%" y="837" width="0.0456%" height="15" fill="rgb(215,42,17)" fg:x="60870" fg:w="28"/><text x="99.4353%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (28 samples, 0.05%)</title><rect x="99.1853%" y="821" width="0.0456%" height="15" fill="rgb(207,44,46)" fg:x="60870" fg:w="28"/><text x="99.4353%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (20 samples, 0.03%)</title><rect x="99.1983%" y="805" width="0.0326%" height="15" fill="rgb(211,206,28)" fg:x="60878" fg:w="20"/><text x="99.4483%" y="815.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq::_{{closure}} (20 samples, 0.03%)</title><rect x="99.1983%" y="789" width="0.0326%" height="15" fill="rgb(237,167,16)" fg:x="60878" fg:w="20"/><text x="99.4483%" y="799.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (20 samples, 0.03%)</title><rect x="99.1983%" y="773" width="0.0326%" height="15" fill="rgb(233,66,6)" fg:x="60878" fg:w="20"/><text x="99.4483%" y="783.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (20 samples, 0.03%)</title><rect x="99.1983%" y="757" width="0.0326%" height="15" fill="rgb(246,123,29)" fg:x="60878" fg:w="20"/><text x="99.4483%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (20 samples, 0.03%)</title><rect x="99.1983%" y="741" width="0.0326%" height="15" fill="rgb(209,62,40)" fg:x="60878" fg:w="20"/><text x="99.4483%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (20 samples, 0.03%)</title><rect x="99.1983%" y="725" width="0.0326%" height="15" fill="rgb(218,4,25)" fg:x="60878" fg:w="20"/><text x="99.4483%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (10 samples, 0.02%)</title><rect x="99.2146%" y="709" width="0.0163%" height="15" fill="rgb(253,91,49)" fg:x="60888" fg:w="10"/><text x="99.4646%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (10 samples, 0.02%)</title><rect x="99.2146%" y="693" width="0.0163%" height="15" fill="rgb(228,155,29)" fg:x="60888" fg:w="10"/><text x="99.4646%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (10 samples, 0.02%)</title><rect x="99.2146%" y="677" width="0.0163%" height="15" fill="rgb(243,57,37)" fg:x="60888" fg:w="10"/><text x="99.4646%" y="687.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (63 samples, 0.10%)</title><rect x="99.1299%" y="949" width="0.1027%" height="15" fill="rgb(244,167,17)" fg:x="60836" fg:w="63"/><text x="99.3799%" y="959.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (63 samples, 0.10%)</title><rect x="99.1299%" y="933" width="0.1027%" height="15" fill="rgb(207,181,38)" fg:x="60836" fg:w="63"/><text x="99.3799%" y="943.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (63 samples, 0.10%)</title><rect x="99.1299%" y="917" width="0.1027%" height="15" fill="rgb(211,8,23)" fg:x="60836" fg:w="63"/><text x="99.3799%" y="927.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (63 samples, 0.10%)</title><rect x="99.1299%" y="901" width="0.1027%" height="15" fill="rgb(235,11,44)" fg:x="60836" fg:w="63"/><text x="99.3799%" y="911.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::cmp::PartialEq&gt;::eq (63 samples, 0.10%)</title><rect x="99.1299%" y="885" width="0.1027%" height="15" fill="rgb(248,18,52)" fg:x="60836" fg:w="63"/><text x="99.3799%" y="895.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::cmp::PartialEq&gt;::eq (62 samples, 0.10%)</title><rect x="99.1315%" y="869" width="0.1010%" height="15" fill="rgb(208,4,7)" fg:x="60837" fg:w="62"/><text x="99.3815%" y="879.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (32 samples, 0.05%)</title><rect x="99.1804%" y="853" width="0.0521%" height="15" fill="rgb(240,17,39)" fg:x="60867" fg:w="32"/><text x="99.4304%" y="863.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::take (67 samples, 0.11%)</title><rect x="99.1250%" y="1061" width="0.1092%" height="15" fill="rgb(207,170,3)" fg:x="60833" fg:w="67"/><text x="99.3750%" y="1071.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::take (67 samples, 0.11%)</title><rect x="99.1250%" y="1045" width="0.1092%" height="15" fill="rgb(236,100,52)" fg:x="60833" fg:w="67"/><text x="99.3750%" y="1055.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (67 samples, 0.11%)</title><rect x="99.1250%" y="1029" width="0.1092%" height="15" fill="rgb(246,78,51)" fg:x="60833" fg:w="67"/><text x="99.3750%" y="1039.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (64 samples, 0.10%)</title><rect x="99.1299%" y="1013" width="0.1043%" height="15" fill="rgb(211,17,15)" fg:x="60836" fg:w="64"/><text x="99.3799%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (64 samples, 0.10%)</title><rect x="99.1299%" y="997" width="0.1043%" height="15" fill="rgb(209,59,46)" fg:x="60836" fg:w="64"/><text x="99.3799%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (64 samples, 0.10%)</title><rect x="99.1299%" y="981" width="0.1043%" height="15" fill="rgb(210,92,25)" fg:x="60836" fg:w="64"/><text x="99.3799%" y="991.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (64 samples, 0.10%)</title><rect x="99.1299%" y="965" width="0.1043%" height="15" fill="rgb(238,174,52)" fg:x="60836" fg:w="64"/><text x="99.3799%" y="975.50"></text></g><g><title>aes_grinder::exaustive_search::exhaustive_search (60,879 samples, 99.20%)</title><rect x="0.0391%" y="1077" width="99.1999%" height="15" fill="rgb(230,73,7)" fg:x="24" fg:w="60879"/><text x="0.2891%" y="1087.50">aes_grinder::exaustive_search::exhaustive_search</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.01%)</title><rect x="99.2488%" y="869" width="0.0130%" height="15" fill="rgb(243,124,40)" fg:x="60909" fg:w="8"/><text x="99.4988%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.02%)</title><rect x="99.2488%" y="901" width="0.0163%" height="15" fill="rgb(244,170,11)" fg:x="60909" fg:w="10"/><text x="99.4988%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (10 samples, 0.02%)</title><rect x="99.2488%" y="885" width="0.0163%" height="15" fill="rgb(207,114,54)" fg:x="60909" fg:w="10"/><text x="99.4988%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.03%)</title><rect x="99.2439%" y="917" width="0.0261%" height="15" fill="rgb(205,42,20)" fg:x="60906" fg:w="16"/><text x="99.4939%" y="927.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (19 samples, 0.03%)</title><rect x="99.2407%" y="1013" width="0.0310%" height="15" fill="rgb(230,30,28)" fg:x="60904" fg:w="19"/><text x="99.4907%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (19 samples, 0.03%)</title><rect x="99.2407%" y="997" width="0.0310%" height="15" fill="rgb(205,73,54)" fg:x="60904" fg:w="19"/><text x="99.4907%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 0.03%)</title><rect x="99.2407%" y="981" width="0.0310%" height="15" fill="rgb(254,227,23)" fg:x="60904" fg:w="19"/><text x="99.4907%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (19 samples, 0.03%)</title><rect x="99.2407%" y="965" width="0.0310%" height="15" fill="rgb(228,202,34)" fg:x="60904" fg:w="19"/><text x="99.4907%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (19 samples, 0.03%)</title><rect x="99.2407%" y="949" width="0.0310%" height="15" fill="rgb(222,225,37)" fg:x="60904" fg:w="19"/><text x="99.4907%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (19 samples, 0.03%)</title><rect x="99.2407%" y="933" width="0.0310%" height="15" fill="rgb(221,14,54)" fg:x="60904" fg:w="19"/><text x="99.4907%" y="943.50"></text></g><g><title>aes_grinder::matrix::Matrix::delete_column (20 samples, 0.03%)</title><rect x="99.2407%" y="1029" width="0.0326%" height="15" fill="rgb(254,102,2)" fg:x="60904" fg:w="20"/><text x="99.4907%" y="1039.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (14 samples, 0.02%)</title><rect x="99.2879%" y="853" width="0.0228%" height="15" fill="rgb(232,104,17)" fg:x="60933" fg:w="14"/><text x="99.5379%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (14 samples, 0.02%)</title><rect x="99.2879%" y="837" width="0.0228%" height="15" fill="rgb(250,220,14)" fg:x="60933" fg:w="14"/><text x="99.5379%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.03%)</title><rect x="99.2863%" y="885" width="0.0261%" height="15" fill="rgb(241,158,9)" fg:x="60932" fg:w="16"/><text x="99.5363%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (16 samples, 0.03%)</title><rect x="99.2863%" y="869" width="0.0261%" height="15" fill="rgb(246,9,43)" fg:x="60932" fg:w="16"/><text x="99.5363%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.03%)</title><rect x="99.2830%" y="901" width="0.0310%" height="15" fill="rgb(206,73,33)" fg:x="60930" fg:w="19"/><text x="99.5330%" y="911.50"></text></g><g><title>aes_grinder::matrix::Matrix::delete_column (21 samples, 0.03%)</title><rect x="99.2814%" y="1013" width="0.0342%" height="15" fill="rgb(222,79,8)" fg:x="60929" fg:w="21"/><text x="99.5314%" y="1023.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (21 samples, 0.03%)</title><rect x="99.2814%" y="997" width="0.0342%" height="15" fill="rgb(234,8,54)" fg:x="60929" fg:w="21"/><text x="99.5314%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (21 samples, 0.03%)</title><rect x="99.2814%" y="981" width="0.0342%" height="15" fill="rgb(209,134,38)" fg:x="60929" fg:w="21"/><text x="99.5314%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 0.03%)</title><rect x="99.2814%" y="965" width="0.0342%" height="15" fill="rgb(230,127,29)" fg:x="60929" fg:w="21"/><text x="99.5314%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (21 samples, 0.03%)</title><rect x="99.2814%" y="949" width="0.0342%" height="15" fill="rgb(242,44,41)" fg:x="60929" fg:w="21"/><text x="99.5314%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (21 samples, 0.03%)</title><rect x="99.2814%" y="933" width="0.0342%" height="15" fill="rgb(222,56,43)" fg:x="60929" fg:w="21"/><text x="99.5314%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (21 samples, 0.03%)</title><rect x="99.2814%" y="917" width="0.0342%" height="15" fill="rgb(238,39,47)" fg:x="60929" fg:w="21"/><text x="99.5314%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (8 samples, 0.01%)</title><rect x="99.3238%" y="997" width="0.0130%" height="15" fill="rgb(226,79,43)" fg:x="60955" fg:w="8"/><text x="99.5738%" y="1007.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.01%)</title><rect x="99.3433%" y="949" width="0.0130%" height="15" fill="rgb(242,105,53)" fg:x="60967" fg:w="8"/><text x="99.5933%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (17 samples, 0.03%)</title><rect x="99.3368%" y="997" width="0.0277%" height="15" fill="rgb(251,132,46)" fg:x="60963" fg:w="17"/><text x="99.5868%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (14 samples, 0.02%)</title><rect x="99.3417%" y="981" width="0.0228%" height="15" fill="rgb(231,77,14)" fg:x="60966" fg:w="14"/><text x="99.5917%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (14 samples, 0.02%)</title><rect x="99.3417%" y="965" width="0.0228%" height="15" fill="rgb(240,135,9)" fg:x="60966" fg:w="14"/><text x="99.5917%" y="975.50"></text></g><g><title>aes_grinder::matrix::Matrix::delete_empty_colums (61 samples, 0.10%)</title><rect x="99.2733%" y="1029" width="0.0994%" height="15" fill="rgb(248,109,14)" fg:x="60924" fg:w="61"/><text x="99.5233%" y="1039.50"></text></g><g><title>aes_grinder::matrix::Matrix::get_column (35 samples, 0.06%)</title><rect x="99.3156%" y="1013" width="0.0570%" height="15" fill="rgb(227,146,52)" fg:x="60950" fg:w="35"/><text x="99.5656%" y="1023.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (16 samples, 0.03%)</title><rect x="99.3890%" y="869" width="0.0261%" height="15" fill="rgb(232,54,3)" fg:x="60995" fg:w="16"/><text x="99.6390%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (14 samples, 0.02%)</title><rect x="99.3922%" y="853" width="0.0228%" height="15" fill="rgb(229,201,43)" fg:x="60997" fg:w="14"/><text x="99.6422%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.03%)</title><rect x="99.3824%" y="901" width="0.0342%" height="15" fill="rgb(252,161,33)" fg:x="60991" fg:w="21"/><text x="99.6324%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (21 samples, 0.03%)</title><rect x="99.3824%" y="885" width="0.0342%" height="15" fill="rgb(226,146,40)" fg:x="60991" fg:w="21"/><text x="99.6324%" y="895.50"></text></g><g><title>aes_grinder::matrix::Matrix::delete_row (29 samples, 0.05%)</title><rect x="99.3727%" y="1029" width="0.0473%" height="15" fill="rgb(219,47,25)" fg:x="60985" fg:w="29"/><text x="99.6227%" y="1039.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (29 samples, 0.05%)</title><rect x="99.3727%" y="1013" width="0.0473%" height="15" fill="rgb(250,135,13)" fg:x="60985" fg:w="29"/><text x="99.6227%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (29 samples, 0.05%)</title><rect x="99.3727%" y="997" width="0.0473%" height="15" fill="rgb(219,229,18)" fg:x="60985" fg:w="29"/><text x="99.6227%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (29 samples, 0.05%)</title><rect x="99.3727%" y="981" width="0.0473%" height="15" fill="rgb(217,152,27)" fg:x="60985" fg:w="29"/><text x="99.6227%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (29 samples, 0.05%)</title><rect x="99.3727%" y="965" width="0.0473%" height="15" fill="rgb(225,71,47)" fg:x="60985" fg:w="29"/><text x="99.6227%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (29 samples, 0.05%)</title><rect x="99.3727%" y="949" width="0.0473%" height="15" fill="rgb(220,139,14)" fg:x="60985" fg:w="29"/><text x="99.6227%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (29 samples, 0.05%)</title><rect x="99.3727%" y="933" width="0.0473%" height="15" fill="rgb(247,54,32)" fg:x="60985" fg:w="29"/><text x="99.6227%" y="943.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.04%)</title><rect x="99.3792%" y="917" width="0.0407%" height="15" fill="rgb(252,131,39)" fg:x="60989" fg:w="25"/><text x="99.6292%" y="927.50"></text></g><g><title>&lt;aes_grinder::matrix::Matrix as core::ops::index::Index&lt;(usize,usize)&gt;&gt;::index (15 samples, 0.02%)</title><rect x="99.4395%" y="1013" width="0.0244%" height="15" fill="rgb(210,108,39)" fg:x="61026" fg:w="15"/><text x="99.6895%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (9 samples, 0.01%)</title><rect x="99.4492%" y="997" width="0.0147%" height="15" fill="rgb(205,23,29)" fg:x="61032" fg:w="9"/><text x="99.6992%" y="1007.50"></text></g><g><title>&lt;aes_grinder::matrix::Matrix as core::ops::index::IndexMut&lt;(usize,usize)&gt;&gt;::index_mut (10 samples, 0.02%)</title><rect x="99.4639%" y="1013" width="0.0163%" height="15" fill="rgb(246,139,46)" fg:x="61041" fg:w="10"/><text x="99.7139%" y="1023.50"></text></g><g><title>aes_grinder::matrix::Matrix::remove_variable (154 samples, 0.25%)</title><rect x="99.2407%" y="1045" width="0.2509%" height="15" fill="rgb(250,81,26)" fg:x="60904" fg:w="154"/><text x="99.4907%" y="1055.50"></text></g><g><title>aes_grinder::matrix::Matrix::solve_on (44 samples, 0.07%)</title><rect x="99.4199%" y="1029" width="0.0717%" height="15" fill="rgb(214,104,7)" fg:x="61014" fg:w="44"/><text x="99.6699%" y="1039.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.01%)</title><rect x="99.5161%" y="757" width="0.0147%" height="15" fill="rgb(233,189,8)" fg:x="61073" fg:w="9"/><text x="99.7661%" y="767.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.04%)</title><rect x="99.4998%" y="789" width="0.0358%" height="15" fill="rgb(228,141,17)" fg:x="61063" fg:w="22"/><text x="99.7498%" y="799.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (18 samples, 0.03%)</title><rect x="99.5063%" y="773" width="0.0293%" height="15" fill="rgb(247,157,1)" fg:x="61067" fg:w="18"/><text x="99.7563%" y="783.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.05%)</title><rect x="99.4949%" y="837" width="0.0456%" height="15" fill="rgb(249,225,5)" fg:x="61060" fg:w="28"/><text x="99.7449%" y="847.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.04%)</title><rect x="99.4981%" y="821" width="0.0424%" height="15" fill="rgb(242,55,13)" fg:x="61062" fg:w="26"/><text x="99.7481%" y="831.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.04%)</title><rect x="99.4981%" y="805" width="0.0424%" height="15" fill="rgb(230,49,50)" fg:x="61062" fg:w="26"/><text x="99.7481%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.07%)</title><rect x="99.4932%" y="853" width="0.0668%" height="15" fill="rgb(241,111,38)" fg:x="61059" fg:w="41"/><text x="99.7432%" y="863.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (12 samples, 0.02%)</title><rect x="99.5405%" y="837" width="0.0196%" height="15" fill="rgb(252,155,4)" fg:x="61088" fg:w="12"/><text x="99.7905%" y="847.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (8 samples, 0.01%)</title><rect x="99.5470%" y="821" width="0.0130%" height="15" fill="rgb(212,69,32)" fg:x="61092" fg:w="8"/><text x="99.7970%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.01%)</title><rect x="99.5486%" y="805" width="0.0114%" height="15" fill="rgb(243,107,47)" fg:x="61093" fg:w="7"/><text x="99.7986%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.01%)</title><rect x="99.5486%" y="789" width="0.0114%" height="15" fill="rgb(247,130,12)" fg:x="61093" fg:w="7"/><text x="99.7986%" y="799.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.01%)</title><rect x="99.5486%" y="773" width="0.0114%" height="15" fill="rgb(233,74,16)" fg:x="61093" fg:w="7"/><text x="99.7986%" y="783.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.01%)</title><rect x="99.5486%" y="757" width="0.0114%" height="15" fill="rgb(208,58,18)" fg:x="61093" fg:w="7"/><text x="99.7986%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.01%)</title><rect x="99.5486%" y="741" width="0.0114%" height="15" fill="rgb(242,225,1)" fg:x="61093" fg:w="7"/><text x="99.7986%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.01%)</title><rect x="99.5486%" y="725" width="0.0114%" height="15" fill="rgb(249,39,40)" fg:x="61093" fg:w="7"/><text x="99.7986%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.01%)</title><rect x="99.5486%" y="709" width="0.0114%" height="15" fill="rgb(207,72,44)" fg:x="61093" fg:w="7"/><text x="99.7986%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (43 samples, 0.07%)</title><rect x="99.4916%" y="885" width="0.0701%" height="15" fill="rgb(215,193,12)" fg:x="61058" fg:w="43"/><text x="99.7416%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (43 samples, 0.07%)</title><rect x="99.4916%" y="869" width="0.0701%" height="15" fill="rgb(248,41,39)" fg:x="61058" fg:w="43"/><text x="99.7416%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (54 samples, 0.09%)</title><rect x="99.4916%" y="949" width="0.0880%" height="15" fill="rgb(253,85,4)" fg:x="61058" fg:w="54"/><text x="99.7416%" y="959.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (54 samples, 0.09%)</title><rect x="99.4916%" y="933" width="0.0880%" height="15" fill="rgb(243,70,31)" fg:x="61058" fg:w="54"/><text x="99.7416%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (54 samples, 0.09%)</title><rect x="99.4916%" y="917" width="0.0880%" height="15" fill="rgb(253,195,26)" fg:x="61058" fg:w="54"/><text x="99.7416%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (54 samples, 0.09%)</title><rect x="99.4916%" y="901" width="0.0880%" height="15" fill="rgb(243,42,11)" fg:x="61058" fg:w="54"/><text x="99.7416%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (8 samples, 0.01%)</title><rect x="99.5666%" y="885" width="0.0130%" height="15" fill="rgb(239,66,17)" fg:x="61104" fg:w="8"/><text x="99.8166%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.01%)</title><rect x="99.5666%" y="869" width="0.0130%" height="15" fill="rgb(217,132,21)" fg:x="61104" fg:w="8"/><text x="99.8166%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.01%)</title><rect x="99.5666%" y="853" width="0.0130%" height="15" fill="rgb(252,202,21)" fg:x="61104" fg:w="8"/><text x="99.8166%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.01%)</title><rect x="99.5666%" y="837" width="0.0130%" height="15" fill="rgb(233,98,36)" fg:x="61104" fg:w="8"/><text x="99.8166%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.01%)</title><rect x="99.5666%" y="821" width="0.0130%" height="15" fill="rgb(216,153,54)" fg:x="61104" fg:w="8"/><text x="99.8166%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.01%)</title><rect x="99.5666%" y="805" width="0.0130%" height="15" fill="rgb(250,99,7)" fg:x="61104" fg:w="8"/><text x="99.8166%" y="815.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.01%)</title><rect x="99.5666%" y="789" width="0.0130%" height="15" fill="rgb(207,56,50)" fg:x="61104" fg:w="8"/><text x="99.8166%" y="799.50"></text></g><g><title>malloc (8 samples, 0.01%)</title><rect x="99.5666%" y="773" width="0.0130%" height="15" fill="rgb(244,61,34)" fg:x="61104" fg:w="8"/><text x="99.8166%" y="783.50"></text></g><g><title>[libc.so.6] (7 samples, 0.01%)</title><rect x="99.5682%" y="757" width="0.0114%" height="15" fill="rgb(241,50,38)" fg:x="61105" fg:w="7"/><text x="99.8182%" y="767.50"></text></g><g><title>aes_grinder::matrix::Matrix::get_all_variables (55 samples, 0.09%)</title><rect x="99.4916%" y="965" width="0.0896%" height="15" fill="rgb(212,166,30)" fg:x="61058" fg:w="55"/><text x="99.7416%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (13 samples, 0.02%)</title><rect x="99.5812%" y="965" width="0.0212%" height="15" fill="rgb(249,127,32)" fg:x="61113" fg:w="13"/><text x="99.8312%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.02%)</title><rect x="99.5812%" y="949" width="0.0212%" height="15" fill="rgb(209,103,0)" fg:x="61113" fg:w="13"/><text x="99.8312%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (13 samples, 0.02%)</title><rect x="99.5812%" y="933" width="0.0212%" height="15" fill="rgb(238,209,51)" fg:x="61113" fg:w="13"/><text x="99.8312%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (13 samples, 0.02%)</title><rect x="99.5812%" y="917" width="0.0212%" height="15" fill="rgb(237,56,23)" fg:x="61113" fg:w="13"/><text x="99.8312%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (13 samples, 0.02%)</title><rect x="99.5812%" y="901" width="0.0212%" height="15" fill="rgb(215,153,46)" fg:x="61113" fg:w="13"/><text x="99.8312%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (12 samples, 0.02%)</title><rect x="99.5829%" y="885" width="0.0196%" height="15" fill="rgb(224,49,31)" fg:x="61114" fg:w="12"/><text x="99.8329%" y="895.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="99.5829%" y="869" width="0.0196%" height="15" fill="rgb(250,18,42)" fg:x="61114" fg:w="12"/><text x="99.8329%" y="879.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (8 samples, 0.01%)</title><rect x="99.6057%" y="917" width="0.0130%" height="15" fill="rgb(215,176,39)" fg:x="61128" fg:w="8"/><text x="99.8557%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (80 samples, 0.13%)</title><rect x="99.4916%" y="1045" width="0.1304%" height="15" fill="rgb(223,77,29)" fg:x="61058" fg:w="80"/><text x="99.7416%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (80 samples, 0.13%)</title><rect x="99.4916%" y="1029" width="0.1304%" height="15" fill="rgb(234,94,52)" fg:x="61058" fg:w="80"/><text x="99.7416%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (80 samples, 0.13%)</title><rect x="99.4916%" y="1013" width="0.1304%" height="15" fill="rgb(220,154,50)" fg:x="61058" fg:w="80"/><text x="99.7416%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (80 samples, 0.13%)</title><rect x="99.4916%" y="997" width="0.1304%" height="15" fill="rgb(212,11,10)" fg:x="61058" fg:w="80"/><text x="99.7416%" y="1007.50"></text></g><g><title>aes_grinder::matrix::Matrix::delete_alone_variables::_{{closure}} (80 samples, 0.13%)</title><rect x="99.4916%" y="981" width="0.1304%" height="15" fill="rgb(205,166,19)" fg:x="61058" fg:w="80"/><text x="99.7416%" y="991.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (12 samples, 0.02%)</title><rect x="99.6024%" y="965" width="0.0196%" height="15" fill="rgb(244,198,16)" fg:x="61126" fg:w="12"/><text x="99.8524%" y="975.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (12 samples, 0.02%)</title><rect x="99.6024%" y="949" width="0.0196%" height="15" fill="rgb(219,69,12)" fg:x="61126" fg:w="12"/><text x="99.8524%" y="959.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (12 samples, 0.02%)</title><rect x="99.6024%" y="933" width="0.0196%" height="15" fill="rgb(245,30,7)" fg:x="61126" fg:w="12"/><text x="99.8524%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (10 samples, 0.02%)</title><rect x="99.6480%" y="901" width="0.0163%" height="15" fill="rgb(218,221,48)" fg:x="61154" fg:w="10"/><text x="99.8980%" y="911.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.01%)</title><rect x="99.6529%" y="885" width="0.0114%" height="15" fill="rgb(216,66,15)" fg:x="61157" fg:w="7"/><text x="99.9029%" y="895.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.01%)</title><rect x="99.6529%" y="869" width="0.0114%" height="15" fill="rgb(226,122,50)" fg:x="61157" fg:w="7"/><text x="99.9029%" y="879.50"></text></g><g><title>core::cmp::PartialOrd::lt (9 samples, 0.01%)</title><rect x="99.6774%" y="901" width="0.0147%" height="15" fill="rgb(239,156,16)" fg:x="61172" fg:w="9"/><text x="99.9274%" y="911.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (8 samples, 0.01%)</title><rect x="99.7051%" y="885" width="0.0130%" height="15" fill="rgb(224,27,38)" fg:x="61189" fg:w="8"/><text x="99.9551%" y="895.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (7 samples, 0.01%)</title><rect x="99.7067%" y="869" width="0.0114%" height="15" fill="rgb(224,39,27)" fg:x="61190" fg:w="7"/><text x="99.9567%" y="879.50"></text></g><g><title>core::fmt::write (29 samples, 0.05%)</title><rect x="99.6985%" y="901" width="0.0473%" height="15" fill="rgb(215,92,29)" fg:x="61185" fg:w="29"/><text x="99.9485%" y="911.50"></text></g><g><title>core::fmt::rt::Argument::fmt (14 samples, 0.02%)</title><rect x="99.7230%" y="885" width="0.0228%" height="15" fill="rgb(207,159,16)" fg:x="61200" fg:w="14"/><text x="99.9730%" y="895.50"></text></g><g><title>&lt;aes_grinder::utils::Number as core::fmt::Display&gt;::fmt (14 samples, 0.02%)</title><rect x="99.7230%" y="869" width="0.0228%" height="15" fill="rgb(238,163,47)" fg:x="61200" fg:w="14"/><text x="99.9730%" y="879.50"></text></g><g><title>core::fmt::write (10 samples, 0.02%)</title><rect x="99.7295%" y="853" width="0.0163%" height="15" fill="rgb(219,91,49)" fg:x="61204" fg:w="10"/><text x="99.9795%" y="863.50"></text></g><g><title>&lt;&amp;mut T as core::fmt::Display&gt;::fmt (75 samples, 0.12%)</title><rect x="99.6269%" y="933" width="0.1222%" height="15" fill="rgb(227,167,31)" fg:x="61141" fg:w="75"/><text x="99.8769%" y="943.50"></text></g><g><title>&lt;aes_grinder::matrix::Matrix as core::fmt::Display&gt;::fmt (75 samples, 0.12%)</title><rect x="99.6269%" y="917" width="0.1222%" height="15" fill="rgb(234,80,54)" fg:x="61141" fg:w="75"/><text x="99.8769%" y="927.50"></text></g><g><title>aes_grinder::matrix::Matrix::delete_alone_variables (315 samples, 0.51%)</title><rect x="99.2390%" y="1061" width="0.5133%" height="15" fill="rgb(212,114,2)" fg:x="60903" fg:w="315"/><text x="99.4890%" y="1071.50"></text></g><g><title>std::io::stdio::_print (77 samples, 0.13%)</title><rect x="99.6269%" y="1045" width="0.1255%" height="15" fill="rgb(234,50,24)" fg:x="61141" fg:w="77"/><text x="99.8769%" y="1055.50"></text></g><g><title>std::io::stdio::print_to (77 samples, 0.13%)</title><rect x="99.6269%" y="1029" width="0.1255%" height="15" fill="rgb(221,68,8)" fg:x="61141" fg:w="77"/><text x="99.8769%" y="1039.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (77 samples, 0.13%)</title><rect x="99.6269%" y="1013" width="0.1255%" height="15" fill="rgb(254,180,31)" fg:x="61141" fg:w="77"/><text x="99.8769%" y="1023.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (77 samples, 0.13%)</title><rect x="99.6269%" y="997" width="0.1255%" height="15" fill="rgb(247,130,50)" fg:x="61141" fg:w="77"/><text x="99.8769%" y="1007.50"></text></g><g><title>std::io::Write::write_fmt (77 samples, 0.13%)</title><rect x="99.6269%" y="981" width="0.1255%" height="15" fill="rgb(211,109,4)" fg:x="61141" fg:w="77"/><text x="99.8769%" y="991.50"></text></g><g><title>core::fmt::write (77 samples, 0.13%)</title><rect x="99.6269%" y="965" width="0.1255%" height="15" fill="rgb(238,50,21)" fg:x="61141" fg:w="77"/><text x="99.8769%" y="975.50"></text></g><g><title>core::fmt::rt::Argument::fmt (77 samples, 0.13%)</title><rect x="99.6269%" y="949" width="0.1255%" height="15" fill="rgb(225,57,45)" fg:x="61141" fg:w="77"/><text x="99.8769%" y="959.50"></text></g><g><title>aes_grinder::matrix::Matrix::drop_linear_variable (317 samples, 0.52%)</title><rect x="99.2390%" y="1077" width="0.5165%" height="15" fill="rgb(209,196,50)" fg:x="60903" fg:w="317"/><text x="99.4890%" y="1087.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (10 samples, 0.02%)</title><rect x="99.8061%" y="965" width="0.0163%" height="15" fill="rgb(242,140,13)" fg:x="61251" fg:w="10"/><text x="100.0561%" y="975.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (10 samples, 0.02%)</title><rect x="99.9055%" y="949" width="0.0163%" height="15" fill="rgb(217,111,7)" fg:x="61312" fg:w="10"/><text x="100.1555%" y="959.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.02%)</title><rect x="99.9218%" y="949" width="0.0228%" height="15" fill="rgb(253,193,51)" fg:x="61322" fg:w="14"/><text x="100.1718%" y="959.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (106 samples, 0.17%)</title><rect x="99.7735%" y="981" width="0.1727%" height="15" fill="rgb(252,70,29)" fg:x="61231" fg:w="106"/><text x="100.0235%" y="991.50"></text></g><g><title>core::str::validations::next_code_point (76 samples, 0.12%)</title><rect x="99.8224%" y="965" width="0.1238%" height="15" fill="rgb(232,127,12)" fg:x="61261" fg:w="76"/><text x="100.0724%" y="975.50"></text></g><g><title>aes_grinder::parser::Parser::get_term (133 samples, 0.22%)</title><rect x="99.7605%" y="1045" width="0.2167%" height="15" fill="rgb(211,180,21)" fg:x="61223" fg:w="133"/><text x="100.0105%" y="1055.50"></text></g><g><title>aes_grinder::parser::Reader::next_char (133 samples, 0.22%)</title><rect x="99.7605%" y="1029" width="0.2167%" height="15" fill="rgb(229,72,13)" fg:x="61223" fg:w="133"/><text x="100.0105%" y="1039.50"></text></g><g><title>core::iter::traits::iterator::Iterator::nth (133 samples, 0.22%)</title><rect x="99.7605%" y="1013" width="0.2167%" height="15" fill="rgb(240,211,49)" fg:x="61223" fg:w="133"/><text x="100.0105%" y="1023.50"></text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (133 samples, 0.22%)</title><rect x="99.7605%" y="997" width="0.2167%" height="15" fill="rgb(219,149,40)" fg:x="61223" fg:w="133"/><text x="100.0105%" y="1007.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (17 samples, 0.03%)</title><rect x="99.9495%" y="981" width="0.0277%" height="15" fill="rgb(210,127,46)" fg:x="61339" fg:w="17"/><text x="100.1995%" y="991.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (17 samples, 0.03%)</title><rect x="99.9495%" y="965" width="0.0277%" height="15" fill="rgb(220,106,7)" fg:x="61339" fg:w="17"/><text x="100.1995%" y="975.50"></text></g><g><title>aes_grinder::parser::Parser::parse_line (137 samples, 0.22%)</title><rect x="99.7605%" y="1061" width="0.2232%" height="15" fill="rgb(249,31,22)" fg:x="61223" fg:w="137"/><text x="100.0105%" y="1071.50"></text></g><g><title>aes_grinder::parser::Parser::parse_system (147 samples, 0.24%)</title><rect x="99.7556%" y="1077" width="0.2395%" height="15" fill="rgb(253,1,49)" fg:x="61220" fg:w="147"/><text x="100.0056%" y="1087.50"></text></g><g><title>aes_grinder::parser::Parser::skip_whitespaces (7 samples, 0.01%)</title><rect x="99.9837%" y="1061" width="0.0114%" height="15" fill="rgb(227,144,33)" fg:x="61360" fg:w="7"/><text x="100.2337%" y="1071.50"></text></g><g><title>aes_grinder::parser::Reader::next_char (7 samples, 0.01%)</title><rect x="99.9837%" y="1045" width="0.0114%" height="15" fill="rgb(249,163,44)" fg:x="61360" fg:w="7"/><text x="100.2337%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::nth (7 samples, 0.01%)</title><rect x="99.9837%" y="1029" width="0.0114%" height="15" fill="rgb(234,15,39)" fg:x="61360" fg:w="7"/><text x="100.2337%" y="1039.50"></text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (7 samples, 0.01%)</title><rect x="99.9837%" y="1013" width="0.0114%" height="15" fill="rgb(207,66,16)" fg:x="61360" fg:w="7"/><text x="100.2337%" y="1023.50"></text></g><g><title>all (61,370 samples, 100%)</title><rect x="0.0000%" y="1397" width="100.0000%" height="15" fill="rgb(233,112,24)" fg:x="0" fg:w="61370"/><text x="0.2500%" y="1407.50"></text></g><g><title>aes_grinder (61,370 samples, 100.00%)</title><rect x="0.0000%" y="1381" width="100.0000%" height="15" fill="rgb(230,90,22)" fg:x="0" fg:w="61370"/><text x="0.2500%" y="1391.50">aes_grinder</text></g><g><title>_start (61,346 samples, 99.96%)</title><rect x="0.0391%" y="1365" width="99.9609%" height="15" fill="rgb(229,61,13)" fg:x="24" fg:w="61346"/><text x="0.2891%" y="1375.50">_start</text></g><g><title>__libc_start_main (61,346 samples, 99.96%)</title><rect x="0.0391%" y="1349" width="99.9609%" height="15" fill="rgb(225,57,24)" fg:x="24" fg:w="61346"/><text x="0.2891%" y="1359.50">__libc_start_main</text></g><g><title>[libc.so.6] (61,346 samples, 99.96%)</title><rect x="0.0391%" y="1333" width="99.9609%" height="15" fill="rgb(208,169,48)" fg:x="24" fg:w="61346"/><text x="0.2891%" y="1343.50">[libc.so.6]</text></g><g><title>main (61,346 samples, 99.96%)</title><rect x="0.0391%" y="1317" width="99.9609%" height="15" fill="rgb(244,218,51)" fg:x="24" fg:w="61346"/><text x="0.2891%" y="1327.50">main</text></g><g><title>std::rt::lang_start (61,346 samples, 99.96%)</title><rect x="0.0391%" y="1301" width="99.9609%" height="15" fill="rgb(214,148,10)" fg:x="24" fg:w="61346"/><text x="0.2891%" y="1311.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (61,346 samples, 99.96%)</title><rect x="0.0391%" y="1285" width="99.9609%" height="15" fill="rgb(225,174,27)" fg:x="24" fg:w="61346"/><text x="0.2891%" y="1295.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (61,346 samples, 99.96%)</title><rect x="0.0391%" y="1269" width="99.9609%" height="15" fill="rgb(230,96,26)" fg:x="24" fg:w="61346"/><text x="0.2891%" y="1279.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (61,346 samples, 99.96%)</title><rect x="0.0391%" y="1253" width="99.9609%" height="15" fill="rgb(232,10,30)" fg:x="24" fg:w="61346"/><text x="0.2891%" y="1263.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (61,346 samples, 99.96%)</title><rect x="0.0391%" y="1237" width="99.9609%" height="15" fill="rgb(222,8,50)" fg:x="24" fg:w="61346"/><text x="0.2891%" y="1247.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (61,346 samples, 99.96%)</title><rect x="0.0391%" y="1221" width="99.9609%" height="15" fill="rgb(213,81,27)" fg:x="24" fg:w="61346"/><text x="0.2891%" y="1231.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (61,346 samples, 99.96%)</title><rect x="0.0391%" y="1205" width="99.9609%" height="15" fill="rgb(245,50,10)" fg:x="24" fg:w="61346"/><text x="0.2891%" y="1215.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (61,346 samples, 99.96%)</title><rect x="0.0391%" y="1189" width="99.9609%" height="15" fill="rgb(216,100,18)" fg:x="24" fg:w="61346"/><text x="0.2891%" y="1199.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (61,346 samples, 99.96%)</title><rect x="0.0391%" y="1173" width="99.9609%" height="15" fill="rgb(236,147,54)" fg:x="24" fg:w="61346"/><text x="0.2891%" y="1183.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (61,346 samples, 99.96%)</title><rect x="0.0391%" y="1157" width="99.9609%" height="15" fill="rgb(205,143,26)" fg:x="24" fg:w="61346"/><text x="0.2891%" y="1167.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (61,346 samples, 99.96%)</title><rect x="0.0391%" y="1141" width="99.9609%" height="15" fill="rgb(236,26,9)" fg:x="24" fg:w="61346"/><text x="0.2891%" y="1151.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (61,346 samples, 99.96%)</title><rect x="0.0391%" y="1125" width="99.9609%" height="15" fill="rgb(221,165,53)" fg:x="24" fg:w="61346"/><text x="0.2891%" y="1135.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (61,346 samples, 99.96%)</title><rect x="0.0391%" y="1109" width="99.9609%" height="15" fill="rgb(214,110,17)" fg:x="24" fg:w="61346"/><text x="0.2891%" y="1119.50">core::ops::function::FnOnce::call_once</text></g><g><title>aes_grinder::main (61,346 samples, 99.96%)</title><rect x="0.0391%" y="1093" width="99.9609%" height="15" fill="rgb(237,197,12)" fg:x="24" fg:w="61346"/><text x="0.2891%" y="1103.50">aes_grinder::main</text></g></svg></svg>