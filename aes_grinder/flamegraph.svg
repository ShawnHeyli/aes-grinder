<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="3120" height="710" onload="init(evt)" viewBox="0 0 3120 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = false;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="693.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="3110" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="3110" y="693.00"> </text><svg id="frames" x="10" width="3100" total_samples="1376"><g><title>std::io::stdio::_print (1 samples, 0.07%)</title><rect x="0.0000%" y="373" width="0.0727%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.0962%" y="383.50"></text></g><g><title>std::io::stdio::print_to (1 samples, 0.07%)</title><rect x="0.0000%" y="357" width="0.0727%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.0962%" y="367.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.07%)</title><rect x="0.0000%" y="341" width="0.0727%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.0962%" y="351.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.07%)</title><rect x="0.0000%" y="325" width="0.0727%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.0962%" y="335.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.07%)</title><rect x="0.0000%" y="309" width="0.0727%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.0962%" y="319.50"></text></g><g><title>core::fmt::write (1 samples, 0.07%)</title><rect x="0.0000%" y="293" width="0.0727%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.0962%" y="303.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.07%)</title><rect x="0.0000%" y="277" width="0.0727%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.0962%" y="287.50"></text></g><g><title>&lt;aes_grinder::matrix::Matrix as core::fmt::Display&gt;::fmt (1 samples, 0.07%)</title><rect x="0.0000%" y="261" width="0.0727%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.0962%" y="271.50"></text></g><g><title>core::fmt::write (1 samples, 0.07%)</title><rect x="0.0000%" y="245" width="0.0727%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.0962%" y="255.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.07%)</title><rect x="0.0000%" y="229" width="0.0727%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.0962%" y="239.50"></text></g><g><title>&lt;aes_grinder::utils::Number as core::fmt::Display&gt;::fmt (1 samples, 0.07%)</title><rect x="0.0000%" y="213" width="0.0727%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.0962%" y="223.50"></text></g><g><title>core::fmt::write (1 samples, 0.07%)</title><rect x="0.0000%" y="197" width="0.0727%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.0962%" y="207.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.07%)</title><rect x="0.0000%" y="181" width="0.0727%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.0962%" y="191.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (1 samples, 0.07%)</title><rect x="0.0000%" y="165" width="0.0727%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.0962%" y="175.50"></text></g><g><title>aes_grinder::parser::Reader::next_char (7 samples, 0.51%)</title><rect x="0.0727%" y="357" width="0.5087%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="7"/><text x="0.1688%" y="367.50"></text></g><g><title>aes_grinder::parser::Parser::parse_system (8 samples, 0.58%)</title><rect x="0.0727%" y="373" width="0.5814%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="8"/><text x="0.1688%" y="383.50"></text></g><g><title>aes_grinder::matrix::Matrix::new_from_vec (1 samples, 0.07%)</title><rect x="0.5814%" y="357" width="0.0727%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="1"/><text x="0.6775%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.15%)</title><rect x="0.6541%" y="213" width="0.1453%" height="15" fill="rgb(210,31,41)" fg:x="9" fg:w="2"/><text x="0.7502%" y="223.50"></text></g><g><title>&lt;aes_grinder::utils::Number as core::fmt::Display&gt;::fmt (2 samples, 0.15%)</title><rect x="0.6541%" y="197" width="0.1453%" height="15" fill="rgb(221,200,47)" fg:x="9" fg:w="2"/><text x="0.7502%" y="207.50"></text></g><g><title>core::fmt::write (2 samples, 0.15%)</title><rect x="0.6541%" y="181" width="0.1453%" height="15" fill="rgb(226,26,5)" fg:x="9" fg:w="2"/><text x="0.7502%" y="191.50"></text></g><g><title>core::fmt::Formatter::new (2 samples, 0.15%)</title><rect x="0.6541%" y="165" width="0.1453%" height="15" fill="rgb(249,33,26)" fg:x="9" fg:w="2"/><text x="0.7502%" y="175.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.07%)</title><rect x="0.7994%" y="213" width="0.0727%" height="15" fill="rgb(235,183,28)" fg:x="11" fg:w="1"/><text x="0.8956%" y="223.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.07%)</title><rect x="0.7994%" y="197" width="0.0727%" height="15" fill="rgb(221,5,38)" fg:x="11" fg:w="1"/><text x="0.8956%" y="207.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.07%)</title><rect x="0.7994%" y="181" width="0.0727%" height="15" fill="rgb(247,18,42)" fg:x="11" fg:w="1"/><text x="0.8956%" y="191.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.07%)</title><rect x="0.7994%" y="165" width="0.0727%" height="15" fill="rgb(241,131,45)" fg:x="11" fg:w="1"/><text x="0.8956%" y="175.50"></text></g><g><title>std::sys_common::memchr::memrchr (1 samples, 0.07%)</title><rect x="0.7994%" y="149" width="0.0727%" height="15" fill="rgb(249,31,29)" fg:x="11" fg:w="1"/><text x="0.8956%" y="159.50"></text></g><g><title>std::sys::unix::memchr::memrchr (1 samples, 0.07%)</title><rect x="0.7994%" y="133" width="0.0727%" height="15" fill="rgb(225,111,53)" fg:x="11" fg:w="1"/><text x="0.8956%" y="143.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (1 samples, 0.07%)</title><rect x="0.7994%" y="117" width="0.0727%" height="15" fill="rgb(238,160,17)" fg:x="11" fg:w="1"/><text x="0.8956%" y="127.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="0.7994%" y="101" width="0.0727%" height="15" fill="rgb(214,148,48)" fg:x="11" fg:w="1"/><text x="0.8956%" y="111.50"></text></g><g><title>std::io::stdio::_print (4 samples, 0.29%)</title><rect x="0.6541%" y="357" width="0.2907%" height="15" fill="rgb(232,36,49)" fg:x="9" fg:w="4"/><text x="0.7502%" y="367.50"></text></g><g><title>std::io::stdio::print_to (4 samples, 0.29%)</title><rect x="0.6541%" y="341" width="0.2907%" height="15" fill="rgb(209,103,24)" fg:x="9" fg:w="4"/><text x="0.7502%" y="351.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (4 samples, 0.29%)</title><rect x="0.6541%" y="325" width="0.2907%" height="15" fill="rgb(229,88,8)" fg:x="9" fg:w="4"/><text x="0.7502%" y="335.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (4 samples, 0.29%)</title><rect x="0.6541%" y="309" width="0.2907%" height="15" fill="rgb(213,181,19)" fg:x="9" fg:w="4"/><text x="0.7502%" y="319.50"></text></g><g><title>std::io::Write::write_fmt (4 samples, 0.29%)</title><rect x="0.6541%" y="293" width="0.2907%" height="15" fill="rgb(254,191,54)" fg:x="9" fg:w="4"/><text x="0.7502%" y="303.50"></text></g><g><title>core::fmt::write (4 samples, 0.29%)</title><rect x="0.6541%" y="277" width="0.2907%" height="15" fill="rgb(241,83,37)" fg:x="9" fg:w="4"/><text x="0.7502%" y="287.50"></text></g><g><title>core::fmt::rt::Argument::fmt (4 samples, 0.29%)</title><rect x="0.6541%" y="261" width="0.2907%" height="15" fill="rgb(233,36,39)" fg:x="9" fg:w="4"/><text x="0.7502%" y="271.50"></text></g><g><title>&lt;aes_grinder::matrix::Matrix as core::fmt::Display&gt;::fmt (4 samples, 0.29%)</title><rect x="0.6541%" y="245" width="0.2907%" height="15" fill="rgb(226,3,54)" fg:x="9" fg:w="4"/><text x="0.7502%" y="255.50"></text></g><g><title>core::fmt::write (4 samples, 0.29%)</title><rect x="0.6541%" y="229" width="0.2907%" height="15" fill="rgb(245,192,40)" fg:x="9" fg:w="4"/><text x="0.7502%" y="239.50"></text></g><g><title>aes_grinder::matrix::Matrix::delete_column (5 samples, 0.36%)</title><rect x="0.9448%" y="357" width="0.3634%" height="15" fill="rgb(238,167,29)" fg:x="13" fg:w="5"/><text x="1.0409%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.36%)</title><rect x="0.9448%" y="341" width="0.3634%" height="15" fill="rgb(232,182,51)" fg:x="13" fg:w="5"/><text x="1.0409%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.07%)</title><rect x="1.3081%" y="357" width="0.0727%" height="15" fill="rgb(231,60,39)" fg:x="18" fg:w="1"/><text x="1.4043%" y="367.50"></text></g><g><title>aes_grinder::matrix::Matrix::drop_linear_variable (12 samples, 0.87%)</title><rect x="0.6541%" y="373" width="0.8721%" height="15" fill="rgb(208,69,12)" fg:x="9" fg:w="12"/><text x="0.7502%" y="383.50">a..</text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_contained_in (2 samples, 0.15%)</title><rect x="1.3808%" y="357" width="0.1453%" height="15" fill="rgb(235,93,37)" fg:x="19" fg:w="2"/><text x="1.4770%" y="367.50"></text></g><g><title>[libc.so.6] (2 samples, 0.15%)</title><rect x="1.3808%" y="341" width="0.1453%" height="15" fill="rgb(213,116,39)" fg:x="19" fg:w="2"/><text x="1.4770%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.07%)</title><rect x="1.5262%" y="341" width="0.0727%" height="15" fill="rgb(222,207,29)" fg:x="21" fg:w="1"/><text x="1.6223%" y="351.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (1 samples, 0.07%)</title><rect x="1.5262%" y="325" width="0.0727%" height="15" fill="rgb(206,96,30)" fg:x="21" fg:w="1"/><text x="1.6223%" y="335.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (1 samples, 0.07%)</title><rect x="1.5262%" y="309" width="0.0727%" height="15" fill="rgb(218,138,4)" fg:x="21" fg:w="1"/><text x="1.6223%" y="319.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hf7115fb884aa7bafE.llvm.3741384852135055347 (1 samples, 0.07%)</title><rect x="1.5262%" y="293" width="0.0727%" height="15" fill="rgb(250,191,14)" fg:x="21" fg:w="1"/><text x="1.6223%" y="303.50"></text></g><g><title>malloc (1 samples, 0.07%)</title><rect x="1.5988%" y="325" width="0.0727%" height="15" fill="rgb(239,60,40)" fg:x="22" fg:w="1"/><text x="1.6950%" y="335.50"></text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.4070816328972715005 (1 samples, 0.07%)</title><rect x="1.6715%" y="293" width="0.0727%" height="15" fill="rgb(206,27,48)" fg:x="23" fg:w="1"/><text x="1.7677%" y="303.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hf7115fb884aa7bafE.llvm.3741384852135055347 (1 samples, 0.07%)</title><rect x="1.7442%" y="293" width="0.0727%" height="15" fill="rgb(225,35,8)" fg:x="24" fg:w="1"/><text x="1.8403%" y="303.50"></text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.4070816328972715005 (1 samples, 0.07%)</title><rect x="1.8169%" y="277" width="0.0727%" height="15" fill="rgb(250,213,24)" fg:x="25" fg:w="1"/><text x="1.9130%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.44%)</title><rect x="1.5262%" y="357" width="0.4360%" height="15" fill="rgb(247,123,22)" fg:x="21" fg:w="6"/><text x="1.6223%" y="367.50"></text></g><g><title>_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17h4f9c69f17969f592E.llvm.17367478371711167141 (5 samples, 0.36%)</title><rect x="1.5988%" y="341" width="0.3634%" height="15" fill="rgb(231,138,38)" fg:x="22" fg:w="5"/><text x="1.6950%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.29%)</title><rect x="1.6715%" y="325" width="0.2907%" height="15" fill="rgb(231,145,46)" fg:x="23" fg:w="4"/><text x="1.7677%" y="335.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (4 samples, 0.29%)</title><rect x="1.6715%" y="309" width="0.2907%" height="15" fill="rgb(251,118,11)" fg:x="23" fg:w="4"/><text x="1.7677%" y="319.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (2 samples, 0.15%)</title><rect x="1.8169%" y="293" width="0.1453%" height="15" fill="rgb(217,147,25)" fg:x="25" fg:w="2"/><text x="1.9130%" y="303.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hf7115fb884aa7bafE.llvm.3741384852135055347 (1 samples, 0.07%)</title><rect x="1.8895%" y="277" width="0.0727%" height="15" fill="rgb(247,81,37)" fg:x="26" fg:w="1"/><text x="1.9857%" y="287.50"></text></g><g><title>[libc.so.6] (34 samples, 2.47%)</title><rect x="1.9622%" y="309" width="2.4709%" height="15" fill="rgb(209,12,38)" fg:x="27" fg:w="34"/><text x="2.0584%" y="319.50">[libc.so..</text></g><g><title>[libc.so.6] (104 samples, 7.56%)</title><rect x="1.9622%" y="325" width="7.5581%" height="15" fill="rgb(227,1,9)" fg:x="27" fg:w="104"/><text x="2.0584%" y="335.50">[libc.so.6]</text></g><g><title>cfree (105 samples, 7.63%)</title><rect x="1.9622%" y="357" width="7.6308%" height="15" fill="rgb(248,47,43)" fg:x="27" fg:w="105"/><text x="2.0584%" y="367.50">cfree</text></g><g><title>[libc.so.6] (105 samples, 7.63%)</title><rect x="1.9622%" y="341" width="7.6308%" height="15" fill="rgb(221,10,30)" fg:x="27" fg:w="105"/><text x="2.0584%" y="351.50">[libc.so.6]</text></g><g><title>std::sys::unix::fs::File::open::_{{closure}} (1 samples, 0.07%)</title><rect x="9.5930%" y="277" width="0.0727%" height="15" fill="rgb(210,229,1)" fg:x="132" fg:w="1"/><text x="9.6892%" y="287.50"></text></g><g><title>std::sys::unix::fs::File::open_c (1 samples, 0.07%)</title><rect x="9.5930%" y="261" width="0.0727%" height="15" fill="rgb(222,148,37)" fg:x="132" fg:w="1"/><text x="9.6892%" y="271.50"></text></g><g><title>std::sys::unix::cvt_r (1 samples, 0.07%)</title><rect x="9.5930%" y="245" width="0.0727%" height="15" fill="rgb(234,67,33)" fg:x="132" fg:w="1"/><text x="9.6892%" y="255.50"></text></g><g><title>std::sys::unix::fs::File::open_c::_{{closure}} (1 samples, 0.07%)</title><rect x="9.5930%" y="229" width="0.0727%" height="15" fill="rgb(247,98,35)" fg:x="132" fg:w="1"/><text x="9.6892%" y="239.50"></text></g><g><title>open64 (1 samples, 0.07%)</title><rect x="9.5930%" y="213" width="0.0727%" height="15" fill="rgb(247,138,52)" fg:x="132" fg:w="1"/><text x="9.6892%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="9.5930%" y="197" width="0.0727%" height="15" fill="rgb(213,79,30)" fg:x="132" fg:w="1"/><text x="9.6892%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="9.5930%" y="181" width="0.0727%" height="15" fill="rgb(246,177,23)" fg:x="132" fg:w="1"/><text x="9.6892%" y="191.50"></text></g><g><title>std::fs::OpenOptions::_open (2 samples, 0.15%)</title><rect x="9.5930%" y="341" width="0.1453%" height="15" fill="rgb(230,62,27)" fg:x="132" fg:w="2"/><text x="9.6892%" y="351.50"></text></g><g><title>std::sys::unix::fs::File::open (2 samples, 0.15%)</title><rect x="9.5930%" y="325" width="0.1453%" height="15" fill="rgb(216,154,8)" fg:x="132" fg:w="2"/><text x="9.6892%" y="335.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.15%)</title><rect x="9.5930%" y="309" width="0.1453%" height="15" fill="rgb(244,35,45)" fg:x="132" fg:w="2"/><text x="9.6892%" y="319.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.15%)</title><rect x="9.5930%" y="293" width="0.1453%" height="15" fill="rgb(251,115,12)" fg:x="132" fg:w="2"/><text x="9.6892%" y="303.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.07%)</title><rect x="9.6657%" y="277" width="0.0727%" height="15" fill="rgb(240,54,50)" fg:x="133" fg:w="1"/><text x="9.7619%" y="287.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.07%)</title><rect x="9.6657%" y="261" width="0.0727%" height="15" fill="rgb(233,84,52)" fg:x="133" fg:w="1"/><text x="9.7619%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.07%)</title><rect x="9.7384%" y="341" width="0.0727%" height="15" fill="rgb(207,117,47)" fg:x="134" fg:w="1"/><text x="9.8345%" y="351.50"></text></g><g><title>cfree (1 samples, 0.07%)</title><rect x="9.8110%" y="309" width="0.0727%" height="15" fill="rgb(249,43,39)" fg:x="135" fg:w="1"/><text x="9.9072%" y="319.50"></text></g><g><title>aes_grinder::matrix::Matrix::sort_left (2 samples, 0.15%)</title><rect x="9.8110%" y="325" width="0.1453%" height="15" fill="rgb(209,38,44)" fg:x="135" fg:w="2"/><text x="9.9072%" y="335.50"></text></g><g><title>aes_grinder::algo::Algo::fusion_two_algo (18 samples, 1.31%)</title><rect x="9.5930%" y="357" width="1.3081%" height="15" fill="rgb(236,212,23)" fg:x="132" fg:w="18"/><text x="9.6892%" y="367.50">aes..</text></g><g><title>aes_grinder::matrix::Matrix::number_solutions (15 samples, 1.09%)</title><rect x="9.8110%" y="341" width="1.0901%" height="15" fill="rgb(242,79,21)" fg:x="135" fg:w="15"/><text x="9.9072%" y="351.50">ae..</text></g><g><title>[libc.so.6] (19 samples, 1.38%)</title><rect x="10.9012%" y="325" width="1.3808%" height="15" fill="rgb(211,96,35)" fg:x="150" fg:w="19"/><text x="10.9973%" y="335.50">[lib..</text></g><g><title>cfree (34 samples, 2.47%)</title><rect x="10.9012%" y="341" width="2.4709%" height="15" fill="rgb(253,215,40)" fg:x="150" fg:w="34"/><text x="10.9973%" y="351.50">cfree</text></g><g><title>[libc.so.6] (2 samples, 0.15%)</title><rect x="13.3721%" y="309" width="0.1453%" height="15" fill="rgb(211,81,21)" fg:x="184" fg:w="2"/><text x="13.4682%" y="319.50"></text></g><g><title>cfree (4 samples, 0.29%)</title><rect x="13.3721%" y="325" width="0.2907%" height="15" fill="rgb(208,190,38)" fg:x="184" fg:w="4"/><text x="13.4682%" y="335.50"></text></g><g><title>malloc (3 samples, 0.22%)</title><rect x="13.6628%" y="309" width="0.2180%" height="15" fill="rgb(235,213,38)" fg:x="188" fg:w="3"/><text x="13.7589%" y="319.50"></text></g><g><title>__rust_alloc (1 samples, 0.07%)</title><rect x="13.8808%" y="309" width="0.0727%" height="15" fill="rgb(237,122,38)" fg:x="191" fg:w="1"/><text x="13.9770%" y="319.50"></text></g><g><title>[libc.so.6] (3 samples, 0.22%)</title><rect x="13.9535%" y="309" width="0.2180%" height="15" fill="rgb(244,218,35)" fg:x="192" fg:w="3"/><text x="14.0496%" y="319.50"></text></g><g><title>_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17h0e5e9b6158b60215E.llvm.17367478371711167141 (15 samples, 1.09%)</title><rect x="13.6628%" y="325" width="1.0901%" height="15" fill="rgb(240,68,47)" fg:x="188" fg:w="15"/><text x="13.7589%" y="335.50">_Z..</text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hf7115fb884aa7bafE.llvm.3741384852135055347 (9 samples, 0.65%)</title><rect x="14.7529%" y="277" width="0.6541%" height="15" fill="rgb(210,16,53)" fg:x="203" fg:w="9"/><text x="14.8491%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (41 samples, 2.98%)</title><rect x="14.7529%" y="293" width="2.9797%" height="15" fill="rgb(235,124,12)" fg:x="203" fg:w="41"/><text x="14.8491%" y="303.50">core::hash:..</text></g><g><title>[libc.so.6] (2 samples, 0.15%)</title><rect x="17.7326%" y="293" width="0.1453%" height="15" fill="rgb(224,169,11)" fg:x="244" fg:w="2"/><text x="17.8287%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (92 samples, 6.69%)</title><rect x="14.7529%" y="309" width="6.6860%" height="15" fill="rgb(250,166,2)" fg:x="203" fg:w="92"/><text x="14.8491%" y="319.50">hashbrown::map::HashMap&lt;K,V..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (101 samples, 7.34%)</title><rect x="14.7529%" y="325" width="7.3401%" height="15" fill="rgb(242,216,29)" fg:x="203" fg:w="101"/><text x="14.8491%" y="335.50">&lt;core::iter::adapters::map::Ma..</text></g><g><title>malloc (6 samples, 0.44%)</title><rect x="22.0930%" y="309" width="0.4360%" height="15" fill="rgb(230,116,27)" fg:x="304" fg:w="6"/><text x="22.1892%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.07%)</title><rect x="22.5291%" y="309" width="0.0727%" height="15" fill="rgb(228,99,48)" fg:x="310" fg:w="1"/><text x="22.6252%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (11 samples, 0.80%)</title><rect x="22.6017%" y="229" width="0.7994%" height="15" fill="rgb(253,11,6)" fg:x="311" fg:w="11"/><text x="22.6979%" y="239.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.80%)</title><rect x="22.6017%" y="213" width="0.7994%" height="15" fill="rgb(247,143,39)" fg:x="311" fg:w="11"/><text x="22.6979%" y="223.50">c..</text></g><g><title>[libc.so.6] (11 samples, 0.80%)</title><rect x="22.6017%" y="197" width="0.7994%" height="15" fill="rgb(236,97,10)" fg:x="311" fg:w="11"/><text x="22.6979%" y="207.50">[..</text></g><g><title>[libc.so.6] (2 samples, 0.15%)</title><rect x="23.4012%" y="117" width="0.1453%" height="15" fill="rgb(233,208,19)" fg:x="322" fg:w="2"/><text x="23.4973%" y="127.50"></text></g><g><title>malloc (7 samples, 0.51%)</title><rect x="23.4012%" y="133" width="0.5087%" height="15" fill="rgb(216,164,2)" fg:x="322" fg:w="7"/><text x="23.4973%" y="143.50"></text></g><g><title>__rust_alloc (2 samples, 0.15%)</title><rect x="23.9099%" y="133" width="0.1453%" height="15" fill="rgb(220,129,5)" fg:x="329" fg:w="2"/><text x="24.0060%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.73%)</title><rect x="23.4012%" y="181" width="0.7267%" height="15" fill="rgb(242,17,10)" fg:x="322" fg:w="10"/><text x="23.4973%" y="191.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.73%)</title><rect x="23.4012%" y="165" width="0.7267%" height="15" fill="rgb(242,107,0)" fg:x="322" fg:w="10"/><text x="23.4973%" y="175.50">a..</text></g><g><title>alloc::alloc::alloc (10 samples, 0.73%)</title><rect x="23.4012%" y="149" width="0.7267%" height="15" fill="rgb(251,28,31)" fg:x="322" fg:w="10"/><text x="23.4973%" y="159.50">a..</text></g><g><title>__rdl_alloc (1 samples, 0.07%)</title><rect x="24.0552%" y="133" width="0.0727%" height="15" fill="rgb(233,223,10)" fg:x="331" fg:w="1"/><text x="24.1514%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (25 samples, 1.82%)</title><rect x="22.6017%" y="293" width="1.8169%" height="15" fill="rgb(215,21,27)" fg:x="311" fg:w="25"/><text x="22.6979%" y="303.50">&lt;alloc..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (25 samples, 1.82%)</title><rect x="22.6017%" y="277" width="1.8169%" height="15" fill="rgb(232,23,21)" fg:x="311" fg:w="25"/><text x="22.6979%" y="287.50">alloc:..</text></g><g><title>alloc::slice::hack::to_vec (25 samples, 1.82%)</title><rect x="22.6017%" y="261" width="1.8169%" height="15" fill="rgb(244,5,23)" fg:x="311" fg:w="25"/><text x="22.6979%" y="271.50">alloc:..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (25 samples, 1.82%)</title><rect x="22.6017%" y="245" width="1.8169%" height="15" fill="rgb(226,81,46)" fg:x="311" fg:w="25"/><text x="22.6979%" y="255.50">&lt;T as ..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 1.02%)</title><rect x="23.4012%" y="229" width="1.0174%" height="15" fill="rgb(247,70,30)" fg:x="322" fg:w="14"/><text x="23.4973%" y="239.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 1.02%)</title><rect x="23.4012%" y="213" width="1.0174%" height="15" fill="rgb(212,68,19)" fg:x="322" fg:w="14"/><text x="23.4973%" y="223.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 1.02%)</title><rect x="23.4012%" y="197" width="1.0174%" height="15" fill="rgb(240,187,13)" fg:x="322" fg:w="14"/><text x="23.4973%" y="207.50">al..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (36 samples, 2.62%)</title><rect x="22.6017%" y="309" width="2.6163%" height="15" fill="rgb(223,113,26)" fg:x="311" fg:w="36"/><text x="22.6979%" y="319.50">&lt;alloc::s..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (117 samples, 8.50%)</title><rect x="22.0930%" y="325" width="8.5029%" height="15" fill="rgb(206,192,2)" fg:x="304" fg:w="117"/><text x="22.1892%" y="335.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::clon..</text></g><g><title>aes_grinder::algo::Algo::get_all_variables (244 samples, 17.73%)</title><rect x="13.3721%" y="341" width="17.7326%" height="15" fill="rgb(241,108,4)" fg:x="184" fg:w="244"/><text x="13.4682%" y="351.50">aes_grinder::algo::Algo::get_all_variables</text></g><g><title>__rust_dealloc (1 samples, 0.07%)</title><rect x="31.1047%" y="341" width="0.0727%" height="15" fill="rgb(247,173,49)" fg:x="428" fg:w="1"/><text x="31.2008%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.15%)</title><rect x="31.1773%" y="325" width="0.1453%" height="15" fill="rgb(224,114,35)" fg:x="429" fg:w="2"/><text x="31.2735%" y="335.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.22%)</title><rect x="31.1773%" y="341" width="0.2180%" height="15" fill="rgb(245,159,27)" fg:x="429" fg:w="3"/><text x="31.2735%" y="351.50"></text></g><g><title>aes_grinder::algo::Algo::compare1 (297 samples, 21.58%)</title><rect x="10.9012%" y="357" width="21.5843%" height="15" fill="rgb(245,172,44)" fg:x="150" fg:w="297"/><text x="10.9973%" y="367.50">aes_grinder::algo::Algo::compare1</text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.07%)</title><rect x="32.4855%" y="85" width="0.0727%" height="15" fill="rgb(236,23,11)" fg:x="447" fg:w="1"/><text x="32.5816%" y="95.50"></text></g><g><title>core::fmt::Formatter::pad_integral (3 samples, 0.22%)</title><rect x="32.4855%" y="101" width="0.2180%" height="15" fill="rgb(205,117,38)" fg:x="447" fg:w="3"/><text x="32.5816%" y="111.50"></text></g><g><title>core::fmt::rt::Argument::fmt (4 samples, 0.29%)</title><rect x="32.4855%" y="149" width="0.2907%" height="15" fill="rgb(237,72,25)" fg:x="447" fg:w="4"/><text x="32.5816%" y="159.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (4 samples, 0.29%)</title><rect x="32.4855%" y="133" width="0.2907%" height="15" fill="rgb(244,70,9)" fg:x="447" fg:w="4"/><text x="32.5816%" y="143.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (4 samples, 0.29%)</title><rect x="32.4855%" y="117" width="0.2907%" height="15" fill="rgb(217,125,39)" fg:x="447" fg:w="4"/><text x="32.5816%" y="127.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.07%)</title><rect x="32.7035%" y="101" width="0.0727%" height="15" fill="rgb(235,36,10)" fg:x="450" fg:w="1"/><text x="32.7996%" y="111.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.07%)</title><rect x="32.7035%" y="85" width="0.0727%" height="15" fill="rgb(251,123,47)" fg:x="450" fg:w="1"/><text x="32.7996%" y="95.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.07%)</title><rect x="32.7035%" y="69" width="0.0727%" height="15" fill="rgb(221,13,13)" fg:x="450" fg:w="1"/><text x="32.7996%" y="79.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.07%)</title><rect x="32.7035%" y="53" width="0.0727%" height="15" fill="rgb(238,131,9)" fg:x="450" fg:w="1"/><text x="32.7996%" y="63.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.07%)</title><rect x="32.7035%" y="37" width="0.0727%" height="15" fill="rgb(211,50,8)" fg:x="450" fg:w="1"/><text x="32.7996%" y="47.50"></text></g><g><title>core::fmt::rt::Argument::fmt (5 samples, 0.36%)</title><rect x="32.4855%" y="197" width="0.3634%" height="15" fill="rgb(245,182,24)" fg:x="447" fg:w="5"/><text x="32.5816%" y="207.50"></text></g><g><title>&lt;aes_grinder::utils::Number as core::fmt::Display&gt;::fmt (5 samples, 0.36%)</title><rect x="32.4855%" y="181" width="0.3634%" height="15" fill="rgb(242,14,37)" fg:x="447" fg:w="5"/><text x="32.5816%" y="191.50"></text></g><g><title>core::fmt::write (5 samples, 0.36%)</title><rect x="32.4855%" y="165" width="0.3634%" height="15" fill="rgb(246,228,12)" fg:x="447" fg:w="5"/><text x="32.5816%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.07%)</title><rect x="32.7762%" y="149" width="0.0727%" height="15" fill="rgb(213,55,15)" fg:x="451" fg:w="1"/><text x="32.8723%" y="159.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.07%)</title><rect x="32.7762%" y="133" width="0.0727%" height="15" fill="rgb(209,9,3)" fg:x="451" fg:w="1"/><text x="32.8723%" y="143.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.07%)</title><rect x="32.7762%" y="117" width="0.0727%" height="15" fill="rgb(230,59,30)" fg:x="451" fg:w="1"/><text x="32.8723%" y="127.50"></text></g><g><title>std::sys_common::memchr::memrchr (1 samples, 0.07%)</title><rect x="32.8488%" y="133" width="0.0727%" height="15" fill="rgb(209,121,21)" fg:x="452" fg:w="1"/><text x="32.9450%" y="143.50"></text></g><g><title>std::sys::unix::memchr::memrchr (1 samples, 0.07%)</title><rect x="32.8488%" y="117" width="0.0727%" height="15" fill="rgb(220,109,13)" fg:x="452" fg:w="1"/><text x="32.9450%" y="127.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (1 samples, 0.07%)</title><rect x="32.8488%" y="101" width="0.0727%" height="15" fill="rgb(232,18,1)" fg:x="452" fg:w="1"/><text x="32.9450%" y="111.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="32.8488%" y="85" width="0.0727%" height="15" fill="rgb(215,41,42)" fg:x="452" fg:w="1"/><text x="32.9450%" y="95.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.15%)</title><rect x="32.8488%" y="165" width="0.1453%" height="15" fill="rgb(224,123,36)" fg:x="452" fg:w="2"/><text x="32.9450%" y="175.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.15%)</title><rect x="32.8488%" y="149" width="0.1453%" height="15" fill="rgb(240,125,3)" fg:x="452" fg:w="2"/><text x="32.9450%" y="159.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.07%)</title><rect x="32.9215%" y="133" width="0.0727%" height="15" fill="rgb(205,98,50)" fg:x="453" fg:w="1"/><text x="33.0177%" y="143.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (1 samples, 0.07%)</title><rect x="32.9215%" y="117" width="0.0727%" height="15" fill="rgb(205,185,37)" fg:x="453" fg:w="1"/><text x="33.0177%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.07%)</title><rect x="32.9215%" y="101" width="0.0727%" height="15" fill="rgb(238,207,15)" fg:x="453" fg:w="1"/><text x="33.0177%" y="111.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="32.9215%" y="85" width="0.0727%" height="15" fill="rgb(213,199,42)" fg:x="453" fg:w="1"/><text x="33.0177%" y="95.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3 samples, 0.22%)</title><rect x="32.8488%" y="181" width="0.2180%" height="15" fill="rgb(235,201,11)" fg:x="452" fg:w="3"/><text x="32.9450%" y="191.50"></text></g><g><title>std::io::stdio::_print (10 samples, 0.73%)</title><rect x="32.4855%" y="341" width="0.7267%" height="15" fill="rgb(207,46,11)" fg:x="447" fg:w="10"/><text x="32.5816%" y="351.50">s..</text></g><g><title>std::io::stdio::print_to (10 samples, 0.73%)</title><rect x="32.4855%" y="325" width="0.7267%" height="15" fill="rgb(241,35,35)" fg:x="447" fg:w="10"/><text x="32.5816%" y="335.50">s..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (10 samples, 0.73%)</title><rect x="32.4855%" y="309" width="0.7267%" height="15" fill="rgb(243,32,47)" fg:x="447" fg:w="10"/><text x="32.5816%" y="319.50">&lt;..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (10 samples, 0.73%)</title><rect x="32.4855%" y="293" width="0.7267%" height="15" fill="rgb(247,202,23)" fg:x="447" fg:w="10"/><text x="32.5816%" y="303.50">&lt;..</text></g><g><title>std::io::Write::write_fmt (10 samples, 0.73%)</title><rect x="32.4855%" y="277" width="0.7267%" height="15" fill="rgb(219,102,11)" fg:x="447" fg:w="10"/><text x="32.5816%" y="287.50">s..</text></g><g><title>core::fmt::write (10 samples, 0.73%)</title><rect x="32.4855%" y="261" width="0.7267%" height="15" fill="rgb(243,110,44)" fg:x="447" fg:w="10"/><text x="32.5816%" y="271.50">c..</text></g><g><title>core::fmt::rt::Argument::fmt (10 samples, 0.73%)</title><rect x="32.4855%" y="245" width="0.7267%" height="15" fill="rgb(222,74,54)" fg:x="447" fg:w="10"/><text x="32.5816%" y="255.50">c..</text></g><g><title>&lt;aes_grinder::matrix::Matrix as core::fmt::Display&gt;::fmt (10 samples, 0.73%)</title><rect x="32.4855%" y="229" width="0.7267%" height="15" fill="rgb(216,99,12)" fg:x="447" fg:w="10"/><text x="32.5816%" y="239.50">&lt;..</text></g><g><title>core::fmt::write (10 samples, 0.73%)</title><rect x="32.4855%" y="213" width="0.7267%" height="15" fill="rgb(226,22,26)" fg:x="447" fg:w="10"/><text x="32.5816%" y="223.50">c..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (5 samples, 0.36%)</title><rect x="32.8488%" y="197" width="0.3634%" height="15" fill="rgb(217,163,10)" fg:x="452" fg:w="5"/><text x="32.9450%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.07%)</title><rect x="33.2122%" y="325" width="0.0727%" height="15" fill="rgb(213,25,53)" fg:x="457" fg:w="1"/><text x="33.3084%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.07%)</title><rect x="33.2122%" y="309" width="0.0727%" height="15" fill="rgb(252,105,26)" fg:x="457" fg:w="1"/><text x="33.3084%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.07%)</title><rect x="33.2122%" y="293" width="0.0727%" height="15" fill="rgb(220,39,43)" fg:x="457" fg:w="1"/><text x="33.3084%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.07%)</title><rect x="33.2122%" y="277" width="0.0727%" height="15" fill="rgb(229,68,48)" fg:x="457" fg:w="1"/><text x="33.3084%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.07%)</title><rect x="33.2122%" y="261" width="0.0727%" height="15" fill="rgb(252,8,32)" fg:x="457" fg:w="1"/><text x="33.3084%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.07%)</title><rect x="33.2122%" y="245" width="0.0727%" height="15" fill="rgb(223,20,43)" fg:x="457" fg:w="1"/><text x="33.3084%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.07%)</title><rect x="33.2122%" y="229" width="0.0727%" height="15" fill="rgb(229,81,49)" fg:x="457" fg:w="1"/><text x="33.3084%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.07%)</title><rect x="33.2122%" y="213" width="0.0727%" height="15" fill="rgb(236,28,36)" fg:x="457" fg:w="1"/><text x="33.3084%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.07%)</title><rect x="33.2122%" y="197" width="0.0727%" height="15" fill="rgb(249,185,26)" fg:x="457" fg:w="1"/><text x="33.3084%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.07%)</title><rect x="33.2122%" y="181" width="0.0727%" height="15" fill="rgb(249,174,33)" fg:x="457" fg:w="1"/><text x="33.3084%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.07%)</title><rect x="33.2122%" y="165" width="0.0727%" height="15" fill="rgb(233,201,37)" fg:x="457" fg:w="1"/><text x="33.3084%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.07%)</title><rect x="33.2122%" y="149" width="0.0727%" height="15" fill="rgb(221,78,26)" fg:x="457" fg:w="1"/><text x="33.3084%" y="159.50"></text></g><g><title>malloc (1 samples, 0.07%)</title><rect x="33.2122%" y="133" width="0.0727%" height="15" fill="rgb(250,127,30)" fg:x="457" fg:w="1"/><text x="33.3084%" y="143.50"></text></g><g><title>aes_grinder::algo::Algo::base_solver (16 samples, 1.16%)</title><rect x="32.4855%" y="357" width="1.1628%" height="15" fill="rgb(230,49,44)" fg:x="447" fg:w="16"/><text x="32.5816%" y="367.50">aes..</text></g><g><title>aes_grinder::matrix::Matrix::number_solutions (6 samples, 0.44%)</title><rect x="33.2122%" y="341" width="0.4360%" height="15" fill="rgb(229,67,23)" fg:x="457" fg:w="6"/><text x="33.3084%" y="351.50"></text></g><g><title>cfree (1 samples, 0.07%)</title><rect x="33.6483%" y="341" width="0.0727%" height="15" fill="rgb(249,83,47)" fg:x="463" fg:w="1"/><text x="33.7444%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="33.6483%" y="325" width="0.0727%" height="15" fill="rgb(215,43,3)" fg:x="463" fg:w="1"/><text x="33.7444%" y="335.50"></text></g><g><title>_ZN4core3ptr69drop_in_place$LT$alloc..boxed..Box$LT$aes_grinder..algo..Algo$GT$$GT$17h7666bcbd21c04e9eE.llvm.17367478371711167141 (3 samples, 0.22%)</title><rect x="33.6483%" y="357" width="0.2180%" height="15" fill="rgb(238,154,13)" fg:x="463" fg:w="3"/><text x="33.7444%" y="367.50"></text></g><g><title>[libc.so.6] (4 samples, 0.29%)</title><rect x="33.8663%" y="325" width="0.2907%" height="15" fill="rgb(219,56,2)" fg:x="466" fg:w="4"/><text x="33.9624%" y="335.50"></text></g><g><title>cfree (8 samples, 0.58%)</title><rect x="33.8663%" y="341" width="0.5814%" height="15" fill="rgb(233,0,4)" fg:x="466" fg:w="8"/><text x="33.9624%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="34.4477%" y="293" width="0.0727%" height="15" fill="rgb(235,30,7)" fg:x="474" fg:w="1"/><text x="34.5438%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="34.4477%" y="277" width="0.0727%" height="15" fill="rgb(250,79,13)" fg:x="474" fg:w="1"/><text x="34.5438%" y="287.50"></text></g><g><title>[libc.so.6] (27 samples, 1.96%)</title><rect x="34.4477%" y="309" width="1.9622%" height="15" fill="rgb(211,146,34)" fg:x="474" fg:w="27"/><text x="34.5438%" y="319.50">[libc...</text></g><g><title>cfree (40 samples, 2.91%)</title><rect x="34.4477%" y="325" width="2.9070%" height="15" fill="rgb(228,22,38)" fg:x="474" fg:w="40"/><text x="34.5438%" y="335.50">cfree</text></g><g><title>[libc.so.6] (12 samples, 0.87%)</title><rect x="37.3547%" y="293" width="0.8721%" height="15" fill="rgb(235,168,5)" fg:x="514" fg:w="12"/><text x="37.4508%" y="303.50">[..</text></g><g><title>cfree (17 samples, 1.24%)</title><rect x="37.3547%" y="309" width="1.2355%" height="15" fill="rgb(221,155,16)" fg:x="514" fg:w="17"/><text x="37.4508%" y="319.50">cfr..</text></g><g><title>__rdl_dealloc (1 samples, 0.07%)</title><rect x="38.5901%" y="309" width="0.0727%" height="15" fill="rgb(215,215,53)" fg:x="531" fg:w="1"/><text x="38.6863%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.07%)</title><rect x="38.5901%" y="293" width="0.0727%" height="15" fill="rgb(223,4,10)" fg:x="531" fg:w="1"/><text x="38.6863%" y="303.50"></text></g><g><title>[libc.so.6] (13 samples, 0.94%)</title><rect x="38.6628%" y="277" width="0.9448%" height="15" fill="rgb(234,103,6)" fg:x="532" fg:w="13"/><text x="38.7589%" y="287.50">[l..</text></g><g><title>cfree (21 samples, 1.53%)</title><rect x="38.6628%" y="293" width="1.5262%" height="15" fill="rgb(227,97,0)" fg:x="532" fg:w="21"/><text x="38.7589%" y="303.50">cfree</text></g><g><title>[libc.so.6] (2 samples, 0.15%)</title><rect x="40.1890%" y="261" width="0.1453%" height="15" fill="rgb(234,150,53)" fg:x="553" fg:w="2"/><text x="40.2851%" y="271.50"></text></g><g><title>cfree (5 samples, 0.36%)</title><rect x="40.1890%" y="277" width="0.3634%" height="15" fill="rgb(228,201,54)" fg:x="553" fg:w="5"/><text x="40.2851%" y="287.50"></text></g><g><title>[libc.so.6] (4 samples, 0.29%)</title><rect x="40.5523%" y="245" width="0.2907%" height="15" fill="rgb(222,22,37)" fg:x="558" fg:w="4"/><text x="40.6485%" y="255.50"></text></g><g><title>cfree (5 samples, 0.36%)</title><rect x="40.5523%" y="261" width="0.3634%" height="15" fill="rgb(237,53,32)" fg:x="558" fg:w="5"/><text x="40.6485%" y="271.50"></text></g><g><title>cfree (1 samples, 0.07%)</title><rect x="40.9157%" y="245" width="0.0727%" height="15" fill="rgb(233,25,53)" fg:x="563" fg:w="1"/><text x="41.0119%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="40.9157%" y="229" width="0.0727%" height="15" fill="rgb(210,40,34)" fg:x="563" fg:w="1"/><text x="41.0119%" y="239.50"></text></g><g><title>_ZN4core3ptr69drop_in_place$LT$alloc..boxed..Box$LT$aes_grinder..algo..Algo$GT$$GT$17h7666bcbd21c04e9eE.llvm.17367478371711167141 (2 samples, 0.15%)</title><rect x="40.9157%" y="261" width="0.1453%" height="15" fill="rgb(241,220,44)" fg:x="563" fg:w="2"/><text x="41.0119%" y="271.50"></text></g><g><title>_ZN4core3ptr69drop_in_place$LT$alloc..boxed..Box$LT$aes_grinder..algo..Algo$GT$$GT$17h7666bcbd21c04e9eE.llvm.17367478371711167141 (1 samples, 0.07%)</title><rect x="40.9884%" y="245" width="0.0727%" height="15" fill="rgb(235,28,35)" fg:x="564" fg:w="1"/><text x="41.0845%" y="255.50"></text></g><g><title>_ZN4core3ptr69drop_in_place$LT$alloc..boxed..Box$LT$aes_grinder..algo..Algo$GT$$GT$17h7666bcbd21c04e9eE.llvm.17367478371711167141 (10 samples, 0.73%)</title><rect x="40.5523%" y="277" width="0.7267%" height="15" fill="rgb(210,56,17)" fg:x="558" fg:w="10"/><text x="40.6485%" y="287.50">_..</text></g><g><title>_ZN4core3ptr69drop_in_place$LT$alloc..boxed..Box$LT$aes_grinder..algo..Algo$GT$$GT$17h7666bcbd21c04e9eE.llvm.17367478371711167141 (20 samples, 1.45%)</title><rect x="40.1890%" y="293" width="1.4535%" height="15" fill="rgb(224,130,29)" fg:x="553" fg:w="20"/><text x="40.2851%" y="303.50">_ZN4..</text></g><g><title>_ZN4core3ptr69drop_in_place$LT$alloc..boxed..Box$LT$aes_grinder..algo..Algo$GT$$GT$17h7666bcbd21c04e9eE.llvm.17367478371711167141 (51 samples, 3.71%)</title><rect x="38.6628%" y="309" width="3.7064%" height="15" fill="rgb(235,212,8)" fg:x="532" fg:w="51"/><text x="38.7589%" y="319.50">_ZN4core3ptr69..</text></g><g><title>_ZN4core3ptr69drop_in_place$LT$alloc..boxed..Box$LT$aes_grinder..algo..Algo$GT$$GT$17h7666bcbd21c04e9eE.llvm.17367478371711167141 (86 samples, 6.25%)</title><rect x="37.3547%" y="325" width="6.2500%" height="15" fill="rgb(223,33,50)" fg:x="514" fg:w="86"/><text x="37.4508%" y="335.50">_ZN4core3ptr69drop_in_pla..</text></g><g><title>_ZN4core3ptr69drop_in_place$LT$alloc..boxed..Box$LT$aes_grinder..algo..Algo$GT$$GT$17h7666bcbd21c04e9eE.llvm.17367478371711167141 (169 samples, 12.28%)</title><rect x="34.4477%" y="341" width="12.2820%" height="15" fill="rgb(219,149,13)" fg:x="474" fg:w="169"/><text x="34.5438%" y="351.50">_ZN4core3ptr69drop_in_place$LT$alloc..boxed..Box$LT$..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (178 samples, 12.94%)</title><rect x="33.8663%" y="357" width="12.9360%" height="15" fill="rgb(250,156,29)" fg:x="466" fg:w="178"/><text x="33.9624%" y="367.50">&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop..</text></g><g><title>[libc.so.6] (9 samples, 0.65%)</title><rect x="46.8023%" y="325" width="0.6541%" height="15" fill="rgb(216,193,19)" fg:x="644" fg:w="9"/><text x="46.8985%" y="335.50"></text></g><g><title>malloc (11 samples, 0.80%)</title><rect x="46.8023%" y="341" width="0.7994%" height="15" fill="rgb(216,135,14)" fg:x="644" fg:w="11"/><text x="46.8985%" y="351.50">m..</text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.4070816328972715005 (49 samples, 3.56%)</title><rect x="47.6017%" y="293" width="3.5610%" height="15" fill="rgb(241,47,5)" fg:x="655" fg:w="49"/><text x="47.6979%" y="303.50">_ZN81_$LT$std..</text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hf7115fb884aa7bafE.llvm.3741384852135055347 (22 samples, 1.60%)</title><rect x="51.1628%" y="293" width="1.5988%" height="15" fill="rgb(233,42,35)" fg:x="704" fg:w="22"/><text x="51.2589%" y="303.50">_ZN71..</text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.4070816328972715005 (32 samples, 2.33%)</title><rect x="52.7616%" y="277" width="2.3256%" height="15" fill="rgb(231,13,6)" fg:x="726" fg:w="32"/><text x="52.8578%" y="287.50">_ZN81_$L..</text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hf7115fb884aa7bafE.llvm.3741384852135055347 (12 samples, 0.87%)</title><rect x="55.0872%" y="277" width="0.8721%" height="15" fill="rgb(207,181,40)" fg:x="758" fg:w="12"/><text x="55.1834%" y="287.50">_..</text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.4070816328972715005 (18 samples, 1.31%)</title><rect x="55.9593%" y="261" width="1.3081%" height="15" fill="rgb(254,173,49)" fg:x="770" fg:w="18"/><text x="56.0555%" y="271.50">_ZN..</text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hf7115fb884aa7bafE.llvm.3741384852135055347 (6 samples, 0.44%)</title><rect x="57.2674%" y="261" width="0.4360%" height="15" fill="rgb(221,1,38)" fg:x="788" fg:w="6"/><text x="57.3636%" y="271.50"></text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.4070816328972715005 (8 samples, 0.58%)</title><rect x="57.7035%" y="245" width="0.5814%" height="15" fill="rgb(206,124,46)" fg:x="794" fg:w="8"/><text x="57.7996%" y="255.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hf7115fb884aa7bafE.llvm.3741384852135055347 (3 samples, 0.22%)</title><rect x="58.2849%" y="245" width="0.2180%" height="15" fill="rgb(249,21,11)" fg:x="802" fg:w="3"/><text x="58.3810%" y="255.50"></text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.4070816328972715005 (3 samples, 0.22%)</title><rect x="58.5029%" y="229" width="0.2180%" height="15" fill="rgb(222,201,40)" fg:x="805" fg:w="3"/><text x="58.5991%" y="239.50"></text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.4070816328972715005 (1 samples, 0.07%)</title><rect x="58.7209%" y="213" width="0.0727%" height="15" fill="rgb(235,61,29)" fg:x="808" fg:w="1"/><text x="58.8171%" y="223.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hf7115fb884aa7bafE.llvm.3741384852135055347 (1 samples, 0.07%)</title><rect x="58.7936%" y="213" width="0.0727%" height="15" fill="rgb(219,207,3)" fg:x="809" fg:w="1"/><text x="58.8898%" y="223.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (1 samples, 0.07%)</title><rect x="58.8663%" y="213" width="0.0727%" height="15" fill="rgb(222,56,46)" fg:x="810" fg:w="1"/><text x="58.9624%" y="223.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (7 samples, 0.51%)</title><rect x="58.5029%" y="245" width="0.5087%" height="15" fill="rgb(239,76,54)" fg:x="805" fg:w="7"/><text x="58.5991%" y="255.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (4 samples, 0.29%)</title><rect x="58.7209%" y="229" width="0.2907%" height="15" fill="rgb(231,124,27)" fg:x="808" fg:w="4"/><text x="58.8171%" y="239.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (21 samples, 1.53%)</title><rect x="57.7035%" y="261" width="1.5262%" height="15" fill="rgb(249,195,6)" fg:x="794" fg:w="21"/><text x="57.7996%" y="271.50">&lt;aes..</text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (49 samples, 3.56%)</title><rect x="55.9593%" y="277" width="3.5610%" height="15" fill="rgb(237,174,47)" fg:x="770" fg:w="49"/><text x="56.0555%" y="287.50">&lt;aes_grinder:..</text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (98 samples, 7.12%)</title><rect x="52.7616%" y="293" width="7.1221%" height="15" fill="rgb(206,201,31)" fg:x="726" fg:w="98"/><text x="52.8578%" y="303.50">&lt;aes_grinder::algo::Algo as c..</text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (184 samples, 13.37%)</title><rect x="47.6017%" y="309" width="13.3721%" height="15" fill="rgb(231,57,52)" fg:x="655" fg:w="184"/><text x="47.6979%" y="319.50">&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash</text></g><g><title>core::hash::BuildHasher::hash_one (190 samples, 13.81%)</title><rect x="47.6017%" y="325" width="13.8081%" height="15" fill="rgb(248,177,22)" fg:x="655" fg:w="190"/><text x="47.6979%" y="335.50">core::hash::BuildHasher::hash_one</text></g><g><title>[libc.so.6] (20 samples, 1.45%)</title><rect x="61.4099%" y="261" width="1.4535%" height="15" fill="rgb(215,211,37)" fg:x="845" fg:w="20"/><text x="61.5060%" y="271.50">[lib..</text></g><g><title>malloc (71 samples, 5.16%)</title><rect x="61.4099%" y="309" width="5.1599%" height="15" fill="rgb(241,128,51)" fg:x="845" fg:w="71"/><text x="61.5060%" y="319.50">malloc</text></g><g><title>[libc.so.6] (71 samples, 5.16%)</title><rect x="61.4099%" y="293" width="5.1599%" height="15" fill="rgb(227,165,31)" fg:x="845" fg:w="71"/><text x="61.5060%" y="303.50">[libc.so.6]</text></g><g><title>[libc.so.6] (71 samples, 5.16%)</title><rect x="61.4099%" y="277" width="5.1599%" height="15" fill="rgb(228,167,24)" fg:x="845" fg:w="71"/><text x="61.5060%" y="287.50">[libc.so.6]</text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.4070816328972715005 (42 samples, 3.05%)</title><rect x="66.5698%" y="277" width="3.0523%" height="15" fill="rgb(228,143,12)" fg:x="916" fg:w="42"/><text x="66.6659%" y="287.50">_ZN81_$LT$s..</text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hf7115fb884aa7bafE.llvm.3741384852135055347 (20 samples, 1.45%)</title><rect x="69.6221%" y="277" width="1.4535%" height="15" fill="rgb(249,149,8)" fg:x="958" fg:w="20"/><text x="69.7182%" y="287.50">_ZN7..</text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.4070816328972715005 (21 samples, 1.53%)</title><rect x="71.0756%" y="261" width="1.5262%" height="15" fill="rgb(243,35,44)" fg:x="978" fg:w="21"/><text x="71.1717%" y="271.50">_ZN8..</text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hf7115fb884aa7bafE.llvm.3741384852135055347 (5 samples, 0.36%)</title><rect x="72.6017%" y="261" width="0.3634%" height="15" fill="rgb(246,89,9)" fg:x="999" fg:w="5"/><text x="72.6979%" y="271.50"></text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.4070816328972715005 (14 samples, 1.02%)</title><rect x="72.9651%" y="245" width="1.0174%" height="15" fill="rgb(233,213,13)" fg:x="1004" fg:w="14"/><text x="73.0613%" y="255.50">_Z..</text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hf7115fb884aa7bafE.llvm.3741384852135055347 (3 samples, 0.22%)</title><rect x="73.9826%" y="245" width="0.2180%" height="15" fill="rgb(233,141,41)" fg:x="1018" fg:w="3"/><text x="74.0787%" y="255.50"></text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.4070816328972715005 (7 samples, 0.51%)</title><rect x="74.2006%" y="229" width="0.5087%" height="15" fill="rgb(239,167,4)" fg:x="1021" fg:w="7"/><text x="74.2967%" y="239.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hf7115fb884aa7bafE.llvm.3741384852135055347 (1 samples, 0.07%)</title><rect x="74.7093%" y="229" width="0.0727%" height="15" fill="rgb(209,217,16)" fg:x="1028" fg:w="1"/><text x="74.8055%" y="239.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hf7115fb884aa7bafE.llvm.3741384852135055347 (1 samples, 0.07%)</title><rect x="74.7820%" y="197" width="0.0727%" height="15" fill="rgb(219,88,35)" fg:x="1029" fg:w="1"/><text x="74.8781%" y="207.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (2 samples, 0.15%)</title><rect x="74.7820%" y="229" width="0.1453%" height="15" fill="rgb(220,193,23)" fg:x="1029" fg:w="2"/><text x="74.8781%" y="239.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (2 samples, 0.15%)</title><rect x="74.7820%" y="213" width="0.1453%" height="15" fill="rgb(230,90,52)" fg:x="1029" fg:w="2"/><text x="74.8781%" y="223.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (12 samples, 0.87%)</title><rect x="74.2006%" y="245" width="0.8721%" height="15" fill="rgb(252,106,19)" fg:x="1021" fg:w="12"/><text x="74.2967%" y="255.50">&lt;..</text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (32 samples, 2.33%)</title><rect x="72.9651%" y="261" width="2.3256%" height="15" fill="rgb(206,74,20)" fg:x="1004" fg:w="32"/><text x="73.0613%" y="271.50">&lt;aes_gri..</text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (60 samples, 4.36%)</title><rect x="71.0756%" y="277" width="4.3605%" height="15" fill="rgb(230,138,44)" fg:x="978" fg:w="60"/><text x="71.1717%" y="287.50">&lt;aes_grinder::alg..</text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (132 samples, 9.59%)</title><rect x="66.5698%" y="293" width="9.5930%" height="15" fill="rgb(235,182,43)" fg:x="916" fg:w="132"/><text x="66.6659%" y="303.50">&lt;aes_grinder::algo::Algo as core::hash::..</text></g><g><title>core::hash::BuildHasher::hash_one (135 samples, 9.81%)</title><rect x="66.5698%" y="309" width="9.8110%" height="15" fill="rgb(242,16,51)" fg:x="916" fg:w="135"/><text x="66.6659%" y="319.50">core::hash::BuildHasher::hash_one</text></g><g><title>_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17h4f9c69f17969f592E.llvm.17367478371711167141 (213 samples, 15.48%)</title><rect x="61.4099%" y="325" width="15.4797%" height="15" fill="rgb(248,9,4)" fg:x="845" fg:w="213"/><text x="61.5060%" y="335.50">_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17h4f9c69f..</text></g><g><title>&lt;aes_grinder::algo::Algo as core::cmp::PartialEq&gt;::eq (2 samples, 0.15%)</title><rect x="76.8895%" y="325" width="0.1453%" height="15" fill="rgb(210,31,22)" fg:x="1058" fg:w="2"/><text x="76.9857%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (412 samples, 29.94%)</title><rect x="47.6017%" y="341" width="29.9419%" height="15" fill="rgb(239,54,39)" fg:x="655" fg:w="412"/><text x="47.6979%" y="351.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hf7115fb884aa7bafE.llvm.3741384852135055347 (1 samples, 0.07%)</title><rect x="77.5436%" y="293" width="0.0727%" height="15" fill="rgb(230,99,41)" fg:x="1067" fg:w="1"/><text x="77.6398%" y="303.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17hf7115fb884aa7bafE.llvm.3741384852135055347 (1 samples, 0.07%)</title><rect x="77.6163%" y="277" width="0.0727%" height="15" fill="rgb(253,106,12)" fg:x="1068" fg:w="1"/><text x="77.7124%" y="287.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (2 samples, 0.15%)</title><rect x="77.6163%" y="293" width="0.1453%" height="15" fill="rgb(213,46,41)" fg:x="1068" fg:w="2"/><text x="77.7124%" y="303.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (1 samples, 0.07%)</title><rect x="77.6890%" y="277" width="0.0727%" height="15" fill="rgb(215,133,35)" fg:x="1069" fg:w="1"/><text x="77.7851%" y="287.50"></text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.4070816328972715005 (1 samples, 0.07%)</title><rect x="77.6890%" y="261" width="0.0727%" height="15" fill="rgb(213,28,5)" fg:x="1069" fg:w="1"/><text x="77.7851%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.29%)</title><rect x="77.5436%" y="325" width="0.2907%" height="15" fill="rgb(215,77,49)" fg:x="1067" fg:w="4"/><text x="77.6398%" y="335.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (4 samples, 0.29%)</title><rect x="77.5436%" y="309" width="0.2907%" height="15" fill="rgb(248,100,22)" fg:x="1067" fg:w="4"/><text x="77.6398%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (5 samples, 0.36%)</title><rect x="77.5436%" y="341" width="0.3634%" height="15" fill="rgb(208,67,9)" fg:x="1067" fg:w="5"/><text x="77.6398%" y="351.50"></text></g><g><title>malloc (11 samples, 0.80%)</title><rect x="77.9070%" y="325" width="0.7994%" height="15" fill="rgb(219,133,21)" fg:x="1072" fg:w="11"/><text x="78.0031%" y="335.50">m..</text></g><g><title>[libc.so.6] (11 samples, 0.80%)</title><rect x="77.9070%" y="309" width="0.7994%" height="15" fill="rgb(246,46,29)" fg:x="1072" fg:w="11"/><text x="78.0031%" y="319.50">[..</text></g><g><title>__rust_alloc (1 samples, 0.07%)</title><rect x="78.7064%" y="325" width="0.0727%" height="15" fill="rgb(246,185,52)" fg:x="1083" fg:w="1"/><text x="78.8025%" y="335.50"></text></g><g><title>[libc.so.6] (4 samples, 0.29%)</title><rect x="78.7791%" y="293" width="0.2907%" height="15" fill="rgb(252,136,11)" fg:x="1084" fg:w="4"/><text x="78.8752%" y="303.50"></text></g><g><title>malloc (6 samples, 0.44%)</title><rect x="78.7791%" y="309" width="0.4360%" height="15" fill="rgb(219,138,53)" fg:x="1084" fg:w="6"/><text x="78.8752%" y="319.50"></text></g><g><title>[libc.so.6] (2 samples, 0.15%)</title><rect x="79.2151%" y="277" width="0.1453%" height="15" fill="rgb(211,51,23)" fg:x="1090" fg:w="2"/><text x="79.3113%" y="287.50"></text></g><g><title>malloc (4 samples, 0.29%)</title><rect x="79.2151%" y="293" width="0.2907%" height="15" fill="rgb(247,221,28)" fg:x="1090" fg:w="4"/><text x="79.3113%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="79.5058%" y="245" width="0.0727%" height="15" fill="rgb(251,222,45)" fg:x="1094" fg:w="1"/><text x="79.6020%" y="255.50"></text></g><g><title>malloc (2 samples, 0.15%)</title><rect x="79.5058%" y="277" width="0.1453%" height="15" fill="rgb(217,162,53)" fg:x="1094" fg:w="2"/><text x="79.6020%" y="287.50"></text></g><g><title>[libc.so.6] (2 samples, 0.15%)</title><rect x="79.5058%" y="261" width="0.1453%" height="15" fill="rgb(229,93,14)" fg:x="1094" fg:w="2"/><text x="79.6020%" y="271.50"></text></g><g><title>malloc (1 samples, 0.07%)</title><rect x="79.6512%" y="261" width="0.0727%" height="15" fill="rgb(209,67,49)" fg:x="1096" fg:w="1"/><text x="79.7473%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="79.6512%" y="245" width="0.0727%" height="15" fill="rgb(213,87,29)" fg:x="1096" fg:w="1"/><text x="79.7473%" y="255.50"></text></g><g><title>malloc (3 samples, 0.22%)</title><rect x="79.7238%" y="245" width="0.2180%" height="15" fill="rgb(205,151,52)" fg:x="1097" fg:w="3"/><text x="79.8200%" y="255.50"></text></g><g><title>[libc.so.6] (3 samples, 0.22%)</title><rect x="79.7238%" y="229" width="0.2180%" height="15" fill="rgb(253,215,39)" fg:x="1097" fg:w="3"/><text x="79.8200%" y="239.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="79.9419%" y="37" width="0.0727%" height="15" fill="rgb(221,220,41)" fg:x="1100" fg:w="1"/><text x="80.0380%" y="47.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.22%)</title><rect x="79.9419%" y="117" width="0.2180%" height="15" fill="rgb(218,133,21)" fg:x="1100" fg:w="3"/><text x="80.0380%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.22%)</title><rect x="79.9419%" y="101" width="0.2180%" height="15" fill="rgb(221,193,43)" fg:x="1100" fg:w="3"/><text x="80.0380%" y="111.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.22%)</title><rect x="79.9419%" y="85" width="0.2180%" height="15" fill="rgb(240,128,52)" fg:x="1100" fg:w="3"/><text x="80.0380%" y="95.50"></text></g><g><title>malloc (3 samples, 0.22%)</title><rect x="79.9419%" y="69" width="0.2180%" height="15" fill="rgb(253,114,12)" fg:x="1100" fg:w="3"/><text x="80.0380%" y="79.50"></text></g><g><title>[libc.so.6] (3 samples, 0.22%)</title><rect x="79.9419%" y="53" width="0.2180%" height="15" fill="rgb(215,223,47)" fg:x="1100" fg:w="3"/><text x="80.0380%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.29%)</title><rect x="79.9419%" y="245" width="0.2907%" height="15" fill="rgb(248,225,23)" fg:x="1100" fg:w="4"/><text x="80.0380%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.29%)</title><rect x="79.9419%" y="229" width="0.2907%" height="15" fill="rgb(250,108,0)" fg:x="1100" fg:w="4"/><text x="80.0380%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.29%)</title><rect x="79.9419%" y="213" width="0.2907%" height="15" fill="rgb(228,208,7)" fg:x="1100" fg:w="4"/><text x="80.0380%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.29%)</title><rect x="79.9419%" y="197" width="0.2907%" height="15" fill="rgb(244,45,10)" fg:x="1100" fg:w="4"/><text x="80.0380%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.29%)</title><rect x="79.9419%" y="181" width="0.2907%" height="15" fill="rgb(207,125,25)" fg:x="1100" fg:w="4"/><text x="80.0380%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.29%)</title><rect x="79.9419%" y="165" width="0.2907%" height="15" fill="rgb(210,195,18)" fg:x="1100" fg:w="4"/><text x="80.0380%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.29%)</title><rect x="79.9419%" y="149" width="0.2907%" height="15" fill="rgb(249,80,12)" fg:x="1100" fg:w="4"/><text x="80.0380%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.29%)</title><rect x="79.9419%" y="133" width="0.2907%" height="15" fill="rgb(221,65,9)" fg:x="1100" fg:w="4"/><text x="80.0380%" y="143.50"></text></g><g><title>_ZN62_$LT$aes_grinder..algo..Algo$u20$as$u20$core..clone..Clone$GT$5clone17h11fc787c69c38227E.llvm.10191714769175146728 (13 samples, 0.94%)</title><rect x="79.6512%" y="277" width="0.9448%" height="15" fill="rgb(235,49,36)" fg:x="1096" fg:w="13"/><text x="79.7473%" y="287.50">_Z..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.87%)</title><rect x="79.7238%" y="261" width="0.8721%" height="15" fill="rgb(225,32,20)" fg:x="1097" fg:w="12"/><text x="79.8200%" y="271.50">&lt;..</text></g><g><title>malloc (4 samples, 0.29%)</title><rect x="80.5959%" y="261" width="0.2907%" height="15" fill="rgb(215,141,46)" fg:x="1109" fg:w="4"/><text x="80.6921%" y="271.50"></text></g><g><title>[libc.so.6] (4 samples, 0.29%)</title><rect x="80.5959%" y="245" width="0.2907%" height="15" fill="rgb(250,160,47)" fg:x="1109" fg:w="4"/><text x="80.6921%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="80.8866%" y="69" width="0.0727%" height="15" fill="rgb(216,222,40)" fg:x="1113" fg:w="1"/><text x="80.9828%" y="79.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="80.8866%" y="53" width="0.0727%" height="15" fill="rgb(234,217,39)" fg:x="1113" fg:w="1"/><text x="80.9828%" y="63.50"></text></g><g><title>malloc (2 samples, 0.15%)</title><rect x="80.8866%" y="85" width="0.1453%" height="15" fill="rgb(207,178,40)" fg:x="1113" fg:w="2"/><text x="80.9828%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.22%)</title><rect x="80.8866%" y="245" width="0.2180%" height="15" fill="rgb(221,136,13)" fg:x="1113" fg:w="3"/><text x="80.9828%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.22%)</title><rect x="80.8866%" y="229" width="0.2180%" height="15" fill="rgb(249,199,10)" fg:x="1113" fg:w="3"/><text x="80.9828%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.22%)</title><rect x="80.8866%" y="213" width="0.2180%" height="15" fill="rgb(249,222,13)" fg:x="1113" fg:w="3"/><text x="80.9828%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.22%)</title><rect x="80.8866%" y="197" width="0.2180%" height="15" fill="rgb(244,185,38)" fg:x="1113" fg:w="3"/><text x="80.9828%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.22%)</title><rect x="80.8866%" y="181" width="0.2180%" height="15" fill="rgb(236,202,9)" fg:x="1113" fg:w="3"/><text x="80.9828%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.22%)</title><rect x="80.8866%" y="165" width="0.2180%" height="15" fill="rgb(250,229,37)" fg:x="1113" fg:w="3"/><text x="80.9828%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.22%)</title><rect x="80.8866%" y="149" width="0.2180%" height="15" fill="rgb(206,174,23)" fg:x="1113" fg:w="3"/><text x="80.9828%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.22%)</title><rect x="80.8866%" y="133" width="0.2180%" height="15" fill="rgb(211,33,43)" fg:x="1113" fg:w="3"/><text x="80.9828%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.22%)</title><rect x="80.8866%" y="117" width="0.2180%" height="15" fill="rgb(245,58,50)" fg:x="1113" fg:w="3"/><text x="80.9828%" y="127.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.22%)</title><rect x="80.8866%" y="101" width="0.2180%" height="15" fill="rgb(244,68,36)" fg:x="1113" fg:w="3"/><text x="80.9828%" y="111.50"></text></g><g><title>__rust_alloc (1 samples, 0.07%)</title><rect x="81.0320%" y="85" width="0.0727%" height="15" fill="rgb(232,229,15)" fg:x="1115" fg:w="1"/><text x="81.1281%" y="95.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.29%)</title><rect x="80.8866%" y="261" width="0.2907%" height="15" fill="rgb(254,30,23)" fg:x="1113" fg:w="4"/><text x="80.9828%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.87%)</title><rect x="80.5959%" y="277" width="0.8721%" height="15" fill="rgb(235,160,14)" fg:x="1109" fg:w="12"/><text x="80.6921%" y="287.50">&lt;..</text></g><g><title>_ZN62_$LT$aes_grinder..algo..Algo$u20$as$u20$core..clone..Clone$GT$5clone17h11fc787c69c38227E.llvm.10191714769175146728 (30 samples, 2.18%)</title><rect x="79.5058%" y="293" width="2.1802%" height="15" fill="rgb(212,155,44)" fg:x="1094" fg:w="30"/><text x="79.6020%" y="303.50">_ZN62_$..</text></g><g><title>[libc.so.6] (2 samples, 0.15%)</title><rect x="81.6860%" y="261" width="0.1453%" height="15" fill="rgb(226,2,50)" fg:x="1124" fg:w="2"/><text x="81.7822%" y="271.50"></text></g><g><title>malloc (3 samples, 0.22%)</title><rect x="81.6860%" y="277" width="0.2180%" height="15" fill="rgb(234,177,6)" fg:x="1124" fg:w="3"/><text x="81.7822%" y="287.50"></text></g><g><title>__rdl_alloc (1 samples, 0.07%)</title><rect x="81.9041%" y="277" width="0.0727%" height="15" fill="rgb(217,24,9)" fg:x="1127" fg:w="1"/><text x="82.0002%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.22%)</title><rect x="81.9767%" y="197" width="0.2180%" height="15" fill="rgb(220,13,46)" fg:x="1128" fg:w="3"/><text x="82.0729%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.22%)</title><rect x="81.9767%" y="181" width="0.2180%" height="15" fill="rgb(239,221,27)" fg:x="1128" fg:w="3"/><text x="82.0729%" y="191.50"></text></g><g><title>[libc.so.6] (3 samples, 0.22%)</title><rect x="81.9767%" y="165" width="0.2180%" height="15" fill="rgb(222,198,25)" fg:x="1128" fg:w="3"/><text x="82.0729%" y="175.50"></text></g><g><title>[libc.so.6] (2 samples, 0.15%)</title><rect x="82.1948%" y="85" width="0.1453%" height="15" fill="rgb(211,99,13)" fg:x="1131" fg:w="2"/><text x="82.2909%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.29%)</title><rect x="82.1948%" y="149" width="0.2907%" height="15" fill="rgb(232,111,31)" fg:x="1131" fg:w="4"/><text x="82.2909%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.29%)</title><rect x="82.1948%" y="133" width="0.2907%" height="15" fill="rgb(245,82,37)" fg:x="1131" fg:w="4"/><text x="82.2909%" y="143.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.29%)</title><rect x="82.1948%" y="117" width="0.2907%" height="15" fill="rgb(227,149,46)" fg:x="1131" fg:w="4"/><text x="82.2909%" y="127.50"></text></g><g><title>malloc (4 samples, 0.29%)</title><rect x="82.1948%" y="101" width="0.2907%" height="15" fill="rgb(218,36,50)" fg:x="1131" fg:w="4"/><text x="82.2909%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (9 samples, 0.65%)</title><rect x="81.9767%" y="261" width="0.6541%" height="15" fill="rgb(226,80,48)" fg:x="1128" fg:w="9"/><text x="82.0729%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (9 samples, 0.65%)</title><rect x="81.9767%" y="245" width="0.6541%" height="15" fill="rgb(238,224,15)" fg:x="1128" fg:w="9"/><text x="82.0729%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (9 samples, 0.65%)</title><rect x="81.9767%" y="229" width="0.6541%" height="15" fill="rgb(241,136,10)" fg:x="1128" fg:w="9"/><text x="82.0729%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (9 samples, 0.65%)</title><rect x="81.9767%" y="213" width="0.6541%" height="15" fill="rgb(208,32,45)" fg:x="1128" fg:w="9"/><text x="82.0729%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.44%)</title><rect x="82.1948%" y="197" width="0.4360%" height="15" fill="rgb(207,135,9)" fg:x="1131" fg:w="6"/><text x="82.2909%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.44%)</title><rect x="82.1948%" y="181" width="0.4360%" height="15" fill="rgb(206,86,44)" fg:x="1131" fg:w="6"/><text x="82.2909%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.44%)</title><rect x="82.1948%" y="165" width="0.4360%" height="15" fill="rgb(245,177,15)" fg:x="1131" fg:w="6"/><text x="82.2909%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (14 samples, 1.02%)</title><rect x="81.9767%" y="277" width="1.0174%" height="15" fill="rgb(206,64,50)" fg:x="1128" fg:w="14"/><text x="82.0729%" y="287.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (25 samples, 1.82%)</title><rect x="81.6860%" y="293" width="1.8169%" height="15" fill="rgb(234,36,40)" fg:x="1124" fg:w="25"/><text x="81.7822%" y="303.50">&lt;alloc..</text></g><g><title>_ZN62_$LT$aes_grinder..algo..Algo$u20$as$u20$core..clone..Clone$GT$5clone17h11fc787c69c38227E.llvm.10191714769175146728 (62 samples, 4.51%)</title><rect x="79.2151%" y="309" width="4.5058%" height="15" fill="rgb(213,64,8)" fg:x="1090" fg:w="62"/><text x="79.3113%" y="319.50">_ZN62_$LT$aes_gri..</text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="83.7209%" y="261" width="0.0727%" height="15" fill="rgb(210,75,36)" fg:x="1152" fg:w="1"/><text x="83.8171%" y="271.50"></text></g><g><title>[libc.so.6] (6 samples, 0.44%)</title><rect x="83.7209%" y="277" width="0.4360%" height="15" fill="rgb(229,88,21)" fg:x="1152" fg:w="6"/><text x="83.8171%" y="287.50"></text></g><g><title>malloc (14 samples, 1.02%)</title><rect x="83.7209%" y="293" width="1.0174%" height="15" fill="rgb(252,204,47)" fg:x="1152" fg:w="14"/><text x="83.8171%" y="303.50">ma..</text></g><g><title>__rust_alloc (2 samples, 0.15%)</title><rect x="84.7384%" y="293" width="0.1453%" height="15" fill="rgb(208,77,27)" fg:x="1166" fg:w="2"/><text x="84.8345%" y="303.50"></text></g><g><title>__rdl_alloc (1 samples, 0.07%)</title><rect x="84.8837%" y="293" width="0.0727%" height="15" fill="rgb(221,76,26)" fg:x="1168" fg:w="1"/><text x="84.9799%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (9 samples, 0.65%)</title><rect x="84.9564%" y="213" width="0.6541%" height="15" fill="rgb(225,139,18)" fg:x="1169" fg:w="9"/><text x="85.0525%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.65%)</title><rect x="84.9564%" y="197" width="0.6541%" height="15" fill="rgb(230,137,11)" fg:x="1169" fg:w="9"/><text x="85.0525%" y="207.50"></text></g><g><title>[libc.so.6] (9 samples, 0.65%)</title><rect x="84.9564%" y="181" width="0.6541%" height="15" fill="rgb(212,28,1)" fg:x="1169" fg:w="9"/><text x="85.0525%" y="191.50"></text></g><g><title>[libc.so.6] (12 samples, 0.87%)</title><rect x="85.6105%" y="101" width="0.8721%" height="15" fill="rgb(248,164,17)" fg:x="1178" fg:w="12"/><text x="85.7066%" y="111.50">[..</text></g><g><title>malloc (16 samples, 1.16%)</title><rect x="85.6105%" y="117" width="1.1628%" height="15" fill="rgb(222,171,42)" fg:x="1178" fg:w="16"/><text x="85.7066%" y="127.50">mal..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 1.24%)</title><rect x="85.6105%" y="165" width="1.2355%" height="15" fill="rgb(243,84,45)" fg:x="1178" fg:w="17"/><text x="85.7066%" y="175.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 1.24%)</title><rect x="85.6105%" y="149" width="1.2355%" height="15" fill="rgb(252,49,23)" fg:x="1178" fg:w="17"/><text x="85.7066%" y="159.50">all..</text></g><g><title>alloc::alloc::alloc (17 samples, 1.24%)</title><rect x="85.6105%" y="133" width="1.2355%" height="15" fill="rgb(215,19,7)" fg:x="1178" fg:w="17"/><text x="85.7066%" y="143.50">all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (28 samples, 2.03%)</title><rect x="84.9564%" y="277" width="2.0349%" height="15" fill="rgb(238,81,41)" fg:x="1169" fg:w="28"/><text x="85.0525%" y="287.50">&lt;alloc..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (28 samples, 2.03%)</title><rect x="84.9564%" y="261" width="2.0349%" height="15" fill="rgb(210,199,37)" fg:x="1169" fg:w="28"/><text x="85.0525%" y="271.50">alloc:..</text></g><g><title>alloc::slice::hack::to_vec (28 samples, 2.03%)</title><rect x="84.9564%" y="245" width="2.0349%" height="15" fill="rgb(244,192,49)" fg:x="1169" fg:w="28"/><text x="85.0525%" y="255.50">alloc:..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (28 samples, 2.03%)</title><rect x="84.9564%" y="229" width="2.0349%" height="15" fill="rgb(226,211,11)" fg:x="1169" fg:w="28"/><text x="85.0525%" y="239.50">&lt;T as ..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (19 samples, 1.38%)</title><rect x="85.6105%" y="213" width="1.3808%" height="15" fill="rgb(236,162,54)" fg:x="1178" fg:w="19"/><text x="85.7066%" y="223.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (19 samples, 1.38%)</title><rect x="85.6105%" y="197" width="1.3808%" height="15" fill="rgb(220,229,9)" fg:x="1178" fg:w="19"/><text x="85.7066%" y="207.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (19 samples, 1.38%)</title><rect x="85.6105%" y="181" width="1.3808%" height="15" fill="rgb(250,87,22)" fg:x="1178" fg:w="19"/><text x="85.7066%" y="191.50">allo..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (34 samples, 2.47%)</title><rect x="84.9564%" y="293" width="2.4709%" height="15" fill="rgb(239,43,17)" fg:x="1169" fg:w="34"/><text x="85.0525%" y="303.50">&lt;alloc::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (68 samples, 4.94%)</title><rect x="83.7209%" y="309" width="4.9419%" height="15" fill="rgb(231,177,25)" fg:x="1152" fg:w="68"/><text x="83.8171%" y="319.50">&lt;alloc::vec::Vec&lt;T,..</text></g><g><title>_ZN62_$LT$aes_grinder..algo..Algo$u20$as$u20$core..clone..Clone$GT$5clone17h11fc787c69c38227E.llvm.10191714769175146728 (147 samples, 10.68%)</title><rect x="78.7791%" y="325" width="10.6831%" height="15" fill="rgb(219,179,1)" fg:x="1084" fg:w="147"/><text x="78.8752%" y="335.50">_ZN62_$LT$aes_grinder..algo..Algo$u20$as$u20$..</text></g><g><title>[libc.so.6] (8 samples, 0.58%)</title><rect x="89.4622%" y="293" width="0.5814%" height="15" fill="rgb(238,219,53)" fg:x="1231" fg:w="8"/><text x="89.5584%" y="303.50"></text></g><g><title>malloc (16 samples, 1.16%)</title><rect x="89.4622%" y="309" width="1.1628%" height="15" fill="rgb(232,167,36)" fg:x="1231" fg:w="16"/><text x="89.5584%" y="319.50">mal..</text></g><g><title>__rust_alloc (1 samples, 0.07%)</title><rect x="90.6250%" y="309" width="0.0727%" height="15" fill="rgb(244,19,51)" fg:x="1247" fg:w="1"/><text x="90.7212%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (11 samples, 0.80%)</title><rect x="90.6977%" y="229" width="0.7994%" height="15" fill="rgb(224,6,22)" fg:x="1248" fg:w="11"/><text x="90.7938%" y="239.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.80%)</title><rect x="90.6977%" y="213" width="0.7994%" height="15" fill="rgb(224,145,5)" fg:x="1248" fg:w="11"/><text x="90.7938%" y="223.50">c..</text></g><g><title>[libc.so.6] (11 samples, 0.80%)</title><rect x="90.6977%" y="197" width="0.7994%" height="15" fill="rgb(234,130,49)" fg:x="1248" fg:w="11"/><text x="90.7938%" y="207.50">[..</text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="91.4971%" y="101" width="0.0727%" height="15" fill="rgb(254,6,2)" fg:x="1259" fg:w="1"/><text x="91.5932%" y="111.50"></text></g><g><title>[libc.so.6] (20 samples, 1.45%)</title><rect x="91.4971%" y="117" width="1.4535%" height="15" fill="rgb(208,96,46)" fg:x="1259" fg:w="20"/><text x="91.5932%" y="127.50">[lib..</text></g><g><title>malloc (29 samples, 2.11%)</title><rect x="91.4971%" y="133" width="2.1076%" height="15" fill="rgb(239,3,39)" fg:x="1259" fg:w="29"/><text x="91.5932%" y="143.50">malloc</text></g><g><title>__rdl_alloc (1 samples, 0.07%)</title><rect x="93.6047%" y="133" width="0.0727%" height="15" fill="rgb(233,210,1)" fg:x="1288" fg:w="1"/><text x="93.7008%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 2.33%)</title><rect x="91.4971%" y="181" width="2.3256%" height="15" fill="rgb(244,137,37)" fg:x="1259" fg:w="32"/><text x="91.5932%" y="191.50">&lt;alloc::..</text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 2.33%)</title><rect x="91.4971%" y="165" width="2.3256%" height="15" fill="rgb(240,136,2)" fg:x="1259" fg:w="32"/><text x="91.5932%" y="175.50">alloc::a..</text></g><g><title>alloc::alloc::alloc (32 samples, 2.33%)</title><rect x="91.4971%" y="149" width="2.3256%" height="15" fill="rgb(239,18,37)" fg:x="1259" fg:w="32"/><text x="91.5932%" y="159.50">alloc::a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (45 samples, 3.27%)</title><rect x="90.6977%" y="293" width="3.2703%" height="15" fill="rgb(218,185,22)" fg:x="1248" fg:w="45"/><text x="90.7938%" y="303.50">&lt;alloc::vec:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (45 samples, 3.27%)</title><rect x="90.6977%" y="277" width="3.2703%" height="15" fill="rgb(225,218,4)" fg:x="1248" fg:w="45"/><text x="90.7938%" y="287.50">alloc::slice..</text></g><g><title>alloc::slice::hack::to_vec (45 samples, 3.27%)</title><rect x="90.6977%" y="261" width="3.2703%" height="15" fill="rgb(230,182,32)" fg:x="1248" fg:w="45"/><text x="90.7938%" y="271.50">alloc::slice..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (45 samples, 3.27%)</title><rect x="90.6977%" y="245" width="3.2703%" height="15" fill="rgb(242,56,43)" fg:x="1248" fg:w="45"/><text x="90.7938%" y="255.50">&lt;T as alloc:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (34 samples, 2.47%)</title><rect x="91.4971%" y="229" width="2.4709%" height="15" fill="rgb(233,99,24)" fg:x="1259" fg:w="34"/><text x="91.5932%" y="239.50">alloc::v..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (34 samples, 2.47%)</title><rect x="91.4971%" y="213" width="2.4709%" height="15" fill="rgb(234,209,42)" fg:x="1259" fg:w="34"/><text x="91.5932%" y="223.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (34 samples, 2.47%)</title><rect x="91.4971%" y="197" width="2.4709%" height="15" fill="rgb(227,7,12)" fg:x="1259" fg:w="34"/><text x="91.5932%" y="207.50">alloc::r..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (58 samples, 4.22%)</title><rect x="90.6977%" y="309" width="4.2151%" height="15" fill="rgb(245,203,43)" fg:x="1248" fg:w="58"/><text x="90.7938%" y="319.50">&lt;alloc::string::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (115 samples, 8.36%)</title><rect x="89.4622%" y="325" width="8.3576%" height="15" fill="rgb(238,205,33)" fg:x="1231" fg:w="115"/><text x="89.5584%" y="335.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::clo..</text></g><g><title>_ZN62_$LT$aes_grinder..algo..Algo$u20$as$u20$core..clone..Clone$GT$5clone17h11fc787c69c38227E.llvm.10191714769175146728 (282 samples, 20.49%)</title><rect x="77.9070%" y="341" width="20.4942%" height="15" fill="rgb(231,56,7)" fg:x="1072" fg:w="282"/><text x="78.0031%" y="351.50">_ZN62_$LT$aes_grinder..algo..Algo$u20$as$u20$core..clone..Clone$GT$5clone17h11fc787c69c3..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (721 samples, 52.40%)</title><rect x="46.8023%" y="357" width="52.3983%" height="15" fill="rgb(244,186,29)" fg:x="644" fg:w="721"/><text x="46.8985%" y="367.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>_start (1,366 samples, 99.27%)</title><rect x="0.0000%" y="629" width="99.2733%" height="15" fill="rgb(234,111,31)" fg:x="0" fg:w="1366"/><text x="0.0962%" y="639.50">_start</text></g><g><title>__libc_start_main (1,366 samples, 99.27%)</title><rect x="0.0000%" y="613" width="99.2733%" height="15" fill="rgb(241,149,10)" fg:x="0" fg:w="1366"/><text x="0.0962%" y="623.50">__libc_start_main</text></g><g><title>[libc.so.6] (1,366 samples, 99.27%)</title><rect x="0.0000%" y="597" width="99.2733%" height="15" fill="rgb(249,206,44)" fg:x="0" fg:w="1366"/><text x="0.0962%" y="607.50">[libc.so.6]</text></g><g><title>main (1,366 samples, 99.27%)</title><rect x="0.0000%" y="581" width="99.2733%" height="15" fill="rgb(251,153,30)" fg:x="0" fg:w="1366"/><text x="0.0962%" y="591.50">main</text></g><g><title>std::rt::lang_start_internal (1,366 samples, 99.27%)</title><rect x="0.0000%" y="565" width="99.2733%" height="15" fill="rgb(239,152,38)" fg:x="0" fg:w="1366"/><text x="0.0962%" y="575.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,366 samples, 99.27%)</title><rect x="0.0000%" y="549" width="99.2733%" height="15" fill="rgb(249,139,47)" fg:x="0" fg:w="1366"/><text x="0.0962%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,366 samples, 99.27%)</title><rect x="0.0000%" y="533" width="99.2733%" height="15" fill="rgb(244,64,35)" fg:x="0" fg:w="1366"/><text x="0.0962%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,366 samples, 99.27%)</title><rect x="0.0000%" y="517" width="99.2733%" height="15" fill="rgb(216,46,15)" fg:x="0" fg:w="1366"/><text x="0.0962%" y="527.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (1,366 samples, 99.27%)</title><rect x="0.0000%" y="501" width="99.2733%" height="15" fill="rgb(250,74,19)" fg:x="0" fg:w="1366"/><text x="0.0962%" y="511.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (1,366 samples, 99.27%)</title><rect x="0.0000%" y="485" width="99.2733%" height="15" fill="rgb(249,42,33)" fg:x="0" fg:w="1366"/><text x="0.0962%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,366 samples, 99.27%)</title><rect x="0.0000%" y="469" width="99.2733%" height="15" fill="rgb(242,149,17)" fg:x="0" fg:w="1366"/><text x="0.0962%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,366 samples, 99.27%)</title><rect x="0.0000%" y="453" width="99.2733%" height="15" fill="rgb(244,29,21)" fg:x="0" fg:w="1366"/><text x="0.0962%" y="463.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,366 samples, 99.27%)</title><rect x="0.0000%" y="437" width="99.2733%" height="15" fill="rgb(220,130,37)" fg:x="0" fg:w="1366"/><text x="0.0962%" y="447.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h43d8525c0c08be0bE.llvm.151526308890801145 (1,366 samples, 99.27%)</title><rect x="0.0000%" y="421" width="99.2733%" height="15" fill="rgb(211,67,2)" fg:x="0" fg:w="1366"/><text x="0.0962%" y="431.50">_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h43d8525c0c08be0bE.llvm.151526308890801145</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,366 samples, 99.27%)</title><rect x="0.0000%" y="405" width="99.2733%" height="15" fill="rgb(235,68,52)" fg:x="0" fg:w="1366"/><text x="0.0962%" y="415.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>aes_grinder::main (1,366 samples, 99.27%)</title><rect x="0.0000%" y="389" width="99.2733%" height="15" fill="rgb(246,142,3)" fg:x="0" fg:w="1366"/><text x="0.0962%" y="399.50">aes_grinder::main</text></g><g><title>aes_grinder::exaustive_search::exhaustive_search (1,345 samples, 97.75%)</title><rect x="1.5262%" y="373" width="97.7471%" height="15" fill="rgb(241,25,7)" fg:x="21" fg:w="1345"/><text x="1.6223%" y="383.50">aes_grinder::exaustive_search::exhaustive_search</text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (1 samples, 0.07%)</title><rect x="99.2006%" y="357" width="0.0727%" height="15" fill="rgb(242,119,39)" fg:x="1365" fg:w="1"/><text x="99.2967%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 0.07%)</title><rect x="99.2733%" y="629" width="0.0727%" height="15" fill="rgb(241,98,45)" fg:x="1366" fg:w="1"/><text x="99.3694%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.07%)</title><rect x="99.2733%" y="613" width="0.0727%" height="15" fill="rgb(254,28,30)" fg:x="1366" fg:w="1"/><text x="99.3694%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="99.3459%" y="613" width="0.1453%" height="15" fill="rgb(241,142,54)" fg:x="1367" fg:w="2"/><text x="99.4421%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.15%)</title><rect x="99.4913%" y="597" width="0.1453%" height="15" fill="rgb(222,85,15)" fg:x="1369" fg:w="2"/><text x="99.5874%" y="607.50"></text></g><g><title>__tunable_get_val (1 samples, 0.07%)</title><rect x="99.6366%" y="565" width="0.0727%" height="15" fill="rgb(210,85,47)" fg:x="1371" fg:w="1"/><text x="99.7328%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.07%)</title><rect x="99.7093%" y="565" width="0.0727%" height="15" fill="rgb(224,206,25)" fg:x="1372" fg:w="1"/><text x="99.8055%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.07%)</title><rect x="99.7093%" y="549" width="0.0727%" height="15" fill="rgb(243,201,19)" fg:x="1372" fg:w="1"/><text x="99.8055%" y="559.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.22%)</title><rect x="99.6366%" y="597" width="0.2180%" height="15" fill="rgb(236,59,4)" fg:x="1371" fg:w="3"/><text x="99.7328%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.22%)</title><rect x="99.6366%" y="581" width="0.2180%" height="15" fill="rgb(254,179,45)" fg:x="1371" fg:w="3"/><text x="99.7328%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.44%)</title><rect x="99.4913%" y="613" width="0.4360%" height="15" fill="rgb(226,14,10)" fg:x="1369" fg:w="6"/><text x="99.5874%" y="623.50"></text></g><g><title>all (1,376 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(244,27,41)" fg:x="0" fg:w="1376"/><text x="0.0962%" y="671.50"></text></g><g><title>aes_grinder (1,376 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(235,35,32)" fg:x="0" fg:w="1376"/><text x="0.0962%" y="655.50">aes_grinder</text></g><g><title>[ld-linux-x86-64.so.2] (9 samples, 0.65%)</title><rect x="99.3459%" y="629" width="0.6541%" height="15" fill="rgb(218,68,31)" fg:x="1367" fg:w="9"/><text x="99.4421%" y="639.50"></text></g></svg></svg>