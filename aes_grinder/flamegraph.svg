<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1302" onload="init(evt)" viewBox="0 0 1200 1302" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1302" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1285.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1285.00"> </text><svg id="frames" x="10" width="1180" total_samples="59683"><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.01%)</title><rect x="0.0101%" y="1205" width="0.0117%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="7"/><text x="0.2601%" y="1215.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.01%)</title><rect x="0.0101%" y="1221" width="0.0134%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="8"/><text x="0.2601%" y="1231.50"></text></g><g><title>aes_grinder::algo::Algo::base_solver (25 samples, 0.04%)</title><rect x="0.0369%" y="917" width="0.0419%" height="15" fill="rgb(221,193,54)" fg:x="22" fg:w="25"/><text x="0.2869%" y="927.50"></text></g><g><title>aes_grinder::matrix::Matrix::number_solutions (25 samples, 0.04%)</title><rect x="0.0369%" y="901" width="0.0419%" height="15" fill="rgb(248,212,6)" fg:x="22" fg:w="25"/><text x="0.2869%" y="911.50"></text></g><g><title>aes_grinder::matrix::Matrix::scale_on (25 samples, 0.04%)</title><rect x="0.0369%" y="885" width="0.0419%" height="15" fill="rgb(208,68,35)" fg:x="22" fg:w="25"/><text x="0.2869%" y="895.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (7 samples, 0.01%)</title><rect x="0.0787%" y="901" width="0.0117%" height="15" fill="rgb(232,128,0)" fg:x="47" fg:w="7"/><text x="0.3287%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.02%)</title><rect x="0.4340%" y="837" width="0.0184%" height="15" fill="rgb(207,160,47)" fg:x="259" fg:w="11"/><text x="0.6840%" y="847.50"></text></g><g><title>core::slice::raw::from_raw_parts (11 samples, 0.02%)</title><rect x="0.4340%" y="821" width="0.0184%" height="15" fill="rgb(228,23,34)" fg:x="259" fg:w="11"/><text x="0.6840%" y="831.50"></text></g><g><title>core::ptr::slice_from_raw_parts (11 samples, 0.02%)</title><rect x="0.4340%" y="805" width="0.0184%" height="15" fill="rgb(218,30,26)" fg:x="259" fg:w="11"/><text x="0.6840%" y="815.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (11 samples, 0.02%)</title><rect x="0.4340%" y="789" width="0.0184%" height="15" fill="rgb(220,122,19)" fg:x="259" fg:w="11"/><text x="0.6840%" y="799.50"></text></g><g><title>&lt;aes_grinder::matrix::Matrix as core::ops::index::Index&lt;(usize,usize)&gt;&gt;::index (91 samples, 0.15%)</title><rect x="0.3318%" y="869" width="0.1525%" height="15" fill="rgb(250,228,42)" fg:x="198" fg:w="91"/><text x="0.5818%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (55 samples, 0.09%)</title><rect x="0.3921%" y="853" width="0.0922%" height="15" fill="rgb(240,193,28)" fg:x="234" fg:w="55"/><text x="0.6421%" y="863.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (19 samples, 0.03%)</title><rect x="0.4524%" y="837" width="0.0318%" height="15" fill="rgb(216,20,37)" fg:x="270" fg:w="19"/><text x="0.7024%" y="847.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (13 samples, 0.02%)</title><rect x="0.4624%" y="821" width="0.0218%" height="15" fill="rgb(206,188,39)" fg:x="276" fg:w="13"/><text x="0.7124%" y="831.50"></text></g><g><title>&lt;aes_grinder::matrix::Matrix as core::ops::index::IndexMut&lt;(usize,usize)&gt;&gt;::index_mut (52 samples, 0.09%)</title><rect x="0.4842%" y="869" width="0.0871%" height="15" fill="rgb(217,207,13)" fg:x="289" fg:w="52"/><text x="0.7342%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (34 samples, 0.06%)</title><rect x="0.5144%" y="853" width="0.0570%" height="15" fill="rgb(231,73,38)" fg:x="307" fg:w="34"/><text x="0.7644%" y="863.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (10 samples, 0.02%)</title><rect x="0.5546%" y="837" width="0.0168%" height="15" fill="rgb(225,20,46)" fg:x="331" fg:w="10"/><text x="0.8046%" y="847.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (10 samples, 0.02%)</title><rect x="0.5546%" y="821" width="0.0168%" height="15" fill="rgb(210,31,41)" fg:x="331" fg:w="10"/><text x="0.8046%" y="831.50"></text></g><g><title>&lt;aes_grinder::utils::Number as core::ops::arith::Add&gt;::add (22 samples, 0.04%)</title><rect x="0.5714%" y="869" width="0.0369%" height="15" fill="rgb(221,200,47)" fg:x="341" fg:w="22"/><text x="0.8214%" y="879.50"></text></g><g><title>&lt;aes_grinder::utils::Number as core::ops::arith::Mul&gt;::mul (25 samples, 0.04%)</title><rect x="0.6082%" y="869" width="0.0419%" height="15" fill="rgb(226,26,5)" fg:x="363" fg:w="25"/><text x="0.8582%" y="879.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.02%)</title><rect x="0.6853%" y="773" width="0.0151%" height="15" fill="rgb(249,33,26)" fg:x="409" fg:w="9"/><text x="0.9353%" y="783.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (8 samples, 0.01%)</title><rect x="0.6870%" y="757" width="0.0134%" height="15" fill="rgb(235,183,28)" fg:x="410" fg:w="8"/><text x="0.9370%" y="767.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (8 samples, 0.01%)</title><rect x="0.7037%" y="773" width="0.0134%" height="15" fill="rgb(221,5,38)" fg:x="420" fg:w="8"/><text x="0.9537%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.05%)</title><rect x="0.6752%" y="805" width="0.0503%" height="15" fill="rgb(247,18,42)" fg:x="403" fg:w="30"/><text x="0.9252%" y="815.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (28 samples, 0.05%)</title><rect x="0.6786%" y="789" width="0.0469%" height="15" fill="rgb(241,131,45)" fg:x="405" fg:w="28"/><text x="0.9286%" y="799.50"></text></g><g><title>&lt;std::collections::hash::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.07%)</title><rect x="0.6652%" y="837" width="0.0670%" height="15" fill="rgb(249,31,29)" fg:x="397" fg:w="40"/><text x="0.9152%" y="847.50"></text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.07%)</title><rect x="0.6652%" y="821" width="0.0670%" height="15" fill="rgb(225,111,53)" fg:x="397" fg:w="40"/><text x="0.9152%" y="831.50"></text></g><g><title>aes_grinder::matrix::Matrix::swap_columns (53 samples, 0.09%)</title><rect x="0.6535%" y="853" width="0.0888%" height="15" fill="rgb(238,160,17)" fg:x="390" fg:w="53"/><text x="0.9035%" y="863.50"></text></g><g><title>aes_grinder::matrix::Matrix::sort_left (63 samples, 0.11%)</title><rect x="0.6535%" y="869" width="0.1056%" height="15" fill="rgb(214,148,48)" fg:x="390" fg:w="63"/><text x="0.9035%" y="879.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (10 samples, 0.02%)</title><rect x="0.7423%" y="853" width="0.0168%" height="15" fill="rgb(232,36,49)" fg:x="443" fg:w="10"/><text x="0.9923%" y="863.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (10 samples, 0.02%)</title><rect x="0.7423%" y="837" width="0.0168%" height="15" fill="rgb(209,103,24)" fg:x="443" fg:w="10"/><text x="0.9923%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (10 samples, 0.02%)</title><rect x="0.7423%" y="821" width="0.0168%" height="15" fill="rgb(229,88,8)" fg:x="443" fg:w="10"/><text x="0.9923%" y="831.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (8 samples, 0.01%)</title><rect x="0.7456%" y="805" width="0.0134%" height="15" fill="rgb(213,181,19)" fg:x="445" fg:w="8"/><text x="0.9956%" y="815.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (8 samples, 0.01%)</title><rect x="0.7456%" y="789" width="0.0134%" height="15" fill="rgb(254,191,54)" fg:x="445" fg:w="8"/><text x="0.9956%" y="799.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (8 samples, 0.01%)</title><rect x="0.7456%" y="773" width="0.0134%" height="15" fill="rgb(241,83,37)" fg:x="445" fg:w="8"/><text x="0.9956%" y="783.50"></text></g><g><title>&lt;aes_grinder::matrix::Matrix as core::ops::index::Index&lt;(usize,usize)&gt;&gt;::index (10 samples, 0.02%)</title><rect x="0.7640%" y="853" width="0.0168%" height="15" fill="rgb(233,36,39)" fg:x="456" fg:w="10"/><text x="1.0140%" y="863.50"></text></g><g><title>aes_grinder::matrix::Matrix::swap_lines (19 samples, 0.03%)</title><rect x="0.7590%" y="869" width="0.0318%" height="15" fill="rgb(226,3,54)" fg:x="453" fg:w="19"/><text x="1.0090%" y="879.50"></text></g><g><title>aes_grinder::matrix::Matrix::scale_on (447 samples, 0.75%)</title><rect x="0.0938%" y="885" width="0.7490%" height="15" fill="rgb(245,192,40)" fg:x="56" fg:w="447"/><text x="0.3438%" y="895.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (31 samples, 0.05%)</title><rect x="0.7908%" y="869" width="0.0519%" height="15" fill="rgb(238,167,29)" fg:x="472" fg:w="31"/><text x="1.0408%" y="879.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (30 samples, 0.05%)</title><rect x="0.7925%" y="853" width="0.0503%" height="15" fill="rgb(232,182,51)" fg:x="473" fg:w="30"/><text x="1.0425%" y="863.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::_{{closure}} (8 samples, 0.01%)</title><rect x="0.8461%" y="709" width="0.0134%" height="15" fill="rgb(231,60,39)" fg:x="505" fg:w="8"/><text x="1.0961%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (7 samples, 0.01%)</title><rect x="0.8478%" y="693" width="0.0117%" height="15" fill="rgb(208,69,12)" fg:x="506" fg:w="7"/><text x="1.0978%" y="703.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (7 samples, 0.01%)</title><rect x="0.8478%" y="677" width="0.0117%" height="15" fill="rgb(235,93,37)" fg:x="506" fg:w="7"/><text x="1.0978%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (11 samples, 0.02%)</title><rect x="0.8428%" y="821" width="0.0184%" height="15" fill="rgb(213,116,39)" fg:x="503" fg:w="11"/><text x="1.0928%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (11 samples, 0.02%)</title><rect x="0.8428%" y="805" width="0.0184%" height="15" fill="rgb(222,207,29)" fg:x="503" fg:w="11"/><text x="1.0928%" y="815.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (11 samples, 0.02%)</title><rect x="0.8428%" y="789" width="0.0184%" height="15" fill="rgb(206,96,30)" fg:x="503" fg:w="11"/><text x="1.0928%" y="799.50"></text></g><g><title>aes_grinder::matrix::Matrix::number_solutions::_{{closure}} (11 samples, 0.02%)</title><rect x="0.8428%" y="773" width="0.0184%" height="15" fill="rgb(218,138,4)" fg:x="503" fg:w="11"/><text x="1.0928%" y="783.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (9 samples, 0.02%)</title><rect x="0.8461%" y="757" width="0.0151%" height="15" fill="rgb(250,191,14)" fg:x="505" fg:w="9"/><text x="1.0961%" y="767.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (9 samples, 0.02%)</title><rect x="0.8461%" y="741" width="0.0151%" height="15" fill="rgb(239,60,40)" fg:x="505" fg:w="9"/><text x="1.0961%" y="751.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (9 samples, 0.02%)</title><rect x="0.8461%" y="725" width="0.0151%" height="15" fill="rgb(206,27,48)" fg:x="505" fg:w="9"/><text x="1.0961%" y="735.50"></text></g><g><title>aes_grinder::matrix::Matrix::number_solutions (461 samples, 0.77%)</title><rect x="0.0905%" y="901" width="0.7724%" height="15" fill="rgb(225,35,8)" fg:x="54" fg:w="461"/><text x="0.3405%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (12 samples, 0.02%)</title><rect x="0.8428%" y="885" width="0.0201%" height="15" fill="rgb(250,213,24)" fg:x="503" fg:w="12"/><text x="1.0928%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (12 samples, 0.02%)</title><rect x="0.8428%" y="869" width="0.0201%" height="15" fill="rgb(247,123,22)" fg:x="503" fg:w="12"/><text x="1.0928%" y="879.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (12 samples, 0.02%)</title><rect x="0.8428%" y="853" width="0.0201%" height="15" fill="rgb(231,138,38)" fg:x="503" fg:w="12"/><text x="1.0928%" y="863.50"></text></g><g><title>&lt;I as alloc::vec::in_place_collect::SpecInPlaceCollect&lt;T,I&gt;&gt;::collect_in_place (12 samples, 0.02%)</title><rect x="0.8428%" y="837" width="0.0201%" height="15" fill="rgb(231,145,46)" fg:x="503" fg:w="12"/><text x="1.0928%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (9 samples, 0.02%)</title><rect x="0.8629%" y="901" width="0.0151%" height="15" fill="rgb(251,118,11)" fg:x="515" fg:w="9"/><text x="1.1129%" y="911.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6 samples, 0.01%)</title><rect x="0.8679%" y="885" width="0.0101%" height="15" fill="rgb(217,147,25)" fg:x="518" fg:w="6"/><text x="1.1179%" y="895.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (6 samples, 0.01%)</title><rect x="0.8679%" y="869" width="0.0101%" height="15" fill="rgb(247,81,37)" fg:x="518" fg:w="6"/><text x="1.1179%" y="879.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (6 samples, 0.01%)</title><rect x="0.8679%" y="853" width="0.0101%" height="15" fill="rgb(209,12,38)" fg:x="518" fg:w="6"/><text x="1.1179%" y="863.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (6 samples, 0.01%)</title><rect x="0.8679%" y="837" width="0.0101%" height="15" fill="rgb(227,1,9)" fg:x="518" fg:w="6"/><text x="1.1179%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6 samples, 0.01%)</title><rect x="0.8679%" y="821" width="0.0101%" height="15" fill="rgb(248,47,43)" fg:x="518" fg:w="6"/><text x="1.1179%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="0.8679%" y="805" width="0.0101%" height="15" fill="rgb(221,10,30)" fg:x="518" fg:w="6"/><text x="1.1179%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 0.01%)</title><rect x="0.8679%" y="789" width="0.0101%" height="15" fill="rgb(210,229,1)" fg:x="518" fg:w="6"/><text x="1.1179%" y="799.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (6 samples, 0.01%)</title><rect x="0.8679%" y="773" width="0.0101%" height="15" fill="rgb(222,148,37)" fg:x="518" fg:w="6"/><text x="1.1179%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (6 samples, 0.01%)</title><rect x="0.8679%" y="757" width="0.0101%" height="15" fill="rgb(234,67,33)" fg:x="518" fg:w="6"/><text x="1.1179%" y="767.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (6 samples, 0.01%)</title><rect x="0.8679%" y="741" width="0.0101%" height="15" fill="rgb(247,98,35)" fg:x="518" fg:w="6"/><text x="1.1179%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.01%)</title><rect x="0.8679%" y="725" width="0.0101%" height="15" fill="rgb(247,138,52)" fg:x="518" fg:w="6"/><text x="1.1179%" y="735.50"></text></g><g><title>aes_grinder::algo::Algo::fusion_two_algo (478 samples, 0.80%)</title><rect x="0.0787%" y="917" width="0.8009%" height="15" fill="rgb(213,79,30)" fg:x="47" fg:w="478"/><text x="0.3287%" y="927.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.01%)</title><rect x="0.8947%" y="581" width="0.0101%" height="15" fill="rgb(246,177,23)" fg:x="534" fg:w="6"/><text x="1.1447%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.02%)</title><rect x="0.9048%" y="581" width="0.0218%" height="15" fill="rgb(230,62,27)" fg:x="540" fg:w="13"/><text x="1.1548%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.02%)</title><rect x="0.9065%" y="565" width="0.0201%" height="15" fill="rgb(216,154,8)" fg:x="541" fg:w="12"/><text x="1.1565%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10 samples, 0.02%)</title><rect x="0.9282%" y="581" width="0.0168%" height="15" fill="rgb(244,35,45)" fg:x="554" fg:w="10"/><text x="1.1782%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.02%)</title><rect x="0.9282%" y="565" width="0.0168%" height="15" fill="rgb(251,115,12)" fg:x="554" fg:w="10"/><text x="1.1782%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.02%)</title><rect x="0.9282%" y="549" width="0.0168%" height="15" fill="rgb(240,54,50)" fg:x="554" fg:w="10"/><text x="1.1782%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (32 samples, 0.05%)</title><rect x="0.8947%" y="645" width="0.0536%" height="15" fill="rgb(233,84,52)" fg:x="534" fg:w="32"/><text x="1.1447%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (32 samples, 0.05%)</title><rect x="0.8947%" y="629" width="0.0536%" height="15" fill="rgb(207,117,47)" fg:x="534" fg:w="32"/><text x="1.1447%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (32 samples, 0.05%)</title><rect x="0.8947%" y="613" width="0.0536%" height="15" fill="rgb(249,43,39)" fg:x="534" fg:w="32"/><text x="1.1447%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (32 samples, 0.05%)</title><rect x="0.8947%" y="597" width="0.0536%" height="15" fill="rgb(209,38,44)" fg:x="534" fg:w="32"/><text x="1.1447%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (16 samples, 0.03%)</title><rect x="0.9601%" y="517" width="0.0268%" height="15" fill="rgb(236,212,23)" fg:x="573" fg:w="16"/><text x="1.2101%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.02%)</title><rect x="0.9701%" y="501" width="0.0168%" height="15" fill="rgb(242,79,21)" fg:x="579" fg:w="10"/><text x="1.2201%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (10 samples, 0.02%)</title><rect x="0.9701%" y="485" width="0.0168%" height="15" fill="rgb(211,96,35)" fg:x="579" fg:w="10"/><text x="1.2201%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (10 samples, 0.02%)</title><rect x="0.9701%" y="469" width="0.0168%" height="15" fill="rgb(253,215,40)" fg:x="579" fg:w="10"/><text x="1.2201%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (10 samples, 0.02%)</title><rect x="0.9701%" y="453" width="0.0168%" height="15" fill="rgb(211,81,21)" fg:x="579" fg:w="10"/><text x="1.2201%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (9 samples, 0.02%)</title><rect x="0.9718%" y="437" width="0.0151%" height="15" fill="rgb(208,190,38)" fg:x="580" fg:w="9"/><text x="1.2218%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.02%)</title><rect x="0.9718%" y="421" width="0.0151%" height="15" fill="rgb(235,213,38)" fg:x="580" fg:w="9"/><text x="1.2218%" y="431.50"></text></g><g><title>[libc.so.6] (9 samples, 0.02%)</title><rect x="0.9718%" y="405" width="0.0151%" height="15" fill="rgb(237,122,38)" fg:x="580" fg:w="9"/><text x="1.2218%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.01%)</title><rect x="1.0053%" y="469" width="0.0117%" height="15" fill="rgb(244,218,35)" fg:x="600" fg:w="7"/><text x="1.2553%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.01%)</title><rect x="1.0053%" y="453" width="0.0117%" height="15" fill="rgb(240,68,47)" fg:x="600" fg:w="7"/><text x="1.2553%" y="463.50"></text></g><g><title>core::alloc::layout::Layout::array (6 samples, 0.01%)</title><rect x="1.0170%" y="469" width="0.0101%" height="15" fill="rgb(210,16,53)" fg:x="607" fg:w="6"/><text x="1.2670%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.03%)</title><rect x="1.0020%" y="517" width="0.0268%" height="15" fill="rgb(235,124,12)" fg:x="598" fg:w="16"/><text x="1.2520%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.03%)</title><rect x="1.0020%" y="501" width="0.0268%" height="15" fill="rgb(224,169,11)" fg:x="598" fg:w="16"/><text x="1.2520%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.03%)</title><rect x="1.0020%" y="485" width="0.0268%" height="15" fill="rgb(250,166,2)" fg:x="598" fg:w="16"/><text x="1.2520%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (46 samples, 0.08%)</title><rect x="0.9534%" y="581" width="0.0771%" height="15" fill="rgb(242,216,29)" fg:x="569" fg:w="46"/><text x="1.2034%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (43 samples, 0.07%)</title><rect x="0.9584%" y="565" width="0.0720%" height="15" fill="rgb(230,116,27)" fg:x="572" fg:w="43"/><text x="1.2084%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (43 samples, 0.07%)</title><rect x="0.9584%" y="549" width="0.0720%" height="15" fill="rgb(228,99,48)" fg:x="572" fg:w="43"/><text x="1.2084%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (43 samples, 0.07%)</title><rect x="0.9584%" y="533" width="0.0720%" height="15" fill="rgb(253,11,6)" fg:x="572" fg:w="43"/><text x="1.2084%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (21 samples, 0.04%)</title><rect x="1.0506%" y="453" width="0.0352%" height="15" fill="rgb(247,143,39)" fg:x="627" fg:w="21"/><text x="1.3006%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.02%)</title><rect x="1.0673%" y="437" width="0.0184%" height="15" fill="rgb(236,97,10)" fg:x="637" fg:w="11"/><text x="1.3173%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (11 samples, 0.02%)</title><rect x="1.0673%" y="421" width="0.0184%" height="15" fill="rgb(233,208,19)" fg:x="637" fg:w="11"/><text x="1.3173%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (11 samples, 0.02%)</title><rect x="1.0673%" y="405" width="0.0184%" height="15" fill="rgb(216,164,2)" fg:x="637" fg:w="11"/><text x="1.3173%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (11 samples, 0.02%)</title><rect x="1.0673%" y="389" width="0.0184%" height="15" fill="rgb(220,129,5)" fg:x="637" fg:w="11"/><text x="1.3173%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (7 samples, 0.01%)</title><rect x="1.0740%" y="373" width="0.0117%" height="15" fill="rgb(242,17,10)" fg:x="641" fg:w="7"/><text x="1.3240%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.01%)</title><rect x="1.0740%" y="357" width="0.0117%" height="15" fill="rgb(242,107,0)" fg:x="641" fg:w="7"/><text x="1.3240%" y="367.50"></text></g><g><title>[libc.so.6] (7 samples, 0.01%)</title><rect x="1.0740%" y="341" width="0.0117%" height="15" fill="rgb(251,28,31)" fg:x="641" fg:w="7"/><text x="1.3240%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.02%)</title><rect x="1.0857%" y="453" width="0.0235%" height="15" fill="rgb(233,223,10)" fg:x="648" fg:w="14"/><text x="1.3357%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.02%)</title><rect x="1.0924%" y="437" width="0.0168%" height="15" fill="rgb(215,21,27)" fg:x="652" fg:w="10"/><text x="1.3424%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="1.0975%" y="421" width="0.0117%" height="15" fill="rgb(232,23,21)" fg:x="655" fg:w="7"/><text x="1.3475%" y="431.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.01%)</title><rect x="1.1125%" y="373" width="0.0117%" height="15" fill="rgb(244,5,23)" fg:x="664" fg:w="7"/><text x="1.3625%" y="383.50"></text></g><g><title>malloc (6 samples, 0.01%)</title><rect x="1.1142%" y="357" width="0.0101%" height="15" fill="rgb(226,81,46)" fg:x="665" fg:w="6"/><text x="1.3642%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.02%)</title><rect x="1.1125%" y="405" width="0.0184%" height="15" fill="rgb(247,70,30)" fg:x="664" fg:w="11"/><text x="1.3625%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.02%)</title><rect x="1.1125%" y="389" width="0.0184%" height="15" fill="rgb(212,68,19)" fg:x="664" fg:w="11"/><text x="1.3625%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (20 samples, 0.03%)</title><rect x="1.1125%" y="421" width="0.0335%" height="15" fill="rgb(240,187,13)" fg:x="664" fg:w="20"/><text x="1.3625%" y="431.50"></text></g><g><title>core::alloc::layout::Layout::array (9 samples, 0.02%)</title><rect x="1.1310%" y="405" width="0.0151%" height="15" fill="rgb(223,113,26)" fg:x="675" fg:w="9"/><text x="1.3810%" y="415.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (9 samples, 0.02%)</title><rect x="1.1310%" y="389" width="0.0151%" height="15" fill="rgb(206,192,2)" fg:x="675" fg:w="9"/><text x="1.3810%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (66 samples, 0.11%)</title><rect x="1.0371%" y="517" width="0.1106%" height="15" fill="rgb(241,108,4)" fg:x="619" fg:w="66"/><text x="1.2871%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (63 samples, 0.11%)</title><rect x="1.0422%" y="501" width="0.1056%" height="15" fill="rgb(247,173,49)" fg:x="622" fg:w="63"/><text x="1.2922%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (63 samples, 0.11%)</title><rect x="1.0422%" y="485" width="0.1056%" height="15" fill="rgb(224,114,35)" fg:x="622" fg:w="63"/><text x="1.2922%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (63 samples, 0.11%)</title><rect x="1.0422%" y="469" width="0.1056%" height="15" fill="rgb(245,159,27)" fg:x="622" fg:w="63"/><text x="1.2922%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (21 samples, 0.04%)</title><rect x="1.1125%" y="453" width="0.0352%" height="15" fill="rgb(245,172,44)" fg:x="664" fg:w="21"/><text x="1.3625%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (21 samples, 0.04%)</title><rect x="1.1125%" y="437" width="0.0352%" height="15" fill="rgb(236,23,11)" fg:x="664" fg:w="21"/><text x="1.3625%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.02%)</title><rect x="1.1678%" y="389" width="0.0151%" height="15" fill="rgb(205,117,38)" fg:x="697" fg:w="9"/><text x="1.4178%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.01%)</title><rect x="1.1712%" y="373" width="0.0117%" height="15" fill="rgb(237,72,25)" fg:x="699" fg:w="7"/><text x="1.4212%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.01%)</title><rect x="1.1712%" y="357" width="0.0117%" height="15" fill="rgb(244,70,9)" fg:x="699" fg:w="7"/><text x="1.4212%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.01%)</title><rect x="1.1712%" y="341" width="0.0117%" height="15" fill="rgb(217,125,39)" fg:x="699" fg:w="7"/><text x="1.4212%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.01%)</title><rect x="1.1712%" y="325" width="0.0117%" height="15" fill="rgb(235,36,10)" fg:x="699" fg:w="7"/><text x="1.4212%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.02%)</title><rect x="1.1829%" y="389" width="0.0184%" height="15" fill="rgb(251,123,47)" fg:x="706" fg:w="11"/><text x="1.4329%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.01%)</title><rect x="1.1879%" y="373" width="0.0134%" height="15" fill="rgb(221,13,13)" fg:x="709" fg:w="8"/><text x="1.4379%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.02%)</title><rect x="1.2030%" y="389" width="0.0235%" height="15" fill="rgb(238,131,9)" fg:x="718" fg:w="14"/><text x="1.4530%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12 samples, 0.02%)</title><rect x="1.2064%" y="373" width="0.0201%" height="15" fill="rgb(211,50,8)" fg:x="720" fg:w="12"/><text x="1.4564%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.02%)</title><rect x="1.2064%" y="357" width="0.0201%" height="15" fill="rgb(245,182,24)" fg:x="720" fg:w="12"/><text x="1.4564%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (46 samples, 0.08%)</title><rect x="1.1528%" y="453" width="0.0771%" height="15" fill="rgb(242,14,37)" fg:x="688" fg:w="46"/><text x="1.4028%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (41 samples, 0.07%)</title><rect x="1.1611%" y="437" width="0.0687%" height="15" fill="rgb(246,228,12)" fg:x="693" fg:w="41"/><text x="1.4111%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (41 samples, 0.07%)</title><rect x="1.1611%" y="421" width="0.0687%" height="15" fill="rgb(213,55,15)" fg:x="693" fg:w="41"/><text x="1.4111%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (41 samples, 0.07%)</title><rect x="1.1611%" y="405" width="0.0687%" height="15" fill="rgb(209,9,3)" fg:x="693" fg:w="41"/><text x="1.4111%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (19 samples, 0.03%)</title><rect x="1.2315%" y="389" width="0.0318%" height="15" fill="rgb(230,59,30)" fg:x="735" fg:w="19"/><text x="1.4815%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (18 samples, 0.03%)</title><rect x="1.2332%" y="373" width="0.0302%" height="15" fill="rgb(209,121,21)" fg:x="736" fg:w="18"/><text x="1.4832%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (18 samples, 0.03%)</title><rect x="1.2332%" y="357" width="0.0302%" height="15" fill="rgb(220,109,13)" fg:x="736" fg:w="18"/><text x="1.4832%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (18 samples, 0.03%)</title><rect x="1.2332%" y="341" width="0.0302%" height="15" fill="rgb(232,18,1)" fg:x="736" fg:w="18"/><text x="1.4832%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.02%)</title><rect x="1.2483%" y="325" width="0.0151%" height="15" fill="rgb(215,41,42)" fg:x="745" fg:w="9"/><text x="1.4983%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.02%)</title><rect x="1.2483%" y="309" width="0.0151%" height="15" fill="rgb(224,123,36)" fg:x="745" fg:w="9"/><text x="1.4983%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.02%)</title><rect x="1.2483%" y="293" width="0.0151%" height="15" fill="rgb(240,125,3)" fg:x="745" fg:w="9"/><text x="1.4983%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.01%)</title><rect x="1.2684%" y="325" width="0.0134%" height="15" fill="rgb(205,98,50)" fg:x="757" fg:w="8"/><text x="1.5184%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.01%)</title><rect x="1.2700%" y="309" width="0.0117%" height="15" fill="rgb(205,185,37)" fg:x="758" fg:w="7"/><text x="1.5200%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.01%)</title><rect x="1.2700%" y="293" width="0.0117%" height="15" fill="rgb(238,207,15)" fg:x="758" fg:w="7"/><text x="1.5200%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.01%)</title><rect x="1.2700%" y="277" width="0.0117%" height="15" fill="rgb(213,199,42)" fg:x="758" fg:w="7"/><text x="1.5200%" y="287.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (34 samples, 0.06%)</title><rect x="1.2315%" y="405" width="0.0570%" height="15" fill="rgb(235,201,11)" fg:x="735" fg:w="34"/><text x="1.4815%" y="415.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (15 samples, 0.03%)</title><rect x="1.2633%" y="389" width="0.0251%" height="15" fill="rgb(207,46,11)" fg:x="754" fg:w="15"/><text x="1.5133%" y="399.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (14 samples, 0.02%)</title><rect x="1.2650%" y="373" width="0.0235%" height="15" fill="rgb(241,35,35)" fg:x="755" fg:w="14"/><text x="1.5150%" y="383.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (13 samples, 0.02%)</title><rect x="1.2667%" y="357" width="0.0218%" height="15" fill="rgb(243,32,47)" fg:x="756" fg:w="13"/><text x="1.5167%" y="367.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (13 samples, 0.02%)</title><rect x="1.2667%" y="341" width="0.0218%" height="15" fill="rgb(247,202,23)" fg:x="756" fg:w="13"/><text x="1.5167%" y="351.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (35 samples, 0.06%)</title><rect x="1.2315%" y="421" width="0.0586%" height="15" fill="rgb(219,102,11)" fg:x="735" fg:w="35"/><text x="1.4815%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.01%)</title><rect x="1.2918%" y="389" width="0.0117%" height="15" fill="rgb(243,110,44)" fg:x="771" fg:w="7"/><text x="1.5418%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.01%)</title><rect x="1.2918%" y="373" width="0.0117%" height="15" fill="rgb(222,74,54)" fg:x="771" fg:w="7"/><text x="1.5418%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (12 samples, 0.02%)</title><rect x="1.2901%" y="421" width="0.0201%" height="15" fill="rgb(216,99,12)" fg:x="770" fg:w="12"/><text x="1.5401%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (12 samples, 0.02%)</title><rect x="1.2901%" y="405" width="0.0201%" height="15" fill="rgb(226,22,26)" fg:x="770" fg:w="12"/><text x="1.5401%" y="415.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (95 samples, 0.16%)</title><rect x="1.1528%" y="485" width="0.1592%" height="15" fill="rgb(217,163,10)" fg:x="688" fg:w="95"/><text x="1.4028%" y="495.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (95 samples, 0.16%)</title><rect x="1.1528%" y="469" width="0.1592%" height="15" fill="rgb(213,25,53)" fg:x="688" fg:w="95"/><text x="1.4028%" y="479.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (49 samples, 0.08%)</title><rect x="1.2298%" y="453" width="0.0821%" height="15" fill="rgb(252,105,26)" fg:x="734" fg:w="49"/><text x="1.4798%" y="463.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (49 samples, 0.08%)</title><rect x="1.2298%" y="437" width="0.0821%" height="15" fill="rgb(220,39,43)" fg:x="734" fg:w="49"/><text x="1.4798%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.02%)</title><rect x="1.3237%" y="453" width="0.0184%" height="15" fill="rgb(229,68,48)" fg:x="790" fg:w="11"/><text x="1.5737%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.02%)</title><rect x="1.3237%" y="437" width="0.0184%" height="15" fill="rgb(252,8,32)" fg:x="790" fg:w="11"/><text x="1.5737%" y="447.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (184 samples, 0.31%)</title><rect x="1.0371%" y="533" width="0.3083%" height="15" fill="rgb(223,20,43)" fg:x="619" fg:w="184"/><text x="1.2871%" y="543.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (118 samples, 0.20%)</title><rect x="1.1477%" y="517" width="0.1977%" height="15" fill="rgb(229,81,49)" fg:x="685" fg:w="118"/><text x="1.3977%" y="527.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (116 samples, 0.19%)</title><rect x="1.1511%" y="501" width="0.1944%" height="15" fill="rgb(236,28,36)" fg:x="687" fg:w="116"/><text x="1.4011%" y="511.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (20 samples, 0.03%)</title><rect x="1.3119%" y="485" width="0.0335%" height="15" fill="rgb(249,185,26)" fg:x="783" fg:w="20"/><text x="1.5619%" y="495.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (20 samples, 0.03%)</title><rect x="1.3119%" y="469" width="0.0335%" height="15" fill="rgb(249,174,33)" fg:x="783" fg:w="20"/><text x="1.5619%" y="479.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (188 samples, 0.31%)</title><rect x="1.0355%" y="549" width="0.3150%" height="15" fill="rgb(233,201,37)" fg:x="618" fg:w="188"/><text x="1.2855%" y="559.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.01%)</title><rect x="1.3572%" y="485" width="0.0134%" height="15" fill="rgb(221,78,26)" fg:x="810" fg:w="8"/><text x="1.6072%" y="495.50"></text></g><g><title>malloc (8 samples, 0.01%)</title><rect x="1.3572%" y="469" width="0.0134%" height="15" fill="rgb(250,127,30)" fg:x="810" fg:w="8"/><text x="1.6072%" y="479.50"></text></g><g><title>[libc.so.6] (7 samples, 0.01%)</title><rect x="1.3588%" y="453" width="0.0117%" height="15" fill="rgb(230,49,44)" fg:x="811" fg:w="7"/><text x="1.6088%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.02%)</title><rect x="1.3555%" y="517" width="0.0201%" height="15" fill="rgb(229,67,23)" fg:x="809" fg:w="12"/><text x="1.6055%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.02%)</title><rect x="1.3572%" y="501" width="0.0184%" height="15" fill="rgb(249,83,47)" fg:x="810" fg:w="11"/><text x="1.6072%" y="511.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (254 samples, 0.43%)</title><rect x="0.9534%" y="597" width="0.4256%" height="15" fill="rgb(215,43,3)" fg:x="569" fg:w="254"/><text x="1.2034%" y="607.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (208 samples, 0.35%)</title><rect x="1.0304%" y="581" width="0.3485%" height="15" fill="rgb(238,154,13)" fg:x="615" fg:w="208"/><text x="1.2804%" y="591.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (206 samples, 0.35%)</title><rect x="1.0338%" y="565" width="0.3452%" height="15" fill="rgb(219,56,2)" fg:x="617" fg:w="206"/><text x="1.2838%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (17 samples, 0.03%)</title><rect x="1.3505%" y="549" width="0.0285%" height="15" fill="rgb(233,0,4)" fg:x="806" fg:w="17"/><text x="1.6005%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (17 samples, 0.03%)</title><rect x="1.3505%" y="533" width="0.0285%" height="15" fill="rgb(235,30,7)" fg:x="806" fg:w="17"/><text x="1.6005%" y="543.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (256 samples, 0.43%)</title><rect x="0.9534%" y="613" width="0.4289%" height="15" fill="rgb(250,79,13)" fg:x="569" fg:w="256"/><text x="1.2034%" y="623.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.01%)</title><rect x="1.3873%" y="549" width="0.0134%" height="15" fill="rgb(211,146,34)" fg:x="828" fg:w="8"/><text x="1.6373%" y="559.50"></text></g><g><title>malloc (8 samples, 0.01%)</title><rect x="1.3873%" y="533" width="0.0134%" height="15" fill="rgb(228,22,38)" fg:x="828" fg:w="8"/><text x="1.6373%" y="543.50"></text></g><g><title>[libc.so.6] (6 samples, 0.01%)</title><rect x="1.3907%" y="517" width="0.0101%" height="15" fill="rgb(235,168,5)" fg:x="830" fg:w="6"/><text x="1.6407%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (14 samples, 0.02%)</title><rect x="1.3823%" y="597" width="0.0235%" height="15" fill="rgb(221,155,16)" fg:x="825" fg:w="14"/><text x="1.6323%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.02%)</title><rect x="1.3840%" y="581" width="0.0218%" height="15" fill="rgb(215,215,53)" fg:x="826" fg:w="13"/><text x="1.6340%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.02%)</title><rect x="1.3840%" y="565" width="0.0218%" height="15" fill="rgb(223,4,10)" fg:x="826" fg:w="13"/><text x="1.6340%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (15 samples, 0.03%)</title><rect x="1.3823%" y="613" width="0.0251%" height="15" fill="rgb(234,103,6)" fg:x="825" fg:w="15"/><text x="1.6323%" y="623.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (308 samples, 0.52%)</title><rect x="0.8947%" y="677" width="0.5161%" height="15" fill="rgb(227,97,0)" fg:x="534" fg:w="308"/><text x="1.1447%" y="687.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (308 samples, 0.52%)</title><rect x="0.8947%" y="661" width="0.5161%" height="15" fill="rgb(234,150,53)" fg:x="534" fg:w="308"/><text x="1.1447%" y="671.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (276 samples, 0.46%)</title><rect x="0.9483%" y="645" width="0.4624%" height="15" fill="rgb(228,201,54)" fg:x="566" fg:w="276"/><text x="1.1983%" y="655.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (275 samples, 0.46%)</title><rect x="0.9500%" y="629" width="0.4608%" height="15" fill="rgb(222,22,37)" fg:x="567" fg:w="275"/><text x="1.2000%" y="639.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (310 samples, 0.52%)</title><rect x="0.8947%" y="693" width="0.5194%" height="15" fill="rgb(237,53,32)" fg:x="534" fg:w="310"/><text x="1.1447%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.01%)</title><rect x="1.4192%" y="677" width="0.0134%" height="15" fill="rgb(233,25,53)" fg:x="847" fg:w="8"/><text x="1.6692%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (8 samples, 0.01%)</title><rect x="1.4192%" y="661" width="0.0134%" height="15" fill="rgb(210,40,34)" fg:x="847" fg:w="8"/><text x="1.6692%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8 samples, 0.01%)</title><rect x="1.4192%" y="645" width="0.0134%" height="15" fill="rgb(241,220,44)" fg:x="847" fg:w="8"/><text x="1.6692%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::default::Default&gt;::default (8 samples, 0.01%)</title><rect x="1.4359%" y="645" width="0.0134%" height="15" fill="rgb(235,28,35)" fg:x="857" fg:w="8"/><text x="1.6859%" y="655.50"></text></g><g><title>std::collections::hash::map::RandomState::new (8 samples, 0.01%)</title><rect x="1.4359%" y="629" width="0.0134%" height="15" fill="rgb(210,56,17)" fg:x="857" fg:w="8"/><text x="1.6859%" y="639.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (8 samples, 0.01%)</title><rect x="1.4359%" y="613" width="0.0134%" height="15" fill="rgb(224,130,29)" fg:x="857" fg:w="8"/><text x="1.6859%" y="623.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (8 samples, 0.01%)</title><rect x="1.4359%" y="597" width="0.0134%" height="15" fill="rgb(235,212,8)" fg:x="857" fg:w="8"/><text x="1.6859%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (12 samples, 0.02%)</title><rect x="1.5415%" y="357" width="0.0201%" height="15" fill="rgb(223,33,50)" fg:x="920" fg:w="12"/><text x="1.7915%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (49 samples, 0.08%)</title><rect x="1.5247%" y="405" width="0.0821%" height="15" fill="rgb(219,149,13)" fg:x="910" fg:w="49"/><text x="1.7747%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (49 samples, 0.08%)</title><rect x="1.5247%" y="389" width="0.0821%" height="15" fill="rgb(250,156,29)" fg:x="910" fg:w="49"/><text x="1.7747%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (49 samples, 0.08%)</title><rect x="1.5247%" y="373" width="0.0821%" height="15" fill="rgb(216,193,19)" fg:x="910" fg:w="49"/><text x="1.7747%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (27 samples, 0.05%)</title><rect x="1.5616%" y="357" width="0.0452%" height="15" fill="rgb(216,135,14)" fg:x="932" fg:w="27"/><text x="1.8116%" y="367.50"></text></g><g><title>[libc.so.6] (6 samples, 0.01%)</title><rect x="1.6152%" y="373" width="0.0101%" height="15" fill="rgb(241,47,5)" fg:x="964" fg:w="6"/><text x="1.8652%" y="383.50"></text></g><g><title>[libc.so.6] (9 samples, 0.02%)</title><rect x="1.6269%" y="357" width="0.0151%" height="15" fill="rgb(233,42,35)" fg:x="971" fg:w="9"/><text x="1.8769%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (23 samples, 0.04%)</title><rect x="1.6068%" y="405" width="0.0385%" height="15" fill="rgb(231,13,6)" fg:x="959" fg:w="23"/><text x="1.8568%" y="415.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (18 samples, 0.03%)</title><rect x="1.6152%" y="389" width="0.0302%" height="15" fill="rgb(207,181,40)" fg:x="964" fg:w="18"/><text x="1.8652%" y="399.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (12 samples, 0.02%)</title><rect x="1.6253%" y="373" width="0.0201%" height="15" fill="rgb(254,173,49)" fg:x="970" fg:w="12"/><text x="1.8753%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (19 samples, 0.03%)</title><rect x="1.6772%" y="293" width="0.0318%" height="15" fill="rgb(221,1,38)" fg:x="1001" fg:w="19"/><text x="1.9272%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (41 samples, 0.07%)</title><rect x="1.6470%" y="309" width="0.0687%" height="15" fill="rgb(206,124,46)" fg:x="983" fg:w="41"/><text x="1.8970%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (128 samples, 0.21%)</title><rect x="1.5230%" y="437" width="0.2145%" height="15" fill="rgb(249,21,11)" fg:x="909" fg:w="128"/><text x="1.7730%" y="447.50"></text></g><g><title>core::hash::BuildHasher::hash_one (128 samples, 0.21%)</title><rect x="1.5230%" y="421" width="0.2145%" height="15" fill="rgb(222,201,40)" fg:x="909" fg:w="128"/><text x="1.7730%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (55 samples, 0.09%)</title><rect x="1.6454%" y="405" width="0.0922%" height="15" fill="rgb(235,61,29)" fg:x="982" fg:w="55"/><text x="1.8954%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (55 samples, 0.09%)</title><rect x="1.6454%" y="389" width="0.0922%" height="15" fill="rgb(219,207,3)" fg:x="982" fg:w="55"/><text x="1.8954%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (54 samples, 0.09%)</title><rect x="1.6470%" y="373" width="0.0905%" height="15" fill="rgb(222,56,46)" fg:x="983" fg:w="54"/><text x="1.8970%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (54 samples, 0.09%)</title><rect x="1.6470%" y="357" width="0.0905%" height="15" fill="rgb(239,76,54)" fg:x="983" fg:w="54"/><text x="1.8970%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (54 samples, 0.09%)</title><rect x="1.6470%" y="341" width="0.0905%" height="15" fill="rgb(231,124,27)" fg:x="983" fg:w="54"/><text x="1.8970%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (54 samples, 0.09%)</title><rect x="1.6470%" y="325" width="0.0905%" height="15" fill="rgb(249,195,6)" fg:x="983" fg:w="54"/><text x="1.8970%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u8 (13 samples, 0.02%)</title><rect x="1.7157%" y="309" width="0.0218%" height="15" fill="rgb(237,174,47)" fg:x="1024" fg:w="13"/><text x="1.9657%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.02%)</title><rect x="1.7157%" y="293" width="0.0218%" height="15" fill="rgb(206,201,31)" fg:x="1024" fg:w="13"/><text x="1.9657%" y="303.50"></text></g><g><title>core::hash::sip::u8to64_le (6 samples, 0.01%)</title><rect x="1.7275%" y="277" width="0.0101%" height="15" fill="rgb(231,57,52)" fg:x="1031" fg:w="6"/><text x="1.9775%" y="287.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (10 samples, 0.02%)</title><rect x="1.7794%" y="389" width="0.0168%" height="15" fill="rgb(248,177,22)" fg:x="1062" fg:w="10"/><text x="2.0294%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (36 samples, 0.06%)</title><rect x="1.7744%" y="405" width="0.0603%" height="15" fill="rgb(215,211,37)" fg:x="1059" fg:w="36"/><text x="2.0244%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (23 samples, 0.04%)</title><rect x="1.7962%" y="389" width="0.0385%" height="15" fill="rgb(241,128,51)" fg:x="1072" fg:w="23"/><text x="2.0462%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (22 samples, 0.04%)</title><rect x="1.7978%" y="373" width="0.0369%" height="15" fill="rgb(227,165,31)" fg:x="1073" fg:w="22"/><text x="2.0478%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (15 samples, 0.03%)</title><rect x="1.8380%" y="405" width="0.0251%" height="15" fill="rgb(228,167,24)" fg:x="1097" fg:w="15"/><text x="2.0880%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (10 samples, 0.02%)</title><rect x="1.8464%" y="389" width="0.0168%" height="15" fill="rgb(228,143,12)" fg:x="1102" fg:w="10"/><text x="2.0964%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (6 samples, 0.01%)</title><rect x="1.8732%" y="389" width="0.0101%" height="15" fill="rgb(249,149,8)" fg:x="1118" fg:w="6"/><text x="2.1232%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (17 samples, 0.03%)</title><rect x="1.8833%" y="389" width="0.0285%" height="15" fill="rgb(243,35,44)" fg:x="1124" fg:w="17"/><text x="2.1333%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (42 samples, 0.07%)</title><rect x="1.8632%" y="405" width="0.0704%" height="15" fill="rgb(246,89,9)" fg:x="1112" fg:w="42"/><text x="2.1132%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (13 samples, 0.02%)</title><rect x="1.9118%" y="389" width="0.0218%" height="15" fill="rgb(233,213,13)" fg:x="1141" fg:w="13"/><text x="2.1618%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (13 samples, 0.02%)</title><rect x="1.9118%" y="373" width="0.0218%" height="15" fill="rgb(233,141,41)" fg:x="1141" fg:w="13"/><text x="2.1618%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (24 samples, 0.04%)</title><rect x="1.9520%" y="373" width="0.0402%" height="15" fill="rgb(239,167,4)" fg:x="1165" fg:w="24"/><text x="2.2020%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (164 samples, 0.27%)</title><rect x="1.7375%" y="437" width="0.2748%" height="15" fill="rgb(209,217,16)" fg:x="1037" fg:w="164"/><text x="1.9875%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (158 samples, 0.26%)</title><rect x="1.7476%" y="421" width="0.2647%" height="15" fill="rgb(219,88,35)" fg:x="1043" fg:w="158"/><text x="1.9976%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (47 samples, 0.08%)</title><rect x="1.9335%" y="405" width="0.0787%" height="15" fill="rgb(220,193,23)" fg:x="1154" fg:w="47"/><text x="2.1835%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (47 samples, 0.08%)</title><rect x="1.9335%" y="389" width="0.0787%" height="15" fill="rgb(230,90,52)" fg:x="1154" fg:w="47"/><text x="2.1835%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (12 samples, 0.02%)</title><rect x="1.9922%" y="373" width="0.0201%" height="15" fill="rgb(252,106,19)" fg:x="1189" fg:w="12"/><text x="2.2422%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (12 samples, 0.02%)</title><rect x="1.9922%" y="357" width="0.0201%" height="15" fill="rgb(206,74,20)" fg:x="1189" fg:w="12"/><text x="2.2422%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (6 samples, 0.01%)</title><rect x="2.0207%" y="405" width="0.0101%" height="15" fill="rgb(230,138,44)" fg:x="1206" fg:w="6"/><text x="2.2707%" y="415.50"></text></g><g><title>core::ptr::write (6 samples, 0.01%)</title><rect x="2.0207%" y="389" width="0.0101%" height="15" fill="rgb(235,182,43)" fg:x="1206" fg:w="6"/><text x="2.2707%" y="399.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (8 samples, 0.01%)</title><rect x="2.0207%" y="421" width="0.0134%" height="15" fill="rgb(242,16,51)" fg:x="1206" fg:w="8"/><text x="2.2707%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (13 samples, 0.02%)</title><rect x="2.0391%" y="405" width="0.0218%" height="15" fill="rgb(248,9,4)" fg:x="1217" fg:w="13"/><text x="2.2891%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (19 samples, 0.03%)</title><rect x="2.0341%" y="421" width="0.0318%" height="15" fill="rgb(210,31,22)" fg:x="1214" fg:w="19"/><text x="2.2841%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (6 samples, 0.01%)</title><rect x="2.0676%" y="389" width="0.0101%" height="15" fill="rgb(239,54,39)" fg:x="1234" fg:w="6"/><text x="2.3176%" y="399.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (355 samples, 0.59%)</title><rect x="1.4845%" y="501" width="0.5948%" height="15" fill="rgb(230,99,41)" fg:x="886" fg:w="355"/><text x="1.7345%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (345 samples, 0.58%)</title><rect x="1.5013%" y="485" width="0.5781%" height="15" fill="rgb(253,106,12)" fg:x="896" fg:w="345"/><text x="1.7513%" y="495.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (343 samples, 0.57%)</title><rect x="1.5046%" y="469" width="0.5747%" height="15" fill="rgb(213,46,41)" fg:x="898" fg:w="343"/><text x="1.7546%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (338 samples, 0.57%)</title><rect x="1.5130%" y="453" width="0.5663%" height="15" fill="rgb(215,133,35)" fg:x="903" fg:w="338"/><text x="1.7630%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (40 samples, 0.07%)</title><rect x="2.0123%" y="437" width="0.0670%" height="15" fill="rgb(213,28,5)" fg:x="1201" fg:w="40"/><text x="2.2623%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (7 samples, 0.01%)</title><rect x="2.0676%" y="421" width="0.0117%" height="15" fill="rgb(215,77,49)" fg:x="1234" fg:w="7"/><text x="2.3176%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (7 samples, 0.01%)</title><rect x="2.0676%" y="405" width="0.0117%" height="15" fill="rgb(248,100,22)" fg:x="1234" fg:w="7"/><text x="2.3176%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.02%)</title><rect x="2.0877%" y="405" width="0.0184%" height="15" fill="rgb(208,67,9)" fg:x="1246" fg:w="11"/><text x="2.3377%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.02%)</title><rect x="2.0877%" y="389" width="0.0184%" height="15" fill="rgb(219,133,21)" fg:x="1246" fg:w="11"/><text x="2.3377%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (11 samples, 0.02%)</title><rect x="2.0877%" y="373" width="0.0184%" height="15" fill="rgb(246,46,29)" fg:x="1246" fg:w="11"/><text x="2.3377%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (8 samples, 0.01%)</title><rect x="2.0927%" y="357" width="0.0134%" height="15" fill="rgb(246,185,52)" fg:x="1249" fg:w="8"/><text x="2.3427%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (8 samples, 0.01%)</title><rect x="2.0927%" y="341" width="0.0134%" height="15" fill="rgb(252,136,11)" fg:x="1249" fg:w="8"/><text x="2.3427%" y="351.50"></text></g><g><title>alloc::alloc::alloc (8 samples, 0.01%)</title><rect x="2.0927%" y="325" width="0.0134%" height="15" fill="rgb(219,138,53)" fg:x="1249" fg:w="8"/><text x="2.3427%" y="335.50"></text></g><g><title>malloc (7 samples, 0.01%)</title><rect x="2.0944%" y="309" width="0.0117%" height="15" fill="rgb(211,51,23)" fg:x="1250" fg:w="7"/><text x="2.3444%" y="319.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (398 samples, 0.67%)</title><rect x="1.4661%" y="517" width="0.6669%" height="15" fill="rgb(247,221,28)" fg:x="875" fg:w="398"/><text x="1.7161%" y="527.50"></text></g><g><title>core::ops::function::FnMut::call_mut (32 samples, 0.05%)</title><rect x="2.0793%" y="501" width="0.0536%" height="15" fill="rgb(251,222,45)" fg:x="1241" fg:w="32"/><text x="2.3293%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (32 samples, 0.05%)</title><rect x="2.0793%" y="485" width="0.0536%" height="15" fill="rgb(217,162,53)" fg:x="1241" fg:w="32"/><text x="2.3293%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (27 samples, 0.05%)</title><rect x="2.0877%" y="469" width="0.0452%" height="15" fill="rgb(229,93,14)" fg:x="1246" fg:w="27"/><text x="2.3377%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (27 samples, 0.05%)</title><rect x="2.0877%" y="453" width="0.0452%" height="15" fill="rgb(209,67,49)" fg:x="1246" fg:w="27"/><text x="2.3377%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (27 samples, 0.05%)</title><rect x="2.0877%" y="437" width="0.0452%" height="15" fill="rgb(213,87,29)" fg:x="1246" fg:w="27"/><text x="2.3377%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (27 samples, 0.05%)</title><rect x="2.0877%" y="421" width="0.0452%" height="15" fill="rgb(205,151,52)" fg:x="1246" fg:w="27"/><text x="2.3377%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (16 samples, 0.03%)</title><rect x="2.1061%" y="405" width="0.0268%" height="15" fill="rgb(253,215,39)" fg:x="1257" fg:w="16"/><text x="2.3561%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.03%)</title><rect x="2.1061%" y="389" width="0.0268%" height="15" fill="rgb(221,220,41)" fg:x="1257" fg:w="16"/><text x="2.3561%" y="399.50"></text></g><g><title>[libc.so.6] (16 samples, 0.03%)</title><rect x="2.1061%" y="373" width="0.0268%" height="15" fill="rgb(218,133,21)" fg:x="1257" fg:w="16"/><text x="2.3561%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (401 samples, 0.67%)</title><rect x="1.4627%" y="549" width="0.6719%" height="15" fill="rgb(221,193,43)" fg:x="873" fg:w="401"/><text x="1.7127%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (401 samples, 0.67%)</title><rect x="1.4627%" y="533" width="0.6719%" height="15" fill="rgb(240,128,52)" fg:x="873" fg:w="401"/><text x="1.7127%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (404 samples, 0.68%)</title><rect x="1.4611%" y="597" width="0.6769%" height="15" fill="rgb(253,114,12)" fg:x="872" fg:w="404"/><text x="1.7111%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (404 samples, 0.68%)</title><rect x="1.4611%" y="581" width="0.6769%" height="15" fill="rgb(215,223,47)" fg:x="872" fg:w="404"/><text x="1.7111%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (403 samples, 0.68%)</title><rect x="1.4627%" y="565" width="0.6752%" height="15" fill="rgb(248,225,23)" fg:x="873" fg:w="403"/><text x="1.7127%" y="575.50"></text></g><g><title>core::cmp::Ord::max (7 samples, 0.01%)</title><rect x="2.1514%" y="533" width="0.0117%" height="15" fill="rgb(250,108,0)" fg:x="1284" fg:w="7"/><text x="2.4014%" y="543.50"></text></g><g><title>core::cmp::max_by (7 samples, 0.01%)</title><rect x="2.1514%" y="517" width="0.0117%" height="15" fill="rgb(228,208,7)" fg:x="1284" fg:w="7"/><text x="2.4014%" y="527.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (17 samples, 0.03%)</title><rect x="2.1866%" y="501" width="0.0285%" height="15" fill="rgb(244,45,10)" fg:x="1305" fg:w="17"/><text x="2.4366%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (14 samples, 0.02%)</title><rect x="2.1916%" y="485" width="0.0235%" height="15" fill="rgb(207,125,25)" fg:x="1308" fg:w="14"/><text x="2.4416%" y="495.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (8 samples, 0.01%)</title><rect x="2.2016%" y="469" width="0.0134%" height="15" fill="rgb(210,195,18)" fg:x="1314" fg:w="8"/><text x="2.4516%" y="479.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (458 samples, 0.77%)</title><rect x="1.4493%" y="645" width="0.7674%" height="15" fill="rgb(249,80,12)" fg:x="865" fg:w="458"/><text x="1.6993%" y="655.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (458 samples, 0.77%)</title><rect x="1.4493%" y="629" width="0.7674%" height="15" fill="rgb(221,65,9)" fg:x="865" fg:w="458"/><text x="1.6993%" y="639.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (457 samples, 0.77%)</title><rect x="1.4510%" y="613" width="0.7657%" height="15" fill="rgb(235,49,36)" fg:x="866" fg:w="457"/><text x="1.7010%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (47 samples, 0.08%)</title><rect x="2.1380%" y="597" width="0.0787%" height="15" fill="rgb(225,32,20)" fg:x="1276" fg:w="47"/><text x="2.3880%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (47 samples, 0.08%)</title><rect x="2.1380%" y="581" width="0.0787%" height="15" fill="rgb(215,141,46)" fg:x="1276" fg:w="47"/><text x="2.3880%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (44 samples, 0.07%)</title><rect x="2.1430%" y="565" width="0.0737%" height="15" fill="rgb(250,160,47)" fg:x="1279" fg:w="44"/><text x="2.3930%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (43 samples, 0.07%)</title><rect x="2.1447%" y="549" width="0.0720%" height="15" fill="rgb(216,222,40)" fg:x="1280" fg:w="43"/><text x="2.3947%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (32 samples, 0.05%)</title><rect x="2.1631%" y="533" width="0.0536%" height="15" fill="rgb(234,217,39)" fg:x="1291" fg:w="32"/><text x="2.4131%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (22 samples, 0.04%)</title><rect x="2.1799%" y="517" width="0.0369%" height="15" fill="rgb(207,178,40)" fg:x="1301" fg:w="22"/><text x="2.4299%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (471 samples, 0.79%)</title><rect x="1.4326%" y="677" width="0.7892%" height="15" fill="rgb(221,136,13)" fg:x="855" fg:w="471"/><text x="1.6826%" y="687.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (470 samples, 0.79%)</title><rect x="1.4342%" y="661" width="0.7875%" height="15" fill="rgb(249,199,10)" fg:x="856" fg:w="470"/><text x="1.6842%" y="671.50"></text></g><g><title>aes_grinder::algo::Algo::get_all_variables (483 samples, 0.81%)</title><rect x="1.4141%" y="693" width="0.8093%" height="15" fill="rgb(249,222,13)" fg:x="844" fg:w="483"/><text x="1.6641%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.03%)</title><rect x="2.2569%" y="565" width="0.0318%" height="15" fill="rgb(244,185,38)" fg:x="1347" fg:w="19"/><text x="2.5069%" y="575.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (6 samples, 0.01%)</title><rect x="2.2787%" y="549" width="0.0101%" height="15" fill="rgb(236,202,9)" fg:x="1360" fg:w="6"/><text x="2.5287%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.07%)</title><rect x="2.2368%" y="597" width="0.0687%" height="15" fill="rgb(250,229,37)" fg:x="1335" fg:w="41"/><text x="2.4868%" y="607.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (35 samples, 0.06%)</title><rect x="2.2469%" y="581" width="0.0586%" height="15" fill="rgb(206,174,23)" fg:x="1341" fg:w="35"/><text x="2.4969%" y="591.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (8 samples, 0.01%)</title><rect x="2.2921%" y="565" width="0.0134%" height="15" fill="rgb(211,33,43)" fg:x="1368" fg:w="8"/><text x="2.5421%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (6 samples, 0.01%)</title><rect x="2.2955%" y="549" width="0.0101%" height="15" fill="rgb(245,58,50)" fg:x="1370" fg:w="6"/><text x="2.5455%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.01%)</title><rect x="2.3172%" y="485" width="0.0117%" height="15" fill="rgb(244,68,36)" fg:x="1383" fg:w="7"/><text x="2.5672%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (26 samples, 0.04%)</title><rect x="2.3055%" y="581" width="0.0436%" height="15" fill="rgb(232,229,15)" fg:x="1376" fg:w="26"/><text x="2.5555%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,())&gt; (22 samples, 0.04%)</title><rect x="2.3122%" y="565" width="0.0369%" height="15" fill="rgb(254,30,23)" fg:x="1380" fg:w="22"/><text x="2.5622%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (22 samples, 0.04%)</title><rect x="2.3122%" y="549" width="0.0369%" height="15" fill="rgb(235,160,14)" fg:x="1380" fg:w="22"/><text x="2.5622%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (22 samples, 0.04%)</title><rect x="2.3122%" y="533" width="0.0369%" height="15" fill="rgb(212,155,44)" fg:x="1380" fg:w="22"/><text x="2.5622%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (20 samples, 0.03%)</title><rect x="2.3156%" y="517" width="0.0335%" height="15" fill="rgb(226,2,50)" fg:x="1382" fg:w="20"/><text x="2.5656%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.03%)</title><rect x="2.3156%" y="501" width="0.0335%" height="15" fill="rgb(234,177,6)" fg:x="1382" fg:w="20"/><text x="2.5656%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (12 samples, 0.02%)</title><rect x="2.3290%" y="485" width="0.0201%" height="15" fill="rgb(217,24,9)" fg:x="1390" fg:w="12"/><text x="2.5790%" y="495.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (29 samples, 0.05%)</title><rect x="2.3055%" y="597" width="0.0486%" height="15" fill="rgb(220,13,46)" fg:x="1376" fg:w="29"/><text x="2.5555%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (87 samples, 0.15%)</title><rect x="2.2268%" y="613" width="0.1458%" height="15" fill="rgb(239,221,27)" fg:x="1329" fg:w="87"/><text x="2.4768%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (11 samples, 0.02%)</title><rect x="2.3541%" y="597" width="0.0184%" height="15" fill="rgb(222,198,25)" fg:x="1405" fg:w="11"/><text x="2.6041%" y="607.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (8 samples, 0.01%)</title><rect x="2.3591%" y="581" width="0.0134%" height="15" fill="rgb(211,99,13)" fg:x="1408" fg:w="8"/><text x="2.6091%" y="591.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (6 samples, 0.01%)</title><rect x="2.3625%" y="565" width="0.0101%" height="15" fill="rgb(232,111,31)" fg:x="1410" fg:w="6"/><text x="2.6125%" y="575.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (6 samples, 0.01%)</title><rect x="2.3625%" y="549" width="0.0101%" height="15" fill="rgb(245,82,37)" fg:x="1410" fg:w="6"/><text x="2.6125%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 0.01%)</title><rect x="2.3625%" y="533" width="0.0101%" height="15" fill="rgb(227,149,46)" fg:x="1410" fg:w="6"/><text x="2.6125%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;alloc::string::String&gt;&gt; (100 samples, 0.17%)</title><rect x="2.2234%" y="693" width="0.1676%" height="15" fill="rgb(218,36,50)" fg:x="1327" fg:w="100"/><text x="2.4734%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;alloc::string::String,std::collections::hash::map::RandomState&gt;&gt; (100 samples, 0.17%)</title><rect x="2.2234%" y="677" width="0.1676%" height="15" fill="rgb(226,80,48)" fg:x="1327" fg:w="100"/><text x="2.4734%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,(),std::collections::hash::map::RandomState&gt;&gt; (99 samples, 0.17%)</title><rect x="2.2251%" y="661" width="0.1659%" height="15" fill="rgb(238,224,15)" fg:x="1328" fg:w="99"/><text x="2.4751%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,())&gt;&gt; (99 samples, 0.17%)</title><rect x="2.2251%" y="645" width="0.1659%" height="15" fill="rgb(241,136,10)" fg:x="1328" fg:w="99"/><text x="2.4751%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (99 samples, 0.17%)</title><rect x="2.2251%" y="629" width="0.1659%" height="15" fill="rgb(208,32,45)" fg:x="1328" fg:w="99"/><text x="2.4751%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (11 samples, 0.02%)</title><rect x="2.3725%" y="613" width="0.0184%" height="15" fill="rgb(207,135,9)" fg:x="1416" fg:w="11"/><text x="2.6225%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (11 samples, 0.02%)</title><rect x="2.3725%" y="597" width="0.0184%" height="15" fill="rgb(206,86,44)" fg:x="1416" fg:w="11"/><text x="2.6225%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::allocation_info (11 samples, 0.02%)</title><rect x="2.3725%" y="581" width="0.0184%" height="15" fill="rgb(245,177,15)" fg:x="1416" fg:w="11"/><text x="2.6225%" y="591.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (6 samples, 0.01%)</title><rect x="2.3809%" y="565" width="0.0101%" height="15" fill="rgb(206,64,50)" fg:x="1421" fg:w="6"/><text x="2.6309%" y="575.50"></text></g><g><title>hashbrown::map::make_hash (8 samples, 0.01%)</title><rect x="2.3977%" y="549" width="0.0134%" height="15" fill="rgb(234,36,40)" fg:x="1431" fg:w="8"/><text x="2.6477%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.01%)</title><rect x="2.3977%" y="533" width="0.0134%" height="15" fill="rgb(213,64,8)" fg:x="1431" fg:w="8"/><text x="2.6477%" y="543.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (9 samples, 0.02%)</title><rect x="2.4228%" y="501" width="0.0151%" height="15" fill="rgb(210,75,36)" fg:x="1446" fg:w="9"/><text x="2.6728%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (28 samples, 0.05%)</title><rect x="2.3943%" y="677" width="0.0469%" height="15" fill="rgb(229,88,21)" fg:x="1429" fg:w="28"/><text x="2.6443%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (28 samples, 0.05%)</title><rect x="2.3943%" y="661" width="0.0469%" height="15" fill="rgb(252,204,47)" fg:x="1429" fg:w="28"/><text x="2.6443%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (27 samples, 0.05%)</title><rect x="2.3960%" y="645" width="0.0452%" height="15" fill="rgb(208,77,27)" fg:x="1430" fg:w="27"/><text x="2.6460%" y="655.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::is_subset::_{{closure}} (27 samples, 0.05%)</title><rect x="2.3960%" y="629" width="0.0452%" height="15" fill="rgb(221,76,26)" fg:x="1430" fg:w="27"/><text x="2.6460%" y="639.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (27 samples, 0.05%)</title><rect x="2.3960%" y="613" width="0.0452%" height="15" fill="rgb(225,139,18)" fg:x="1430" fg:w="27"/><text x="2.6460%" y="623.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (27 samples, 0.05%)</title><rect x="2.3960%" y="597" width="0.0452%" height="15" fill="rgb(230,137,11)" fg:x="1430" fg:w="27"/><text x="2.6460%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (27 samples, 0.05%)</title><rect x="2.3960%" y="581" width="0.0452%" height="15" fill="rgb(212,28,1)" fg:x="1430" fg:w="27"/><text x="2.6460%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (27 samples, 0.05%)</title><rect x="2.3960%" y="565" width="0.0452%" height="15" fill="rgb(248,164,17)" fg:x="1430" fg:w="27"/><text x="2.6460%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (18 samples, 0.03%)</title><rect x="2.4111%" y="549" width="0.0302%" height="15" fill="rgb(222,171,42)" fg:x="1439" fg:w="18"/><text x="2.6611%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (18 samples, 0.03%)</title><rect x="2.4111%" y="533" width="0.0302%" height="15" fill="rgb(243,84,45)" fg:x="1439" fg:w="18"/><text x="2.6611%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (18 samples, 0.03%)</title><rect x="2.4111%" y="517" width="0.0302%" height="15" fill="rgb(252,49,23)" fg:x="1439" fg:w="18"/><text x="2.6611%" y="527.50"></text></g><g><title>aes_grinder::exaustive_search::update_queue::_{{closure}} (930 samples, 1.56%)</title><rect x="0.8880%" y="709" width="1.5582%" height="15" fill="rgb(215,19,7)" fg:x="530" fg:w="930"/><text x="1.1380%" y="719.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::is_subset (33 samples, 0.06%)</title><rect x="2.3910%" y="693" width="0.0553%" height="15" fill="rgb(238,81,41)" fg:x="1427" fg:w="33"/><text x="2.6410%" y="703.50"></text></g><g><title>core::cmp::min (9 samples, 0.02%)</title><rect x="2.4865%" y="341" width="0.0151%" height="15" fill="rgb(210,199,37)" fg:x="1484" fg:w="9"/><text x="2.7365%" y="351.50"></text></g><g><title>core::cmp::Ord::min (9 samples, 0.02%)</title><rect x="2.4865%" y="325" width="0.0151%" height="15" fill="rgb(244,192,49)" fg:x="1484" fg:w="9"/><text x="2.7365%" y="335.50"></text></g><g><title>core::cmp::min_by (9 samples, 0.02%)</title><rect x="2.4865%" y="309" width="0.0151%" height="15" fill="rgb(226,211,11)" fg:x="1484" fg:w="9"/><text x="2.7365%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21 samples, 0.04%)</title><rect x="2.4764%" y="357" width="0.0352%" height="15" fill="rgb(236,162,54)" fg:x="1478" fg:w="21"/><text x="2.7264%" y="367.50"></text></g><g><title>core::hash::sip::u8to64_le (6 samples, 0.01%)</title><rect x="2.5015%" y="341" width="0.0101%" height="15" fill="rgb(220,229,9)" fg:x="1493" fg:w="6"/><text x="2.7515%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (31 samples, 0.05%)</title><rect x="2.4747%" y="437" width="0.0519%" height="15" fill="rgb(250,87,22)" fg:x="1477" fg:w="31"/><text x="2.7247%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (30 samples, 0.05%)</title><rect x="2.4764%" y="421" width="0.0503%" height="15" fill="rgb(239,43,17)" fg:x="1478" fg:w="30"/><text x="2.7264%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (30 samples, 0.05%)</title><rect x="2.4764%" y="405" width="0.0503%" height="15" fill="rgb(231,177,25)" fg:x="1478" fg:w="30"/><text x="2.7264%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (30 samples, 0.05%)</title><rect x="2.4764%" y="389" width="0.0503%" height="15" fill="rgb(219,179,1)" fg:x="1478" fg:w="30"/><text x="2.7264%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (30 samples, 0.05%)</title><rect x="2.4764%" y="373" width="0.0503%" height="15" fill="rgb(238,219,53)" fg:x="1478" fg:w="30"/><text x="2.7264%" y="383.50"></text></g><g><title>core::hash::Hasher::write_u8 (9 samples, 0.02%)</title><rect x="2.5116%" y="357" width="0.0151%" height="15" fill="rgb(232,167,36)" fg:x="1499" fg:w="9"/><text x="2.7616%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.02%)</title><rect x="2.5116%" y="341" width="0.0151%" height="15" fill="rgb(244,19,51)" fg:x="1499" fg:w="9"/><text x="2.7616%" y="351.50"></text></g><g><title>core::hash::Hash::hash_slice (39 samples, 0.07%)</title><rect x="2.4714%" y="453" width="0.0653%" height="15" fill="rgb(224,6,22)" fg:x="1475" fg:w="39"/><text x="2.7214%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.01%)</title><rect x="2.5267%" y="437" width="0.0101%" height="15" fill="rgb(224,145,5)" fg:x="1508" fg:w="6"/><text x="2.7767%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (43 samples, 0.07%)</title><rect x="2.4697%" y="485" width="0.0720%" height="15" fill="rgb(234,130,49)" fg:x="1474" fg:w="43"/><text x="2.7197%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (42 samples, 0.07%)</title><rect x="2.4714%" y="469" width="0.0704%" height="15" fill="rgb(254,6,2)" fg:x="1475" fg:w="42"/><text x="2.7214%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (11 samples, 0.02%)</title><rect x="2.5635%" y="293" width="0.0184%" height="15" fill="rgb(208,96,46)" fg:x="1530" fg:w="11"/><text x="2.8135%" y="303.50"></text></g><g><title>core::cmp::min (8 samples, 0.01%)</title><rect x="2.5820%" y="293" width="0.0134%" height="15" fill="rgb(239,3,39)" fg:x="1541" fg:w="8"/><text x="2.8320%" y="303.50"></text></g><g><title>core::cmp::Ord::min (8 samples, 0.01%)</title><rect x="2.5820%" y="277" width="0.0134%" height="15" fill="rgb(233,210,1)" fg:x="1541" fg:w="8"/><text x="2.8320%" y="287.50"></text></g><g><title>core::cmp::min_by (8 samples, 0.01%)</title><rect x="2.5820%" y="261" width="0.0134%" height="15" fill="rgb(244,137,37)" fg:x="1541" fg:w="8"/><text x="2.8320%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (33 samples, 0.06%)</title><rect x="2.5585%" y="309" width="0.0553%" height="15" fill="rgb(240,136,2)" fg:x="1527" fg:w="33"/><text x="2.8085%" y="319.50"></text></g><g><title>core::hash::sip::u8to64_le (11 samples, 0.02%)</title><rect x="2.5954%" y="293" width="0.0184%" height="15" fill="rgb(239,18,37)" fg:x="1549" fg:w="11"/><text x="2.8454%" y="303.50"></text></g><g><title>core::cmp::min (6 samples, 0.01%)</title><rect x="2.6172%" y="277" width="0.0101%" height="15" fill="rgb(218,185,22)" fg:x="1562" fg:w="6"/><text x="2.8672%" y="287.50"></text></g><g><title>core::cmp::Ord::min (6 samples, 0.01%)</title><rect x="2.6172%" y="261" width="0.0101%" height="15" fill="rgb(225,218,4)" fg:x="1562" fg:w="6"/><text x="2.8672%" y="271.50"></text></g><g><title>core::cmp::min_by (6 samples, 0.01%)</title><rect x="2.6172%" y="245" width="0.0101%" height="15" fill="rgb(230,182,32)" fg:x="1562" fg:w="6"/><text x="2.8672%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (46 samples, 0.08%)</title><rect x="2.5518%" y="389" width="0.0771%" height="15" fill="rgb(242,56,43)" fg:x="1523" fg:w="46"/><text x="2.8018%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (42 samples, 0.07%)</title><rect x="2.5585%" y="373" width="0.0704%" height="15" fill="rgb(233,99,24)" fg:x="1527" fg:w="42"/><text x="2.8085%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (42 samples, 0.07%)</title><rect x="2.5585%" y="357" width="0.0704%" height="15" fill="rgb(234,209,42)" fg:x="1527" fg:w="42"/><text x="2.8085%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (42 samples, 0.07%)</title><rect x="2.5585%" y="341" width="0.0704%" height="15" fill="rgb(227,7,12)" fg:x="1527" fg:w="42"/><text x="2.8085%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (42 samples, 0.07%)</title><rect x="2.5585%" y="325" width="0.0704%" height="15" fill="rgb(245,203,43)" fg:x="1527" fg:w="42"/><text x="2.8085%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u8 (9 samples, 0.02%)</title><rect x="2.6138%" y="309" width="0.0151%" height="15" fill="rgb(238,205,33)" fg:x="1560" fg:w="9"/><text x="2.8638%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.02%)</title><rect x="2.6138%" y="293" width="0.0151%" height="15" fill="rgb(231,56,7)" fg:x="1560" fg:w="9"/><text x="2.8638%" y="303.50"></text></g><g><title>core::hash::Hash::hash_slice (53 samples, 0.09%)</title><rect x="2.5485%" y="405" width="0.0888%" height="15" fill="rgb(244,186,29)" fg:x="1521" fg:w="53"/><text x="2.7985%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (61 samples, 0.10%)</title><rect x="2.5468%" y="437" width="0.1022%" height="15" fill="rgb(234,111,31)" fg:x="1520" fg:w="61"/><text x="2.7968%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (60 samples, 0.10%)</title><rect x="2.5485%" y="421" width="0.1005%" height="15" fill="rgb(241,149,10)" fg:x="1521" fg:w="60"/><text x="2.7985%" y="431.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (7 samples, 0.01%)</title><rect x="2.6373%" y="405" width="0.0117%" height="15" fill="rgb(249,206,44)" fg:x="1574" fg:w="7"/><text x="2.8873%" y="415.50"></text></g><g><title>core::hash::Hasher::write_usize (7 samples, 0.01%)</title><rect x="2.6373%" y="389" width="0.0117%" height="15" fill="rgb(251,153,30)" fg:x="1574" fg:w="7"/><text x="2.8873%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="2.6373%" y="373" width="0.0117%" height="15" fill="rgb(239,152,38)" fg:x="1574" fg:w="7"/><text x="2.8873%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="2.6373%" y="357" width="0.0117%" height="15" fill="rgb(249,139,47)" fg:x="1574" fg:w="7"/><text x="2.8873%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="2.6373%" y="341" width="0.0117%" height="15" fill="rgb(244,64,35)" fg:x="1574" fg:w="7"/><text x="2.8873%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (6 samples, 0.01%)</title><rect x="2.6557%" y="325" width="0.0101%" height="15" fill="rgb(216,46,15)" fg:x="1585" fg:w="6"/><text x="2.9057%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.01%)</title><rect x="2.6557%" y="309" width="0.0101%" height="15" fill="rgb(250,74,19)" fg:x="1585" fg:w="6"/><text x="2.9057%" y="319.50"></text></g><g><title>core::cmp::min (8 samples, 0.01%)</title><rect x="2.6792%" y="245" width="0.0134%" height="15" fill="rgb(249,42,33)" fg:x="1599" fg:w="8"/><text x="2.9292%" y="255.50"></text></g><g><title>core::cmp::Ord::min (8 samples, 0.01%)</title><rect x="2.6792%" y="229" width="0.0134%" height="15" fill="rgb(242,149,17)" fg:x="1599" fg:w="8"/><text x="2.9292%" y="239.50"></text></g><g><title>core::cmp::min_by (7 samples, 0.01%)</title><rect x="2.6808%" y="213" width="0.0117%" height="15" fill="rgb(244,29,21)" fg:x="1600" fg:w="7"/><text x="2.9308%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (22 samples, 0.04%)</title><rect x="2.6658%" y="261" width="0.0369%" height="15" fill="rgb(220,130,37)" fg:x="1591" fg:w="22"/><text x="2.9158%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (6 samples, 0.01%)</title><rect x="2.6926%" y="245" width="0.0101%" height="15" fill="rgb(211,67,2)" fg:x="1607" fg:w="6"/><text x="2.9426%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (38 samples, 0.06%)</title><rect x="2.6540%" y="341" width="0.0637%" height="15" fill="rgb(235,68,52)" fg:x="1584" fg:w="38"/><text x="2.9040%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (31 samples, 0.05%)</title><rect x="2.6658%" y="325" width="0.0519%" height="15" fill="rgb(246,142,3)" fg:x="1591" fg:w="31"/><text x="2.9158%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (31 samples, 0.05%)</title><rect x="2.6658%" y="309" width="0.0519%" height="15" fill="rgb(241,25,7)" fg:x="1591" fg:w="31"/><text x="2.9158%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (31 samples, 0.05%)</title><rect x="2.6658%" y="293" width="0.0519%" height="15" fill="rgb(242,119,39)" fg:x="1591" fg:w="31"/><text x="2.9158%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (31 samples, 0.05%)</title><rect x="2.6658%" y="277" width="0.0519%" height="15" fill="rgb(241,98,45)" fg:x="1591" fg:w="31"/><text x="2.9158%" y="287.50"></text></g><g><title>core::hash::Hasher::write_u8 (9 samples, 0.02%)</title><rect x="2.7026%" y="261" width="0.0151%" height="15" fill="rgb(254,28,30)" fg:x="1613" fg:w="9"/><text x="2.9526%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.02%)</title><rect x="2.7026%" y="245" width="0.0151%" height="15" fill="rgb(241,142,54)" fg:x="1613" fg:w="9"/><text x="2.9526%" y="255.50"></text></g><g><title>core::hash::Hash::hash_slice (47 samples, 0.08%)</title><rect x="2.6540%" y="357" width="0.0787%" height="15" fill="rgb(222,85,15)" fg:x="1584" fg:w="47"/><text x="2.9040%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.02%)</title><rect x="2.7177%" y="341" width="0.0151%" height="15" fill="rgb(210,85,47)" fg:x="1622" fg:w="9"/><text x="2.9677%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.01%)</title><rect x="2.7361%" y="277" width="0.0101%" height="15" fill="rgb(224,206,25)" fg:x="1633" fg:w="6"/><text x="2.9861%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (61 samples, 0.10%)</title><rect x="2.6540%" y="389" width="0.1022%" height="15" fill="rgb(243,201,19)" fg:x="1584" fg:w="61"/><text x="2.9040%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (61 samples, 0.10%)</title><rect x="2.6540%" y="373" width="0.1022%" height="15" fill="rgb(236,59,4)" fg:x="1584" fg:w="61"/><text x="2.9040%" y="383.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (14 samples, 0.02%)</title><rect x="2.7328%" y="357" width="0.0235%" height="15" fill="rgb(254,179,45)" fg:x="1631" fg:w="14"/><text x="2.9828%" y="367.50"></text></g><g><title>core::hash::Hasher::write_usize (14 samples, 0.02%)</title><rect x="2.7328%" y="341" width="0.0235%" height="15" fill="rgb(226,14,10)" fg:x="1631" fg:w="14"/><text x="2.9828%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="2.7328%" y="325" width="0.0235%" height="15" fill="rgb(244,27,41)" fg:x="1631" fg:w="14"/><text x="2.9828%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="2.7328%" y="309" width="0.0235%" height="15" fill="rgb(235,35,32)" fg:x="1631" fg:w="14"/><text x="2.9828%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="2.7328%" y="293" width="0.0235%" height="15" fill="rgb(218,68,31)" fg:x="1631" fg:w="14"/><text x="2.9828%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.01%)</title><rect x="2.7696%" y="197" width="0.0134%" height="15" fill="rgb(207,120,37)" fg:x="1653" fg:w="8"/><text x="3.0196%" y="207.50"></text></g><g><title>core::cmp::min (6 samples, 0.01%)</title><rect x="2.7830%" y="197" width="0.0101%" height="15" fill="rgb(227,98,0)" fg:x="1661" fg:w="6"/><text x="3.0330%" y="207.50"></text></g><g><title>core::cmp::Ord::min (6 samples, 0.01%)</title><rect x="2.7830%" y="181" width="0.0101%" height="15" fill="rgb(207,7,3)" fg:x="1661" fg:w="6"/><text x="3.0330%" y="191.50"></text></g><g><title>core::cmp::min_by (6 samples, 0.01%)</title><rect x="2.7830%" y="165" width="0.0101%" height="15" fill="rgb(206,98,19)" fg:x="1661" fg:w="6"/><text x="3.0330%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (22 samples, 0.04%)</title><rect x="2.7663%" y="213" width="0.0369%" height="15" fill="rgb(217,5,26)" fg:x="1651" fg:w="22"/><text x="3.0163%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (6 samples, 0.01%)</title><rect x="2.7931%" y="197" width="0.0101%" height="15" fill="rgb(235,190,38)" fg:x="1667" fg:w="6"/><text x="3.0431%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (33 samples, 0.06%)</title><rect x="2.7613%" y="293" width="0.0553%" height="15" fill="rgb(247,86,24)" fg:x="1648" fg:w="33"/><text x="3.0113%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (30 samples, 0.05%)</title><rect x="2.7663%" y="277" width="0.0503%" height="15" fill="rgb(205,101,16)" fg:x="1651" fg:w="30"/><text x="3.0163%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (30 samples, 0.05%)</title><rect x="2.7663%" y="261" width="0.0503%" height="15" fill="rgb(246,168,33)" fg:x="1651" fg:w="30"/><text x="3.0163%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (30 samples, 0.05%)</title><rect x="2.7663%" y="245" width="0.0503%" height="15" fill="rgb(231,114,1)" fg:x="1651" fg:w="30"/><text x="3.0163%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (30 samples, 0.05%)</title><rect x="2.7663%" y="229" width="0.0503%" height="15" fill="rgb(207,184,53)" fg:x="1651" fg:w="30"/><text x="3.0163%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u8 (8 samples, 0.01%)</title><rect x="2.8031%" y="213" width="0.0134%" height="15" fill="rgb(224,95,51)" fg:x="1673" fg:w="8"/><text x="3.0531%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="2.8031%" y="197" width="0.0134%" height="15" fill="rgb(212,188,45)" fg:x="1673" fg:w="8"/><text x="3.0531%" y="207.50"></text></g><g><title>core::hash::Hash::hash_slice (40 samples, 0.07%)</title><rect x="2.7596%" y="309" width="0.0670%" height="15" fill="rgb(223,154,38)" fg:x="1647" fg:w="40"/><text x="3.0096%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (48 samples, 0.08%)</title><rect x="2.7596%" y="341" width="0.0804%" height="15" fill="rgb(251,22,52)" fg:x="1647" fg:w="48"/><text x="3.0096%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (48 samples, 0.08%)</title><rect x="2.7596%" y="325" width="0.0804%" height="15" fill="rgb(229,209,22)" fg:x="1647" fg:w="48"/><text x="3.0096%" y="335.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (8 samples, 0.01%)</title><rect x="2.8266%" y="309" width="0.0134%" height="15" fill="rgb(234,138,34)" fg:x="1687" fg:w="8"/><text x="3.0766%" y="319.50"></text></g><g><title>core::hash::Hasher::write_usize (8 samples, 0.01%)</title><rect x="2.8266%" y="293" width="0.0134%" height="15" fill="rgb(212,95,11)" fg:x="1687" fg:w="8"/><text x="3.0766%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="2.8266%" y="277" width="0.0134%" height="15" fill="rgb(240,179,47)" fg:x="1687" fg:w="8"/><text x="3.0766%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="2.8266%" y="261" width="0.0134%" height="15" fill="rgb(240,163,11)" fg:x="1687" fg:w="8"/><text x="3.0766%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="2.8266%" y="245" width="0.0134%" height="15" fill="rgb(236,37,12)" fg:x="1687" fg:w="8"/><text x="3.0766%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="2.8467%" y="165" width="0.0117%" height="15" fill="rgb(232,164,16)" fg:x="1699" fg:w="7"/><text x="3.0967%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (12 samples, 0.02%)</title><rect x="2.8467%" y="245" width="0.0201%" height="15" fill="rgb(244,205,15)" fg:x="1699" fg:w="12"/><text x="3.0967%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (12 samples, 0.02%)</title><rect x="2.8467%" y="229" width="0.0201%" height="15" fill="rgb(223,117,47)" fg:x="1699" fg:w="12"/><text x="3.0967%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (12 samples, 0.02%)</title><rect x="2.8467%" y="213" width="0.0201%" height="15" fill="rgb(244,107,35)" fg:x="1699" fg:w="12"/><text x="3.0967%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (12 samples, 0.02%)</title><rect x="2.8467%" y="197" width="0.0201%" height="15" fill="rgb(205,140,8)" fg:x="1699" fg:w="12"/><text x="3.0967%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (12 samples, 0.02%)</title><rect x="2.8467%" y="181" width="0.0201%" height="15" fill="rgb(228,84,46)" fg:x="1699" fg:w="12"/><text x="3.0967%" y="191.50"></text></g><g><title>core::hash::Hash::hash_slice (18 samples, 0.03%)</title><rect x="2.8467%" y="261" width="0.0302%" height="15" fill="rgb(254,188,9)" fg:x="1699" fg:w="18"/><text x="3.0967%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.01%)</title><rect x="2.8785%" y="181" width="0.0117%" height="15" fill="rgb(206,112,54)" fg:x="1718" fg:w="7"/><text x="3.1285%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (32 samples, 0.05%)</title><rect x="2.8434%" y="293" width="0.0536%" height="15" fill="rgb(216,84,49)" fg:x="1697" fg:w="32"/><text x="3.0934%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (30 samples, 0.05%)</title><rect x="2.8467%" y="277" width="0.0503%" height="15" fill="rgb(214,194,35)" fg:x="1699" fg:w="30"/><text x="3.0967%" y="287.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (12 samples, 0.02%)</title><rect x="2.8769%" y="261" width="0.0201%" height="15" fill="rgb(249,28,3)" fg:x="1717" fg:w="12"/><text x="3.1269%" y="271.50"></text></g><g><title>core::hash::Hasher::write_usize (12 samples, 0.02%)</title><rect x="2.8769%" y="245" width="0.0201%" height="15" fill="rgb(222,56,52)" fg:x="1717" fg:w="12"/><text x="3.1269%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.02%)</title><rect x="2.8769%" y="229" width="0.0201%" height="15" fill="rgb(245,217,50)" fg:x="1717" fg:w="12"/><text x="3.1269%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (12 samples, 0.02%)</title><rect x="2.8769%" y="213" width="0.0201%" height="15" fill="rgb(213,201,24)" fg:x="1717" fg:w="12"/><text x="3.1269%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (12 samples, 0.02%)</title><rect x="2.8769%" y="197" width="0.0201%" height="15" fill="rgb(248,116,28)" fg:x="1717" fg:w="12"/><text x="3.1269%" y="207.50"></text></g><g><title>core::hash::Hash::hash_slice (6 samples, 0.01%)</title><rect x="2.9003%" y="213" width="0.0101%" height="15" fill="rgb(219,72,43)" fg:x="1731" fg:w="6"/><text x="3.1503%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (10 samples, 0.02%)</title><rect x="2.8986%" y="245" width="0.0168%" height="15" fill="rgb(209,138,14)" fg:x="1730" fg:w="10"/><text x="3.1486%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (10 samples, 0.02%)</title><rect x="2.8986%" y="229" width="0.0168%" height="15" fill="rgb(222,18,33)" fg:x="1730" fg:w="10"/><text x="3.1486%" y="239.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (23 samples, 0.04%)</title><rect x="2.8986%" y="277" width="0.0385%" height="15" fill="rgb(213,199,7)" fg:x="1730" fg:w="23"/><text x="3.1486%" y="287.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (23 samples, 0.04%)</title><rect x="2.8986%" y="261" width="0.0385%" height="15" fill="rgb(250,110,10)" fg:x="1730" fg:w="23"/><text x="3.1486%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (9 samples, 0.02%)</title><rect x="2.9221%" y="245" width="0.0151%" height="15" fill="rgb(248,123,6)" fg:x="1744" fg:w="9"/><text x="3.1721%" y="255.50"></text></g><g><title>core::hash::Hasher::write_usize (8 samples, 0.01%)</title><rect x="2.9238%" y="229" width="0.0134%" height="15" fill="rgb(206,91,31)" fg:x="1745" fg:w="8"/><text x="3.1738%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="2.9238%" y="213" width="0.0134%" height="15" fill="rgb(211,154,13)" fg:x="1745" fg:w="8"/><text x="3.1738%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="2.9238%" y="197" width="0.0134%" height="15" fill="rgb(225,148,7)" fg:x="1745" fg:w="8"/><text x="3.1738%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="2.9238%" y="181" width="0.0134%" height="15" fill="rgb(220,160,43)" fg:x="1745" fg:w="8"/><text x="3.1738%" y="191.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (42 samples, 0.07%)</title><rect x="2.8970%" y="293" width="0.0704%" height="15" fill="rgb(213,52,39)" fg:x="1729" fg:w="42"/><text x="3.1470%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (18 samples, 0.03%)</title><rect x="2.9372%" y="277" width="0.0302%" height="15" fill="rgb(243,137,7)" fg:x="1753" fg:w="18"/><text x="3.1872%" y="287.50"></text></g><g><title>core::hash::Hasher::write_isize (18 samples, 0.03%)</title><rect x="2.9372%" y="261" width="0.0302%" height="15" fill="rgb(230,79,13)" fg:x="1753" fg:w="18"/><text x="3.1872%" y="271.50"></text></g><g><title>core::hash::Hasher::write_usize (17 samples, 0.03%)</title><rect x="2.9389%" y="245" width="0.0285%" height="15" fill="rgb(247,105,23)" fg:x="1754" fg:w="17"/><text x="3.1889%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (16 samples, 0.03%)</title><rect x="2.9405%" y="229" width="0.0268%" height="15" fill="rgb(223,179,41)" fg:x="1755" fg:w="16"/><text x="3.1905%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (16 samples, 0.03%)</title><rect x="2.9405%" y="213" width="0.0268%" height="15" fill="rgb(218,9,34)" fg:x="1755" fg:w="16"/><text x="3.1905%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (15 samples, 0.03%)</title><rect x="2.9422%" y="197" width="0.0251%" height="15" fill="rgb(222,106,8)" fg:x="1756" fg:w="15"/><text x="3.1922%" y="207.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (95 samples, 0.16%)</title><rect x="2.8434%" y="325" width="0.1592%" height="15" fill="rgb(211,220,0)" fg:x="1697" fg:w="95"/><text x="3.0934%" y="335.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (95 samples, 0.16%)</title><rect x="2.8434%" y="309" width="0.1592%" height="15" fill="rgb(229,52,16)" fg:x="1697" fg:w="95"/><text x="3.0934%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (17 samples, 0.03%)</title><rect x="2.9740%" y="293" width="0.0285%" height="15" fill="rgb(212,155,18)" fg:x="1775" fg:w="17"/><text x="3.2240%" y="303.50"></text></g><g><title>core::hash::Hasher::write_usize (17 samples, 0.03%)</title><rect x="2.9740%" y="277" width="0.0285%" height="15" fill="rgb(242,21,14)" fg:x="1775" fg:w="17"/><text x="3.2240%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (17 samples, 0.03%)</title><rect x="2.9740%" y="261" width="0.0285%" height="15" fill="rgb(222,19,48)" fg:x="1775" fg:w="17"/><text x="3.2240%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (17 samples, 0.03%)</title><rect x="2.9740%" y="245" width="0.0285%" height="15" fill="rgb(232,45,27)" fg:x="1775" fg:w="17"/><text x="3.2240%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (17 samples, 0.03%)</title><rect x="2.9740%" y="229" width="0.0285%" height="15" fill="rgb(249,103,42)" fg:x="1775" fg:w="17"/><text x="3.2240%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.01%)</title><rect x="3.0159%" y="229" width="0.0134%" height="15" fill="rgb(246,81,33)" fg:x="1800" fg:w="8"/><text x="3.2659%" y="239.50"></text></g><g><title>core::cmp::min (11 samples, 0.02%)</title><rect x="3.0293%" y="229" width="0.0184%" height="15" fill="rgb(252,33,42)" fg:x="1808" fg:w="11"/><text x="3.2793%" y="239.50"></text></g><g><title>core::cmp::Ord::min (11 samples, 0.02%)</title><rect x="3.0293%" y="213" width="0.0184%" height="15" fill="rgb(209,212,41)" fg:x="1808" fg:w="11"/><text x="3.2793%" y="223.50"></text></g><g><title>core::cmp::min_by (11 samples, 0.02%)</title><rect x="3.0293%" y="197" width="0.0184%" height="15" fill="rgb(207,154,6)" fg:x="1808" fg:w="11"/><text x="3.2793%" y="207.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (131 samples, 0.22%)</title><rect x="2.8400%" y="341" width="0.2195%" height="15" fill="rgb(223,64,47)" fg:x="1695" fg:w="131"/><text x="3.0900%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (34 samples, 0.06%)</title><rect x="3.0025%" y="325" width="0.0570%" height="15" fill="rgb(211,161,38)" fg:x="1792" fg:w="34"/><text x="3.2525%" y="335.50"></text></g><g><title>core::hash::Hasher::write_isize (33 samples, 0.06%)</title><rect x="3.0042%" y="309" width="0.0553%" height="15" fill="rgb(219,138,40)" fg:x="1793" fg:w="33"/><text x="3.2542%" y="319.50"></text></g><g><title>core::hash::Hasher::write_usize (33 samples, 0.06%)</title><rect x="3.0042%" y="293" width="0.0553%" height="15" fill="rgb(241,228,46)" fg:x="1793" fg:w="33"/><text x="3.2542%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (32 samples, 0.05%)</title><rect x="3.0059%" y="277" width="0.0536%" height="15" fill="rgb(223,209,38)" fg:x="1794" fg:w="32"/><text x="3.2559%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (32 samples, 0.05%)</title><rect x="3.0059%" y="261" width="0.0536%" height="15" fill="rgb(236,164,45)" fg:x="1794" fg:w="32"/><text x="3.2559%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (32 samples, 0.05%)</title><rect x="3.0059%" y="245" width="0.0536%" height="15" fill="rgb(231,15,5)" fg:x="1794" fg:w="32"/><text x="3.2559%" y="255.50"></text></g><g><title>core::hash::sip::u8to64_le (7 samples, 0.01%)</title><rect x="3.0478%" y="229" width="0.0117%" height="15" fill="rgb(252,35,15)" fg:x="1819" fg:w="7"/><text x="3.2978%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (7 samples, 0.01%)</title><rect x="3.0595%" y="341" width="0.0117%" height="15" fill="rgb(248,181,18)" fg:x="1826" fg:w="7"/><text x="3.3095%" y="351.50"></text></g><g><title>core::hash::Hasher::write_u32 (6 samples, 0.01%)</title><rect x="3.0612%" y="325" width="0.0101%" height="15" fill="rgb(233,39,42)" fg:x="1827" fg:w="6"/><text x="3.3112%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="3.0612%" y="309" width="0.0101%" height="15" fill="rgb(238,110,33)" fg:x="1827" fg:w="6"/><text x="3.3112%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="3.0612%" y="293" width="0.0101%" height="15" fill="rgb(233,195,10)" fg:x="1827" fg:w="6"/><text x="3.3112%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="3.0612%" y="277" width="0.0101%" height="15" fill="rgb(254,105,3)" fg:x="1827" fg:w="6"/><text x="3.3112%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (6 samples, 0.01%)</title><rect x="3.0863%" y="261" width="0.0101%" height="15" fill="rgb(221,225,9)" fg:x="1842" fg:w="6"/><text x="3.3363%" y="271.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (202 samples, 0.34%)</title><rect x="2.7596%" y="373" width="0.3385%" height="15" fill="rgb(224,227,45)" fg:x="1647" fg:w="202"/><text x="3.0096%" y="383.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (202 samples, 0.34%)</title><rect x="2.7596%" y="357" width="0.3385%" height="15" fill="rgb(229,198,43)" fg:x="1647" fg:w="202"/><text x="3.0096%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (16 samples, 0.03%)</title><rect x="3.0712%" y="341" width="0.0268%" height="15" fill="rgb(206,209,35)" fg:x="1833" fg:w="16"/><text x="3.3212%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (16 samples, 0.03%)</title><rect x="3.0712%" y="325" width="0.0268%" height="15" fill="rgb(245,195,53)" fg:x="1833" fg:w="16"/><text x="3.3212%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (16 samples, 0.03%)</title><rect x="3.0712%" y="309" width="0.0268%" height="15" fill="rgb(240,92,26)" fg:x="1833" fg:w="16"/><text x="3.3212%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (16 samples, 0.03%)</title><rect x="3.0712%" y="293" width="0.0268%" height="15" fill="rgb(207,40,23)" fg:x="1833" fg:w="16"/><text x="3.3212%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16 samples, 0.03%)</title><rect x="3.0712%" y="277" width="0.0268%" height="15" fill="rgb(223,111,35)" fg:x="1833" fg:w="16"/><text x="3.3212%" y="287.50"></text></g><g><title>core::cmp::min (7 samples, 0.01%)</title><rect x="3.1215%" y="277" width="0.0117%" height="15" fill="rgb(229,147,28)" fg:x="1863" fg:w="7"/><text x="3.3715%" y="287.50"></text></g><g><title>core::cmp::Ord::min (7 samples, 0.01%)</title><rect x="3.1215%" y="261" width="0.0117%" height="15" fill="rgb(211,29,28)" fg:x="1863" fg:w="7"/><text x="3.3715%" y="271.50"></text></g><g><title>core::cmp::min_by (7 samples, 0.01%)</title><rect x="3.1215%" y="245" width="0.0117%" height="15" fill="rgb(228,72,33)" fg:x="1863" fg:w="7"/><text x="3.3715%" y="255.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (230 samples, 0.39%)</title><rect x="2.7562%" y="389" width="0.3854%" height="15" fill="rgb(205,214,31)" fg:x="1645" fg:w="230"/><text x="3.0062%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (26 samples, 0.04%)</title><rect x="3.0980%" y="373" width="0.0436%" height="15" fill="rgb(224,111,15)" fg:x="1849" fg:w="26"/><text x="3.3480%" y="383.50"></text></g><g><title>core::hash::Hasher::write_isize (26 samples, 0.04%)</title><rect x="3.0980%" y="357" width="0.0436%" height="15" fill="rgb(253,21,26)" fg:x="1849" fg:w="26"/><text x="3.3480%" y="367.50"></text></g><g><title>core::hash::Hasher::write_usize (26 samples, 0.04%)</title><rect x="3.0980%" y="341" width="0.0436%" height="15" fill="rgb(245,139,43)" fg:x="1849" fg:w="26"/><text x="3.3480%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (23 samples, 0.04%)</title><rect x="3.1031%" y="325" width="0.0385%" height="15" fill="rgb(252,170,7)" fg:x="1852" fg:w="23"/><text x="3.3531%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (22 samples, 0.04%)</title><rect x="3.1047%" y="309" width="0.0369%" height="15" fill="rgb(231,118,14)" fg:x="1853" fg:w="22"/><text x="3.3547%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (22 samples, 0.04%)</title><rect x="3.1047%" y="293" width="0.0369%" height="15" fill="rgb(238,83,0)" fg:x="1853" fg:w="22"/><text x="3.3547%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.01%)</title><rect x="3.1600%" y="309" width="0.0134%" height="15" fill="rgb(221,39,39)" fg:x="1886" fg:w="8"/><text x="3.4100%" y="319.50"></text></g><g><title>core::cmp::min (6 samples, 0.01%)</title><rect x="3.1734%" y="309" width="0.0101%" height="15" fill="rgb(222,119,46)" fg:x="1894" fg:w="6"/><text x="3.4234%" y="319.50"></text></g><g><title>core::cmp::Ord::min (6 samples, 0.01%)</title><rect x="3.1734%" y="293" width="0.0101%" height="15" fill="rgb(222,165,49)" fg:x="1894" fg:w="6"/><text x="3.4234%" y="303.50"></text></g><g><title>core::cmp::min_by (6 samples, 0.01%)</title><rect x="3.1734%" y="277" width="0.0101%" height="15" fill="rgb(219,113,52)" fg:x="1894" fg:w="6"/><text x="3.4234%" y="287.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (325 samples, 0.54%)</title><rect x="2.6507%" y="421" width="0.5445%" height="15" fill="rgb(214,7,15)" fg:x="1582" fg:w="325"/><text x="2.9007%" y="431.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (325 samples, 0.54%)</title><rect x="2.6507%" y="405" width="0.5445%" height="15" fill="rgb(235,32,4)" fg:x="1582" fg:w="325"/><text x="2.9007%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (27 samples, 0.05%)</title><rect x="3.1500%" y="389" width="0.0452%" height="15" fill="rgb(238,90,54)" fg:x="1880" fg:w="27"/><text x="3.4000%" y="399.50"></text></g><g><title>core::hash::Hasher::write_usize (27 samples, 0.05%)</title><rect x="3.1500%" y="373" width="0.0452%" height="15" fill="rgb(213,208,19)" fg:x="1880" fg:w="27"/><text x="3.4000%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (26 samples, 0.04%)</title><rect x="3.1517%" y="357" width="0.0436%" height="15" fill="rgb(233,156,4)" fg:x="1881" fg:w="26"/><text x="3.4017%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (25 samples, 0.04%)</title><rect x="3.1533%" y="341" width="0.0419%" height="15" fill="rgb(207,194,5)" fg:x="1882" fg:w="25"/><text x="3.4033%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (25 samples, 0.04%)</title><rect x="3.1533%" y="325" width="0.0419%" height="15" fill="rgb(206,111,30)" fg:x="1882" fg:w="25"/><text x="3.4033%" y="335.50"></text></g><g><title>core::hash::sip::u8to64_le (7 samples, 0.01%)</title><rect x="3.1835%" y="309" width="0.0117%" height="15" fill="rgb(243,70,54)" fg:x="1900" fg:w="7"/><text x="3.4335%" y="319.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (332 samples, 0.56%)</title><rect x="2.6490%" y="437" width="0.5563%" height="15" fill="rgb(242,28,8)" fg:x="1581" fg:w="332"/><text x="2.8990%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (6 samples, 0.01%)</title><rect x="3.1952%" y="421" width="0.0101%" height="15" fill="rgb(219,106,18)" fg:x="1907" fg:w="6"/><text x="3.4452%" y="431.50"></text></g><g><title>core::hash::Hasher::write_isize (6 samples, 0.01%)</title><rect x="3.1952%" y="405" width="0.0101%" height="15" fill="rgb(244,222,10)" fg:x="1907" fg:w="6"/><text x="3.4452%" y="415.50"></text></g><g><title>core::hash::Hasher::write_usize (6 samples, 0.01%)</title><rect x="3.1952%" y="389" width="0.0101%" height="15" fill="rgb(236,179,52)" fg:x="1907" fg:w="6"/><text x="3.4452%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="3.1952%" y="373" width="0.0101%" height="15" fill="rgb(213,23,39)" fg:x="1907" fg:w="6"/><text x="3.4452%" y="383.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="3.1952%" y="357" width="0.0101%" height="15" fill="rgb(238,48,10)" fg:x="1907" fg:w="6"/><text x="3.4452%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="3.1952%" y="341" width="0.0101%" height="15" fill="rgb(251,196,23)" fg:x="1907" fg:w="6"/><text x="3.4452%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (6 samples, 0.01%)</title><rect x="3.2053%" y="437" width="0.0101%" height="15" fill="rgb(250,152,24)" fg:x="1913" fg:w="6"/><text x="3.4553%" y="447.50"></text></g><g><title>core::hash::Hasher::write_u32 (6 samples, 0.01%)</title><rect x="3.2053%" y="421" width="0.0101%" height="15" fill="rgb(209,150,17)" fg:x="1913" fg:w="6"/><text x="3.4553%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="3.2053%" y="405" width="0.0101%" height="15" fill="rgb(234,202,34)" fg:x="1913" fg:w="6"/><text x="3.4553%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="3.2053%" y="389" width="0.0101%" height="15" fill="rgb(253,148,53)" fg:x="1913" fg:w="6"/><text x="3.4553%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="3.2053%" y="373" width="0.0101%" height="15" fill="rgb(218,129,16)" fg:x="1913" fg:w="6"/><text x="3.4553%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.01%)</title><rect x="3.2170%" y="357" width="0.0117%" height="15" fill="rgb(216,85,19)" fg:x="1920" fg:w="7"/><text x="3.4670%" y="367.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (414 samples, 0.69%)</title><rect x="2.5468%" y="469" width="0.6937%" height="15" fill="rgb(235,228,7)" fg:x="1520" fg:w="414"/><text x="2.7968%" y="479.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (414 samples, 0.69%)</title><rect x="2.5468%" y="453" width="0.6937%" height="15" fill="rgb(245,175,0)" fg:x="1520" fg:w="414"/><text x="2.7968%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (15 samples, 0.03%)</title><rect x="3.2153%" y="437" width="0.0251%" height="15" fill="rgb(208,168,36)" fg:x="1919" fg:w="15"/><text x="3.4653%" y="447.50"></text></g><g><title>core::hash::Hasher::write_usize (15 samples, 0.03%)</title><rect x="3.2153%" y="421" width="0.0251%" height="15" fill="rgb(246,171,24)" fg:x="1919" fg:w="15"/><text x="3.4653%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (15 samples, 0.03%)</title><rect x="3.2153%" y="405" width="0.0251%" height="15" fill="rgb(215,142,24)" fg:x="1919" fg:w="15"/><text x="3.4653%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (15 samples, 0.03%)</title><rect x="3.2153%" y="389" width="0.0251%" height="15" fill="rgb(250,187,7)" fg:x="1919" fg:w="15"/><text x="3.4653%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (15 samples, 0.03%)</title><rect x="3.2153%" y="373" width="0.0251%" height="15" fill="rgb(228,66,33)" fg:x="1919" fg:w="15"/><text x="3.4653%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.01%)</title><rect x="3.2455%" y="373" width="0.0117%" height="15" fill="rgb(234,215,21)" fg:x="1937" fg:w="7"/><text x="3.4955%" y="383.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (433 samples, 0.73%)</title><rect x="2.5418%" y="485" width="0.7255%" height="15" fill="rgb(222,191,20)" fg:x="1517" fg:w="433"/><text x="2.7918%" y="495.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (16 samples, 0.03%)</title><rect x="3.2405%" y="469" width="0.0268%" height="15" fill="rgb(245,79,54)" fg:x="1934" fg:w="16"/><text x="3.4905%" y="479.50"></text></g><g><title>core::hash::Hasher::write_isize (16 samples, 0.03%)</title><rect x="3.2405%" y="453" width="0.0268%" height="15" fill="rgb(240,10,37)" fg:x="1934" fg:w="16"/><text x="3.4905%" y="463.50"></text></g><g><title>core::hash::Hasher::write_usize (16 samples, 0.03%)</title><rect x="3.2405%" y="437" width="0.0268%" height="15" fill="rgb(214,192,32)" fg:x="1934" fg:w="16"/><text x="3.4905%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (15 samples, 0.03%)</title><rect x="3.2421%" y="421" width="0.0251%" height="15" fill="rgb(209,36,54)" fg:x="1935" fg:w="15"/><text x="3.4921%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (15 samples, 0.03%)</title><rect x="3.2421%" y="405" width="0.0251%" height="15" fill="rgb(220,10,11)" fg:x="1935" fg:w="15"/><text x="3.4921%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="3.2438%" y="389" width="0.0235%" height="15" fill="rgb(221,106,17)" fg:x="1936" fg:w="14"/><text x="3.4938%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (10 samples, 0.02%)</title><rect x="3.2673%" y="485" width="0.0168%" height="15" fill="rgb(251,142,44)" fg:x="1950" fg:w="10"/><text x="3.5173%" y="495.50"></text></g><g><title>core::hash::Hasher::write_u32 (9 samples, 0.02%)</title><rect x="3.2689%" y="469" width="0.0151%" height="15" fill="rgb(238,13,15)" fg:x="1951" fg:w="9"/><text x="3.5189%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="3.2706%" y="453" width="0.0134%" height="15" fill="rgb(208,107,27)" fg:x="1952" fg:w="8"/><text x="3.5206%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="3.2706%" y="437" width="0.0134%" height="15" fill="rgb(205,136,37)" fg:x="1952" fg:w="8"/><text x="3.5206%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="3.2706%" y="421" width="0.0134%" height="15" fill="rgb(250,205,27)" fg:x="1952" fg:w="8"/><text x="3.5206%" y="431.50"></text></g><g><title>hashbrown::map::make_hash (506 samples, 0.85%)</title><rect x="2.4530%" y="581" width="0.8478%" height="15" fill="rgb(210,80,43)" fg:x="1464" fg:w="506"/><text x="2.7030%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (506 samples, 0.85%)</title><rect x="2.4530%" y="565" width="0.8478%" height="15" fill="rgb(247,160,36)" fg:x="1464" fg:w="506"/><text x="2.7030%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (499 samples, 0.84%)</title><rect x="2.4647%" y="549" width="0.8361%" height="15" fill="rgb(234,13,49)" fg:x="1471" fg:w="499"/><text x="2.7147%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (498 samples, 0.83%)</title><rect x="2.4664%" y="533" width="0.8344%" height="15" fill="rgb(234,122,0)" fg:x="1472" fg:w="498"/><text x="2.7164%" y="543.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (498 samples, 0.83%)</title><rect x="2.4664%" y="517" width="0.8344%" height="15" fill="rgb(207,146,38)" fg:x="1472" fg:w="498"/><text x="2.7164%" y="527.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (497 samples, 0.83%)</title><rect x="2.4680%" y="501" width="0.8327%" height="15" fill="rgb(207,177,25)" fg:x="1473" fg:w="497"/><text x="2.7180%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (10 samples, 0.02%)</title><rect x="3.2840%" y="485" width="0.0168%" height="15" fill="rgb(211,178,42)" fg:x="1960" fg:w="10"/><text x="3.5340%" y="495.50"></text></g><g><title>core::hash::Hasher::write_usize (10 samples, 0.02%)</title><rect x="3.2840%" y="469" width="0.0168%" height="15" fill="rgb(230,69,54)" fg:x="1960" fg:w="10"/><text x="3.5340%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="3.2840%" y="453" width="0.0168%" height="15" fill="rgb(214,135,41)" fg:x="1960" fg:w="10"/><text x="3.5340%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="3.2840%" y="437" width="0.0168%" height="15" fill="rgb(237,67,25)" fg:x="1960" fg:w="10"/><text x="3.5340%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="3.2840%" y="421" width="0.0168%" height="15" fill="rgb(222,189,50)" fg:x="1960" fg:w="10"/><text x="3.5340%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (20 samples, 0.03%)</title><rect x="3.3226%" y="341" width="0.0335%" height="15" fill="rgb(245,148,34)" fg:x="1983" fg:w="20"/><text x="3.5726%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (20 samples, 0.03%)</title><rect x="3.3226%" y="325" width="0.0335%" height="15" fill="rgb(222,29,6)" fg:x="1983" fg:w="20"/><text x="3.5726%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (23 samples, 0.04%)</title><rect x="3.3226%" y="357" width="0.0385%" height="15" fill="rgb(221,189,43)" fg:x="1983" fg:w="23"/><text x="3.5726%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (7 samples, 0.01%)</title><rect x="3.3644%" y="309" width="0.0117%" height="15" fill="rgb(207,36,27)" fg:x="2008" fg:w="7"/><text x="3.6144%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.01%)</title><rect x="3.3644%" y="293" width="0.0117%" height="15" fill="rgb(217,90,24)" fg:x="2008" fg:w="7"/><text x="3.6144%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (11 samples, 0.02%)</title><rect x="3.3829%" y="229" width="0.0184%" height="15" fill="rgb(224,66,35)" fg:x="2019" fg:w="11"/><text x="3.6329%" y="239.50"></text></g><g><title>core::cmp::min (10 samples, 0.02%)</title><rect x="3.4013%" y="229" width="0.0168%" height="15" fill="rgb(221,13,50)" fg:x="2030" fg:w="10"/><text x="3.6513%" y="239.50"></text></g><g><title>core::cmp::Ord::min (10 samples, 0.02%)</title><rect x="3.4013%" y="213" width="0.0168%" height="15" fill="rgb(236,68,49)" fg:x="2030" fg:w="10"/><text x="3.6513%" y="223.50"></text></g><g><title>core::cmp::min_by (9 samples, 0.02%)</title><rect x="3.4030%" y="197" width="0.0151%" height="15" fill="rgb(229,146,28)" fg:x="2031" fg:w="9"/><text x="3.6530%" y="207.50"></text></g><g><title>core::hash::sip::u8to64_le (17 samples, 0.03%)</title><rect x="3.4181%" y="229" width="0.0285%" height="15" fill="rgb(225,31,38)" fg:x="2040" fg:w="17"/><text x="3.6681%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.02%)</title><rect x="3.4298%" y="213" width="0.0168%" height="15" fill="rgb(250,208,3)" fg:x="2047" fg:w="10"/><text x="3.6798%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (52 samples, 0.09%)</title><rect x="3.3762%" y="245" width="0.0871%" height="15" fill="rgb(246,54,23)" fg:x="2015" fg:w="52"/><text x="3.6262%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.02%)</title><rect x="3.4465%" y="229" width="0.0168%" height="15" fill="rgb(243,76,11)" fg:x="2057" fg:w="10"/><text x="3.6965%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (70 samples, 0.12%)</title><rect x="3.3644%" y="325" width="0.1173%" height="15" fill="rgb(245,21,50)" fg:x="2008" fg:w="70"/><text x="3.6144%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (63 samples, 0.11%)</title><rect x="3.3762%" y="309" width="0.1056%" height="15" fill="rgb(228,9,43)" fg:x="2015" fg:w="63"/><text x="3.6262%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (63 samples, 0.11%)</title><rect x="3.3762%" y="293" width="0.1056%" height="15" fill="rgb(208,100,47)" fg:x="2015" fg:w="63"/><text x="3.6262%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (63 samples, 0.11%)</title><rect x="3.3762%" y="277" width="0.1056%" height="15" fill="rgb(232,26,8)" fg:x="2015" fg:w="63"/><text x="3.6262%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (63 samples, 0.11%)</title><rect x="3.3762%" y="261" width="0.1056%" height="15" fill="rgb(216,166,38)" fg:x="2015" fg:w="63"/><text x="3.6262%" y="271.50"></text></g><g><title>core::hash::Hasher::write_u8 (11 samples, 0.02%)</title><rect x="3.4633%" y="245" width="0.0184%" height="15" fill="rgb(251,202,51)" fg:x="2067" fg:w="11"/><text x="3.7133%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11 samples, 0.02%)</title><rect x="3.4633%" y="229" width="0.0184%" height="15" fill="rgb(254,216,34)" fg:x="2067" fg:w="11"/><text x="3.7133%" y="239.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.02%)</title><rect x="3.4817%" y="325" width="0.0168%" height="15" fill="rgb(251,32,27)" fg:x="2078" fg:w="10"/><text x="3.7317%" y="335.50"></text></g><g><title>core::hash::Hash::hash_slice (84 samples, 0.14%)</title><rect x="3.3611%" y="341" width="0.1407%" height="15" fill="rgb(208,127,28)" fg:x="2006" fg:w="84"/><text x="3.6111%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (113 samples, 0.19%)</title><rect x="3.3226%" y="373" width="0.1893%" height="15" fill="rgb(224,137,22)" fg:x="1983" fg:w="113"/><text x="3.5726%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (90 samples, 0.15%)</title><rect x="3.3611%" y="357" width="0.1508%" height="15" fill="rgb(254,70,32)" fg:x="2006" fg:w="90"/><text x="3.6111%" y="367.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (6 samples, 0.01%)</title><rect x="3.5018%" y="341" width="0.0101%" height="15" fill="rgb(229,75,37)" fg:x="2090" fg:w="6"/><text x="3.7518%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (6 samples, 0.01%)</title><rect x="3.5018%" y="325" width="0.0101%" height="15" fill="rgb(252,64,23)" fg:x="2090" fg:w="6"/><text x="3.7518%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="3.5018%" y="309" width="0.0101%" height="15" fill="rgb(232,162,48)" fg:x="2090" fg:w="6"/><text x="3.7518%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="3.5018%" y="293" width="0.0101%" height="15" fill="rgb(246,160,12)" fg:x="2090" fg:w="6"/><text x="3.7518%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="3.5018%" y="277" width="0.0101%" height="15" fill="rgb(247,166,0)" fg:x="2090" fg:w="6"/><text x="3.7518%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (11 samples, 0.02%)</title><rect x="3.5219%" y="261" width="0.0184%" height="15" fill="rgb(249,219,21)" fg:x="2102" fg:w="11"/><text x="3.7719%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.02%)</title><rect x="3.5219%" y="245" width="0.0184%" height="15" fill="rgb(205,209,3)" fg:x="2102" fg:w="11"/><text x="3.7719%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (20 samples, 0.03%)</title><rect x="3.5521%" y="181" width="0.0335%" height="15" fill="rgb(243,44,1)" fg:x="2120" fg:w="20"/><text x="3.8021%" y="191.50"></text></g><g><title>core::cmp::min (6 samples, 0.01%)</title><rect x="3.5856%" y="181" width="0.0101%" height="15" fill="rgb(206,159,16)" fg:x="2140" fg:w="6"/><text x="3.8356%" y="191.50"></text></g><g><title>core::cmp::Ord::min (6 samples, 0.01%)</title><rect x="3.5856%" y="165" width="0.0101%" height="15" fill="rgb(244,77,30)" fg:x="2140" fg:w="6"/><text x="3.8356%" y="175.50"></text></g><g><title>core::cmp::min_by (6 samples, 0.01%)</title><rect x="3.5856%" y="149" width="0.0101%" height="15" fill="rgb(218,69,12)" fg:x="2140" fg:w="6"/><text x="3.8356%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (24 samples, 0.04%)</title><rect x="3.5957%" y="181" width="0.0402%" height="15" fill="rgb(212,87,7)" fg:x="2146" fg:w="24"/><text x="3.8457%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (58 samples, 0.10%)</title><rect x="3.5404%" y="197" width="0.0972%" height="15" fill="rgb(245,114,25)" fg:x="2113" fg:w="58"/><text x="3.7904%" y="207.50"></text></g><g><title>core::cmp::min (10 samples, 0.02%)</title><rect x="3.6426%" y="165" width="0.0168%" height="15" fill="rgb(210,61,42)" fg:x="2174" fg:w="10"/><text x="3.8926%" y="175.50"></text></g><g><title>core::cmp::Ord::min (10 samples, 0.02%)</title><rect x="3.6426%" y="149" width="0.0168%" height="15" fill="rgb(211,52,33)" fg:x="2174" fg:w="10"/><text x="3.8926%" y="159.50"></text></g><g><title>core::cmp::min_by (10 samples, 0.02%)</title><rect x="3.6426%" y="133" width="0.0168%" height="15" fill="rgb(234,58,33)" fg:x="2174" fg:w="10"/><text x="3.8926%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (84 samples, 0.14%)</title><rect x="3.5219%" y="277" width="0.1407%" height="15" fill="rgb(220,115,36)" fg:x="2102" fg:w="84"/><text x="3.7719%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (73 samples, 0.12%)</title><rect x="3.5404%" y="261" width="0.1223%" height="15" fill="rgb(243,153,54)" fg:x="2113" fg:w="73"/><text x="3.7904%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (73 samples, 0.12%)</title><rect x="3.5404%" y="245" width="0.1223%" height="15" fill="rgb(251,47,18)" fg:x="2113" fg:w="73"/><text x="3.7904%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (73 samples, 0.12%)</title><rect x="3.5404%" y="229" width="0.1223%" height="15" fill="rgb(242,102,42)" fg:x="2113" fg:w="73"/><text x="3.7904%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (73 samples, 0.12%)</title><rect x="3.5404%" y="213" width="0.1223%" height="15" fill="rgb(234,31,38)" fg:x="2113" fg:w="73"/><text x="3.7904%" y="223.50"></text></g><g><title>core::hash::Hasher::write_u8 (15 samples, 0.03%)</title><rect x="3.6376%" y="197" width="0.0251%" height="15" fill="rgb(221,117,51)" fg:x="2171" fg:w="15"/><text x="3.8876%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (15 samples, 0.03%)</title><rect x="3.6376%" y="181" width="0.0251%" height="15" fill="rgb(212,20,18)" fg:x="2171" fg:w="15"/><text x="3.8876%" y="191.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="3.6627%" y="277" width="0.0117%" height="15" fill="rgb(245,133,36)" fg:x="2186" fg:w="7"/><text x="3.9127%" y="287.50"></text></g><g><title>core::hash::Hash::hash_slice (95 samples, 0.16%)</title><rect x="3.5203%" y="293" width="0.1592%" height="15" fill="rgb(212,6,19)" fg:x="2101" fg:w="95"/><text x="3.7703%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.01%)</title><rect x="3.6878%" y="213" width="0.0101%" height="15" fill="rgb(218,1,36)" fg:x="2201" fg:w="6"/><text x="3.9378%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (112 samples, 0.19%)</title><rect x="3.5186%" y="325" width="0.1877%" height="15" fill="rgb(246,84,54)" fg:x="2100" fg:w="112"/><text x="3.7686%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (111 samples, 0.19%)</title><rect x="3.5203%" y="309" width="0.1860%" height="15" fill="rgb(242,110,6)" fg:x="2101" fg:w="111"/><text x="3.7703%" y="319.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (16 samples, 0.03%)</title><rect x="3.6794%" y="293" width="0.0268%" height="15" fill="rgb(214,47,5)" fg:x="2196" fg:w="16"/><text x="3.9294%" y="303.50"></text></g><g><title>core::hash::Hasher::write_usize (16 samples, 0.03%)</title><rect x="3.6794%" y="277" width="0.0268%" height="15" fill="rgb(218,159,25)" fg:x="2196" fg:w="16"/><text x="3.9294%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (16 samples, 0.03%)</title><rect x="3.6794%" y="261" width="0.0268%" height="15" fill="rgb(215,211,28)" fg:x="2196" fg:w="16"/><text x="3.9294%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (16 samples, 0.03%)</title><rect x="3.6794%" y="245" width="0.0268%" height="15" fill="rgb(238,59,32)" fg:x="2196" fg:w="16"/><text x="3.9294%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16 samples, 0.03%)</title><rect x="3.6794%" y="229" width="0.0268%" height="15" fill="rgb(226,82,3)" fg:x="2196" fg:w="16"/><text x="3.9294%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.01%)</title><rect x="3.7364%" y="133" width="0.0134%" height="15" fill="rgb(240,164,32)" fg:x="2230" fg:w="8"/><text x="3.9864%" y="143.50"></text></g><g><title>core::cmp::min (8 samples, 0.01%)</title><rect x="3.7498%" y="133" width="0.0134%" height="15" fill="rgb(232,46,7)" fg:x="2238" fg:w="8"/><text x="3.9998%" y="143.50"></text></g><g><title>core::cmp::Ord::min (8 samples, 0.01%)</title><rect x="3.7498%" y="117" width="0.0134%" height="15" fill="rgb(229,129,53)" fg:x="2238" fg:w="8"/><text x="3.9998%" y="127.50"></text></g><g><title>core::cmp::min_by (8 samples, 0.01%)</title><rect x="3.7498%" y="101" width="0.0134%" height="15" fill="rgb(234,188,29)" fg:x="2238" fg:w="8"/><text x="3.9998%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (32 samples, 0.05%)</title><rect x="3.7297%" y="149" width="0.0536%" height="15" fill="rgb(246,141,4)" fg:x="2226" fg:w="32"/><text x="3.9797%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (12 samples, 0.02%)</title><rect x="3.7632%" y="133" width="0.0201%" height="15" fill="rgb(229,23,39)" fg:x="2246" fg:w="12"/><text x="4.0132%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (46 samples, 0.08%)</title><rect x="3.7197%" y="229" width="0.0771%" height="15" fill="rgb(206,12,3)" fg:x="2220" fg:w="46"/><text x="3.9697%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (40 samples, 0.07%)</title><rect x="3.7297%" y="213" width="0.0670%" height="15" fill="rgb(252,226,20)" fg:x="2226" fg:w="40"/><text x="3.9797%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (40 samples, 0.07%)</title><rect x="3.7297%" y="197" width="0.0670%" height="15" fill="rgb(216,123,35)" fg:x="2226" fg:w="40"/><text x="3.9797%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (40 samples, 0.07%)</title><rect x="3.7297%" y="181" width="0.0670%" height="15" fill="rgb(212,68,40)" fg:x="2226" fg:w="40"/><text x="3.9797%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (40 samples, 0.07%)</title><rect x="3.7297%" y="165" width="0.0670%" height="15" fill="rgb(254,125,32)" fg:x="2226" fg:w="40"/><text x="3.9797%" y="175.50"></text></g><g><title>core::hash::Hasher::write_u8 (8 samples, 0.01%)</title><rect x="3.7833%" y="149" width="0.0134%" height="15" fill="rgb(253,97,22)" fg:x="2258" fg:w="8"/><text x="4.0333%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="3.7833%" y="133" width="0.0134%" height="15" fill="rgb(241,101,14)" fg:x="2258" fg:w="8"/><text x="4.0333%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.02%)</title><rect x="3.7967%" y="229" width="0.0151%" height="15" fill="rgb(238,103,29)" fg:x="2266" fg:w="9"/><text x="4.0467%" y="239.50"></text></g><g><title>core::hash::Hash::hash_slice (60 samples, 0.10%)</title><rect x="3.7163%" y="245" width="0.1005%" height="15" fill="rgb(233,195,47)" fg:x="2218" fg:w="60"/><text x="3.9663%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.01%)</title><rect x="3.8219%" y="165" width="0.0101%" height="15" fill="rgb(246,218,30)" fg:x="2281" fg:w="6"/><text x="4.0719%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (78 samples, 0.13%)</title><rect x="3.7146%" y="277" width="0.1307%" height="15" fill="rgb(219,145,47)" fg:x="2217" fg:w="78"/><text x="3.9646%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (77 samples, 0.13%)</title><rect x="3.7163%" y="261" width="0.1290%" height="15" fill="rgb(243,12,26)" fg:x="2218" fg:w="77"/><text x="3.9663%" y="271.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (17 samples, 0.03%)</title><rect x="3.8168%" y="245" width="0.0285%" height="15" fill="rgb(214,87,16)" fg:x="2278" fg:w="17"/><text x="4.0668%" y="255.50"></text></g><g><title>core::hash::Hasher::write_usize (16 samples, 0.03%)</title><rect x="3.8185%" y="229" width="0.0268%" height="15" fill="rgb(208,99,42)" fg:x="2279" fg:w="16"/><text x="4.0685%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (16 samples, 0.03%)</title><rect x="3.8185%" y="213" width="0.0268%" height="15" fill="rgb(253,99,2)" fg:x="2279" fg:w="16"/><text x="4.0685%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (16 samples, 0.03%)</title><rect x="3.8185%" y="197" width="0.0268%" height="15" fill="rgb(220,168,23)" fg:x="2279" fg:w="16"/><text x="4.0685%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16 samples, 0.03%)</title><rect x="3.8185%" y="181" width="0.0268%" height="15" fill="rgb(242,38,24)" fg:x="2279" fg:w="16"/><text x="4.0685%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.01%)</title><rect x="3.8671%" y="85" width="0.0117%" height="15" fill="rgb(225,182,9)" fg:x="2308" fg:w="7"/><text x="4.1171%" y="95.50"></text></g><g><title>core::cmp::min (8 samples, 0.01%)</title><rect x="3.8788%" y="85" width="0.0134%" height="15" fill="rgb(243,178,37)" fg:x="2315" fg:w="8"/><text x="4.1288%" y="95.50"></text></g><g><title>core::cmp::Ord::min (8 samples, 0.01%)</title><rect x="3.8788%" y="69" width="0.0134%" height="15" fill="rgb(232,139,19)" fg:x="2315" fg:w="8"/><text x="4.1288%" y="79.50"></text></g><g><title>core::cmp::min_by (8 samples, 0.01%)</title><rect x="3.8788%" y="53" width="0.0134%" height="15" fill="rgb(225,201,24)" fg:x="2315" fg:w="8"/><text x="4.1288%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (22 samples, 0.04%)</title><rect x="3.8604%" y="101" width="0.0369%" height="15" fill="rgb(221,47,46)" fg:x="2304" fg:w="22"/><text x="4.1104%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (31 samples, 0.05%)</title><rect x="3.8570%" y="181" width="0.0519%" height="15" fill="rgb(249,23,13)" fg:x="2302" fg:w="31"/><text x="4.1070%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (29 samples, 0.05%)</title><rect x="3.8604%" y="165" width="0.0486%" height="15" fill="rgb(219,9,5)" fg:x="2304" fg:w="29"/><text x="4.1104%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (29 samples, 0.05%)</title><rect x="3.8604%" y="149" width="0.0486%" height="15" fill="rgb(254,171,16)" fg:x="2304" fg:w="29"/><text x="4.1104%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (29 samples, 0.05%)</title><rect x="3.8604%" y="133" width="0.0486%" height="15" fill="rgb(230,171,20)" fg:x="2304" fg:w="29"/><text x="4.1104%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (29 samples, 0.05%)</title><rect x="3.8604%" y="117" width="0.0486%" height="15" fill="rgb(210,71,41)" fg:x="2304" fg:w="29"/><text x="4.1104%" y="127.50"></text></g><g><title>core::hash::Hasher::write_u8 (7 samples, 0.01%)</title><rect x="3.8973%" y="101" width="0.0117%" height="15" fill="rgb(206,173,20)" fg:x="2326" fg:w="7"/><text x="4.1473%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="3.8973%" y="85" width="0.0117%" height="15" fill="rgb(233,88,34)" fg:x="2326" fg:w="7"/><text x="4.1473%" y="95.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.02%)</title><rect x="3.9090%" y="181" width="0.0184%" height="15" fill="rgb(223,209,46)" fg:x="2333" fg:w="11"/><text x="4.1590%" y="191.50"></text></g><g><title>core::hash::Hash::hash_slice (47 samples, 0.08%)</title><rect x="3.8554%" y="197" width="0.0787%" height="15" fill="rgb(250,43,18)" fg:x="2301" fg:w="47"/><text x="4.1054%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (62 samples, 0.10%)</title><rect x="3.8520%" y="229" width="0.1039%" height="15" fill="rgb(208,13,10)" fg:x="2299" fg:w="62"/><text x="4.1020%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (60 samples, 0.10%)</title><rect x="3.8554%" y="213" width="0.1005%" height="15" fill="rgb(212,200,36)" fg:x="2301" fg:w="60"/><text x="4.1054%" y="223.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (13 samples, 0.02%)</title><rect x="3.9341%" y="197" width="0.0218%" height="15" fill="rgb(225,90,30)" fg:x="2348" fg:w="13"/><text x="4.1841%" y="207.50"></text></g><g><title>core::hash::Hasher::write_usize (13 samples, 0.02%)</title><rect x="3.9341%" y="181" width="0.0218%" height="15" fill="rgb(236,182,39)" fg:x="2348" fg:w="13"/><text x="4.1841%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.02%)</title><rect x="3.9341%" y="165" width="0.0218%" height="15" fill="rgb(212,144,35)" fg:x="2348" fg:w="13"/><text x="4.1841%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (13 samples, 0.02%)</title><rect x="3.9341%" y="149" width="0.0218%" height="15" fill="rgb(228,63,44)" fg:x="2348" fg:w="13"/><text x="4.1841%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.02%)</title><rect x="3.9341%" y="133" width="0.0218%" height="15" fill="rgb(228,109,6)" fg:x="2348" fg:w="13"/><text x="4.1841%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.02%)</title><rect x="3.9777%" y="53" width="0.0151%" height="15" fill="rgb(238,117,24)" fg:x="2374" fg:w="9"/><text x="4.2277%" y="63.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (16 samples, 0.03%)</title><rect x="3.9710%" y="133" width="0.0268%" height="15" fill="rgb(242,26,26)" fg:x="2370" fg:w="16"/><text x="4.2210%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (12 samples, 0.02%)</title><rect x="3.9777%" y="117" width="0.0201%" height="15" fill="rgb(221,92,48)" fg:x="2374" fg:w="12"/><text x="4.2277%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (12 samples, 0.02%)</title><rect x="3.9777%" y="101" width="0.0201%" height="15" fill="rgb(209,209,32)" fg:x="2374" fg:w="12"/><text x="4.2277%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (12 samples, 0.02%)</title><rect x="3.9777%" y="85" width="0.0201%" height="15" fill="rgb(221,70,22)" fg:x="2374" fg:w="12"/><text x="4.2277%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (12 samples, 0.02%)</title><rect x="3.9777%" y="69" width="0.0201%" height="15" fill="rgb(248,145,5)" fg:x="2374" fg:w="12"/><text x="4.2277%" y="79.50"></text></g><g><title>core::hash::Hash::hash_slice (21 samples, 0.04%)</title><rect x="3.9693%" y="149" width="0.0352%" height="15" fill="rgb(226,116,26)" fg:x="2369" fg:w="21"/><text x="4.2193%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (33 samples, 0.06%)</title><rect x="3.9693%" y="181" width="0.0553%" height="15" fill="rgb(244,5,17)" fg:x="2369" fg:w="33"/><text x="4.2193%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (33 samples, 0.06%)</title><rect x="3.9693%" y="165" width="0.0553%" height="15" fill="rgb(252,159,33)" fg:x="2369" fg:w="33"/><text x="4.2193%" y="175.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (12 samples, 0.02%)</title><rect x="4.0045%" y="149" width="0.0201%" height="15" fill="rgb(206,71,0)" fg:x="2390" fg:w="12"/><text x="4.2545%" y="159.50"></text></g><g><title>core::hash::Hasher::write_usize (11 samples, 0.02%)</title><rect x="4.0062%" y="133" width="0.0184%" height="15" fill="rgb(233,118,54)" fg:x="2391" fg:w="11"/><text x="4.2562%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="4.0078%" y="117" width="0.0168%" height="15" fill="rgb(234,83,48)" fg:x="2392" fg:w="10"/><text x="4.2578%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="4.0078%" y="101" width="0.0168%" height="15" fill="rgb(228,3,54)" fg:x="2392" fg:w="10"/><text x="4.2578%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="4.0078%" y="85" width="0.0168%" height="15" fill="rgb(226,155,13)" fg:x="2392" fg:w="10"/><text x="4.2578%" y="95.50"></text></g><g><title>core::hash::Hash::hash_slice (7 samples, 0.01%)</title><rect x="4.0263%" y="101" width="0.0117%" height="15" fill="rgb(241,28,37)" fg:x="2403" fg:w="7"/><text x="4.2763%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (13 samples, 0.02%)</title><rect x="4.0263%" y="133" width="0.0218%" height="15" fill="rgb(233,93,10)" fg:x="2403" fg:w="13"/><text x="4.2763%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (13 samples, 0.02%)</title><rect x="4.0263%" y="117" width="0.0218%" height="15" fill="rgb(225,113,19)" fg:x="2403" fg:w="13"/><text x="4.2763%" y="127.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (6 samples, 0.01%)</title><rect x="4.0380%" y="101" width="0.0101%" height="15" fill="rgb(241,2,18)" fg:x="2410" fg:w="6"/><text x="4.2880%" y="111.50"></text></g><g><title>core::hash::Hasher::write_usize (6 samples, 0.01%)</title><rect x="4.0380%" y="85" width="0.0101%" height="15" fill="rgb(228,207,21)" fg:x="2410" fg:w="6"/><text x="4.2880%" y="95.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="4.0380%" y="69" width="0.0101%" height="15" fill="rgb(213,211,35)" fg:x="2410" fg:w="6"/><text x="4.2880%" y="79.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="4.0380%" y="53" width="0.0101%" height="15" fill="rgb(209,83,10)" fg:x="2410" fg:w="6"/><text x="4.2880%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="4.0380%" y="37" width="0.0101%" height="15" fill="rgb(209,164,1)" fg:x="2410" fg:w="6"/><text x="4.2880%" y="47.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (6 samples, 0.01%)</title><rect x="4.0481%" y="117" width="0.0101%" height="15" fill="rgb(213,184,43)" fg:x="2416" fg:w="6"/><text x="4.2981%" y="127.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (6 samples, 0.01%)</title><rect x="4.0481%" y="101" width="0.0101%" height="15" fill="rgb(231,61,34)" fg:x="2416" fg:w="6"/><text x="4.2981%" y="111.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (14 samples, 0.02%)</title><rect x="4.0481%" y="133" width="0.0235%" height="15" fill="rgb(235,75,3)" fg:x="2416" fg:w="14"/><text x="4.2981%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (8 samples, 0.01%)</title><rect x="4.0581%" y="117" width="0.0134%" height="15" fill="rgb(220,106,47)" fg:x="2422" fg:w="8"/><text x="4.3081%" y="127.50"></text></g><g><title>core::hash::Hasher::write_isize (8 samples, 0.01%)</title><rect x="4.0581%" y="101" width="0.0134%" height="15" fill="rgb(210,196,33)" fg:x="2422" fg:w="8"/><text x="4.3081%" y="111.50"></text></g><g><title>core::hash::Hasher::write_usize (8 samples, 0.01%)</title><rect x="4.0581%" y="85" width="0.0134%" height="15" fill="rgb(229,154,42)" fg:x="2422" fg:w="8"/><text x="4.3081%" y="95.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="4.0581%" y="69" width="0.0134%" height="15" fill="rgb(228,114,26)" fg:x="2422" fg:w="8"/><text x="4.3081%" y="79.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="4.0581%" y="53" width="0.0134%" height="15" fill="rgb(208,144,1)" fg:x="2422" fg:w="8"/><text x="4.3081%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="4.0581%" y="37" width="0.0134%" height="15" fill="rgb(239,112,37)" fg:x="2422" fg:w="8"/><text x="4.3081%" y="47.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (36 samples, 0.06%)</title><rect x="4.0246%" y="165" width="0.0603%" height="15" fill="rgb(210,96,50)" fg:x="2402" fg:w="36"/><text x="4.2746%" y="175.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (36 samples, 0.06%)</title><rect x="4.0246%" y="149" width="0.0603%" height="15" fill="rgb(222,178,2)" fg:x="2402" fg:w="36"/><text x="4.2746%" y="159.50"></text></g><g><title>core::hash::sip::u8to64_le (6 samples, 0.01%)</title><rect x="4.1017%" y="69" width="0.0101%" height="15" fill="rgb(226,74,18)" fg:x="2448" fg:w="6"/><text x="4.3517%" y="79.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (53 samples, 0.09%)</title><rect x="4.0246%" y="181" width="0.0888%" height="15" fill="rgb(225,67,54)" fg:x="2402" fg:w="53"/><text x="4.2746%" y="191.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (17 samples, 0.03%)</title><rect x="4.0849%" y="165" width="0.0285%" height="15" fill="rgb(251,92,32)" fg:x="2438" fg:w="17"/><text x="4.3349%" y="175.50"></text></g><g><title>core::hash::Hasher::write_isize (17 samples, 0.03%)</title><rect x="4.0849%" y="149" width="0.0285%" height="15" fill="rgb(228,149,22)" fg:x="2438" fg:w="17"/><text x="4.3349%" y="159.50"></text></g><g><title>core::hash::Hasher::write_usize (17 samples, 0.03%)</title><rect x="4.0849%" y="133" width="0.0285%" height="15" fill="rgb(243,54,13)" fg:x="2438" fg:w="17"/><text x="4.3349%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (17 samples, 0.03%)</title><rect x="4.0849%" y="117" width="0.0285%" height="15" fill="rgb(243,180,28)" fg:x="2438" fg:w="17"/><text x="4.3349%" y="127.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (17 samples, 0.03%)</title><rect x="4.0849%" y="101" width="0.0285%" height="15" fill="rgb(208,167,24)" fg:x="2438" fg:w="17"/><text x="4.3349%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (17 samples, 0.03%)</title><rect x="4.0849%" y="85" width="0.0285%" height="15" fill="rgb(245,73,45)" fg:x="2438" fg:w="17"/><text x="4.3349%" y="95.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (8 samples, 0.01%)</title><rect x="4.1134%" y="181" width="0.0134%" height="15" fill="rgb(237,203,48)" fg:x="2455" fg:w="8"/><text x="4.3634%" y="191.50"></text></g><g><title>core::hash::Hasher::write_u32 (7 samples, 0.01%)</title><rect x="4.1151%" y="165" width="0.0117%" height="15" fill="rgb(211,197,16)" fg:x="2456" fg:w="7"/><text x="4.3651%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="4.1168%" y="149" width="0.0101%" height="15" fill="rgb(243,99,51)" fg:x="2457" fg:w="6"/><text x="4.3668%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="4.1168%" y="133" width="0.0101%" height="15" fill="rgb(215,123,29)" fg:x="2457" fg:w="6"/><text x="4.3668%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.01%)</title><rect x="4.1168%" y="117" width="0.0101%" height="15" fill="rgb(239,186,37)" fg:x="2457" fg:w="6"/><text x="4.3668%" y="127.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (111 samples, 0.19%)</title><rect x="3.9693%" y="213" width="0.1860%" height="15" fill="rgb(252,136,39)" fg:x="2369" fg:w="111"/><text x="4.2193%" y="223.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (111 samples, 0.19%)</title><rect x="3.9693%" y="197" width="0.1860%" height="15" fill="rgb(223,213,32)" fg:x="2369" fg:w="111"/><text x="4.2193%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (17 samples, 0.03%)</title><rect x="4.1268%" y="181" width="0.0285%" height="15" fill="rgb(233,115,5)" fg:x="2463" fg:w="17"/><text x="4.3768%" y="191.50"></text></g><g><title>core::hash::Hasher::write_usize (15 samples, 0.03%)</title><rect x="4.1302%" y="165" width="0.0251%" height="15" fill="rgb(207,226,44)" fg:x="2465" fg:w="15"/><text x="4.3802%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (15 samples, 0.03%)</title><rect x="4.1302%" y="149" width="0.0251%" height="15" fill="rgb(208,126,0)" fg:x="2465" fg:w="15"/><text x="4.3802%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (15 samples, 0.03%)</title><rect x="4.1302%" y="133" width="0.0251%" height="15" fill="rgb(244,66,21)" fg:x="2465" fg:w="15"/><text x="4.3802%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (15 samples, 0.03%)</title><rect x="4.1302%" y="117" width="0.0251%" height="15" fill="rgb(222,97,12)" fg:x="2465" fg:w="15"/><text x="4.3802%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (6 samples, 0.01%)</title><rect x="4.1452%" y="101" width="0.0101%" height="15" fill="rgb(219,213,19)" fg:x="2474" fg:w="6"/><text x="4.3952%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9 samples, 0.02%)</title><rect x="4.1620%" y="117" width="0.0151%" height="15" fill="rgb(252,169,30)" fg:x="2484" fg:w="9"/><text x="4.4120%" y="127.50"></text></g><g><title>core::hash::sip::u8to64_le (6 samples, 0.01%)</title><rect x="4.1838%" y="117" width="0.0101%" height="15" fill="rgb(206,32,51)" fg:x="2497" fg:w="6"/><text x="4.4338%" y="127.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (144 samples, 0.24%)</title><rect x="3.9559%" y="229" width="0.2413%" height="15" fill="rgb(250,172,42)" fg:x="2361" fg:w="144"/><text x="4.2059%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (25 samples, 0.04%)</title><rect x="4.1553%" y="213" width="0.0419%" height="15" fill="rgb(209,34,43)" fg:x="2480" fg:w="25"/><text x="4.4053%" y="223.50"></text></g><g><title>core::hash::Hasher::write_isize (25 samples, 0.04%)</title><rect x="4.1553%" y="197" width="0.0419%" height="15" fill="rgb(223,11,35)" fg:x="2480" fg:w="25"/><text x="4.4053%" y="207.50"></text></g><g><title>core::hash::Hasher::write_usize (25 samples, 0.04%)</title><rect x="4.1553%" y="181" width="0.0419%" height="15" fill="rgb(251,219,26)" fg:x="2480" fg:w="25"/><text x="4.4053%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (25 samples, 0.04%)</title><rect x="4.1553%" y="165" width="0.0419%" height="15" fill="rgb(231,119,3)" fg:x="2480" fg:w="25"/><text x="4.4053%" y="175.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (25 samples, 0.04%)</title><rect x="4.1553%" y="149" width="0.0419%" height="15" fill="rgb(216,97,11)" fg:x="2480" fg:w="25"/><text x="4.4053%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (25 samples, 0.04%)</title><rect x="4.1553%" y="133" width="0.0419%" height="15" fill="rgb(223,59,9)" fg:x="2480" fg:w="25"/><text x="4.4053%" y="143.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (10 samples, 0.02%)</title><rect x="4.1972%" y="229" width="0.0168%" height="15" fill="rgb(233,93,31)" fg:x="2505" fg:w="10"/><text x="4.4472%" y="239.50"></text></g><g><title>core::hash::Hasher::write_u32 (10 samples, 0.02%)</title><rect x="4.1972%" y="213" width="0.0168%" height="15" fill="rgb(239,81,33)" fg:x="2505" fg:w="10"/><text x="4.4472%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="4.1972%" y="197" width="0.0168%" height="15" fill="rgb(213,120,34)" fg:x="2505" fg:w="10"/><text x="4.4472%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="4.1972%" y="181" width="0.0168%" height="15" fill="rgb(243,49,53)" fg:x="2505" fg:w="10"/><text x="4.4472%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (10 samples, 0.02%)</title><rect x="4.1972%" y="165" width="0.0168%" height="15" fill="rgb(247,216,33)" fg:x="2505" fg:w="10"/><text x="4.4472%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (12 samples, 0.02%)</title><rect x="4.2223%" y="149" width="0.0201%" height="15" fill="rgb(226,26,14)" fg:x="2520" fg:w="12"/><text x="4.4723%" y="159.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (251 samples, 0.42%)</title><rect x="3.8487%" y="261" width="0.4206%" height="15" fill="rgb(215,49,53)" fg:x="2297" fg:w="251"/><text x="4.0987%" y="271.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (251 samples, 0.42%)</title><rect x="3.8487%" y="245" width="0.4206%" height="15" fill="rgb(245,162,40)" fg:x="2297" fg:w="251"/><text x="4.0987%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (33 samples, 0.06%)</title><rect x="4.2139%" y="229" width="0.0553%" height="15" fill="rgb(229,68,17)" fg:x="2515" fg:w="33"/><text x="4.4639%" y="239.50"></text></g><g><title>core::hash::Hasher::write_usize (33 samples, 0.06%)</title><rect x="4.2139%" y="213" width="0.0553%" height="15" fill="rgb(213,182,10)" fg:x="2515" fg:w="33"/><text x="4.4639%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (33 samples, 0.06%)</title><rect x="4.2139%" y="197" width="0.0553%" height="15" fill="rgb(245,125,30)" fg:x="2515" fg:w="33"/><text x="4.4639%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (33 samples, 0.06%)</title><rect x="4.2139%" y="181" width="0.0553%" height="15" fill="rgb(232,202,2)" fg:x="2515" fg:w="33"/><text x="4.4639%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (33 samples, 0.06%)</title><rect x="4.2139%" y="165" width="0.0553%" height="15" fill="rgb(237,140,51)" fg:x="2515" fg:w="33"/><text x="4.4639%" y="175.50"></text></g><g><title>core::hash::sip::u8to64_le (11 samples, 0.02%)</title><rect x="4.2508%" y="149" width="0.0184%" height="15" fill="rgb(236,157,25)" fg:x="2537" fg:w="11"/><text x="4.5008%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.01%)</title><rect x="4.2877%" y="165" width="0.0117%" height="15" fill="rgb(219,209,0)" fg:x="2559" fg:w="7"/><text x="4.5377%" y="175.50"></text></g><g><title>core::cmp::min (11 samples, 0.02%)</title><rect x="4.2994%" y="165" width="0.0184%" height="15" fill="rgb(240,116,54)" fg:x="2566" fg:w="11"/><text x="4.5494%" y="175.50"></text></g><g><title>core::cmp::Ord::min (11 samples, 0.02%)</title><rect x="4.2994%" y="149" width="0.0184%" height="15" fill="rgb(216,10,36)" fg:x="2566" fg:w="11"/><text x="4.5494%" y="159.50"></text></g><g><title>core::cmp::min_by (11 samples, 0.02%)</title><rect x="4.2994%" y="133" width="0.0184%" height="15" fill="rgb(222,72,44)" fg:x="2566" fg:w="11"/><text x="4.5494%" y="143.50"></text></g><g><title>core::ops::function::FnOnce::call_once (7 samples, 0.01%)</title><rect x="4.3061%" y="117" width="0.0117%" height="15" fill="rgb(232,159,9)" fg:x="2570" fg:w="7"/><text x="4.5561%" y="127.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (6 samples, 0.01%)</title><rect x="4.3078%" y="101" width="0.0101%" height="15" fill="rgb(210,39,32)" fg:x="2571" fg:w="6"/><text x="4.5578%" y="111.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (286 samples, 0.48%)</title><rect x="3.8453%" y="277" width="0.4792%" height="15" fill="rgb(216,194,45)" fg:x="2295" fg:w="286"/><text x="4.0953%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (33 samples, 0.06%)</title><rect x="4.2692%" y="261" width="0.0553%" height="15" fill="rgb(218,18,35)" fg:x="2548" fg:w="33"/><text x="4.5192%" y="271.50"></text></g><g><title>core::hash::Hasher::write_isize (33 samples, 0.06%)</title><rect x="4.2692%" y="245" width="0.0553%" height="15" fill="rgb(207,83,51)" fg:x="2548" fg:w="33"/><text x="4.5192%" y="255.50"></text></g><g><title>core::hash::Hasher::write_usize (33 samples, 0.06%)</title><rect x="4.2692%" y="229" width="0.0553%" height="15" fill="rgb(225,63,43)" fg:x="2548" fg:w="33"/><text x="4.5192%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (33 samples, 0.06%)</title><rect x="4.2692%" y="213" width="0.0553%" height="15" fill="rgb(207,57,36)" fg:x="2548" fg:w="33"/><text x="4.5192%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (33 samples, 0.06%)</title><rect x="4.2692%" y="197" width="0.0553%" height="15" fill="rgb(216,99,33)" fg:x="2548" fg:w="33"/><text x="4.5192%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (33 samples, 0.06%)</title><rect x="4.2692%" y="181" width="0.0553%" height="15" fill="rgb(225,42,16)" fg:x="2548" fg:w="33"/><text x="4.5192%" y="191.50"></text></g><g><title>core::cmp::min (6 samples, 0.01%)</title><rect x="4.3329%" y="197" width="0.0101%" height="15" fill="rgb(220,201,45)" fg:x="2586" fg:w="6"/><text x="4.5829%" y="207.50"></text></g><g><title>core::cmp::Ord::min (6 samples, 0.01%)</title><rect x="4.3329%" y="181" width="0.0101%" height="15" fill="rgb(225,33,4)" fg:x="2586" fg:w="6"/><text x="4.5829%" y="191.50"></text></g><g><title>core::cmp::min_by (6 samples, 0.01%)</title><rect x="4.3329%" y="165" width="0.0101%" height="15" fill="rgb(224,33,50)" fg:x="2586" fg:w="6"/><text x="4.5829%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (14 samples, 0.02%)</title><rect x="4.3245%" y="277" width="0.0235%" height="15" fill="rgb(246,198,51)" fg:x="2581" fg:w="14"/><text x="4.5745%" y="287.50"></text></g><g><title>core::hash::Hasher::write_u32 (14 samples, 0.02%)</title><rect x="4.3245%" y="261" width="0.0235%" height="15" fill="rgb(205,22,4)" fg:x="2581" fg:w="14"/><text x="4.5745%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="4.3245%" y="245" width="0.0235%" height="15" fill="rgb(206,3,8)" fg:x="2581" fg:w="14"/><text x="4.5745%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="4.3245%" y="229" width="0.0235%" height="15" fill="rgb(251,23,15)" fg:x="2581" fg:w="14"/><text x="4.5745%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="4.3245%" y="213" width="0.0235%" height="15" fill="rgb(252,88,28)" fg:x="2581" fg:w="14"/><text x="4.5745%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (16 samples, 0.03%)</title><rect x="4.3597%" y="197" width="0.0268%" height="15" fill="rgb(212,127,14)" fg:x="2602" fg:w="16"/><text x="4.6097%" y="207.50"></text></g><g><title>core::cmp::min (6 samples, 0.01%)</title><rect x="4.3865%" y="197" width="0.0101%" height="15" fill="rgb(247,145,37)" fg:x="2618" fg:w="6"/><text x="4.6365%" y="207.50"></text></g><g><title>core::cmp::Ord::min (6 samples, 0.01%)</title><rect x="4.3865%" y="181" width="0.0101%" height="15" fill="rgb(209,117,53)" fg:x="2618" fg:w="6"/><text x="4.6365%" y="191.50"></text></g><g><title>core::cmp::min_by (6 samples, 0.01%)</title><rect x="4.3865%" y="165" width="0.0101%" height="15" fill="rgb(212,90,42)" fg:x="2618" fg:w="6"/><text x="4.6365%" y="175.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (415 samples, 0.70%)</title><rect x="3.7130%" y="309" width="0.6953%" height="15" fill="rgb(218,164,37)" fg:x="2216" fg:w="415"/><text x="3.9630%" y="319.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (415 samples, 0.70%)</title><rect x="3.7130%" y="293" width="0.6953%" height="15" fill="rgb(246,65,34)" fg:x="2216" fg:w="415"/><text x="3.9630%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (36 samples, 0.06%)</title><rect x="4.3480%" y="277" width="0.0603%" height="15" fill="rgb(231,100,33)" fg:x="2595" fg:w="36"/><text x="4.5980%" y="287.50"></text></g><g><title>core::hash::Hasher::write_usize (35 samples, 0.06%)</title><rect x="4.3496%" y="261" width="0.0586%" height="15" fill="rgb(228,126,14)" fg:x="2596" fg:w="35"/><text x="4.5996%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (35 samples, 0.06%)</title><rect x="4.3496%" y="245" width="0.0586%" height="15" fill="rgb(215,173,21)" fg:x="2596" fg:w="35"/><text x="4.5996%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (35 samples, 0.06%)</title><rect x="4.3496%" y="229" width="0.0586%" height="15" fill="rgb(210,6,40)" fg:x="2596" fg:w="35"/><text x="4.5996%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (35 samples, 0.06%)</title><rect x="4.3496%" y="213" width="0.0586%" height="15" fill="rgb(212,48,18)" fg:x="2596" fg:w="35"/><text x="4.5996%" y="223.50"></text></g><g><title>core::hash::sip::u8to64_le (7 samples, 0.01%)</title><rect x="4.3966%" y="197" width="0.0117%" height="15" fill="rgb(230,214,11)" fg:x="2624" fg:w="7"/><text x="4.6466%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (11 samples, 0.02%)</title><rect x="4.4267%" y="213" width="0.0184%" height="15" fill="rgb(254,105,39)" fg:x="2642" fg:w="11"/><text x="4.6767%" y="223.50"></text></g><g><title>core::cmp::min (9 samples, 0.02%)</title><rect x="4.4452%" y="213" width="0.0151%" height="15" fill="rgb(245,158,5)" fg:x="2653" fg:w="9"/><text x="4.6952%" y="223.50"></text></g><g><title>core::cmp::Ord::min (9 samples, 0.02%)</title><rect x="4.4452%" y="197" width="0.0151%" height="15" fill="rgb(249,208,11)" fg:x="2653" fg:w="9"/><text x="4.6952%" y="207.50"></text></g><g><title>core::cmp::min_by (9 samples, 0.02%)</title><rect x="4.4452%" y="181" width="0.0151%" height="15" fill="rgb(210,39,28)" fg:x="2653" fg:w="9"/><text x="4.6952%" y="191.50"></text></g><g><title>core::ops::function::FnOnce::call_once (6 samples, 0.01%)</title><rect x="4.4502%" y="165" width="0.0101%" height="15" fill="rgb(211,56,53)" fg:x="2656" fg:w="6"/><text x="4.7002%" y="175.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (457 samples, 0.77%)</title><rect x="3.7062%" y="325" width="0.7657%" height="15" fill="rgb(226,201,30)" fg:x="2212" fg:w="457"/><text x="3.9562%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (38 samples, 0.06%)</title><rect x="4.4083%" y="309" width="0.0637%" height="15" fill="rgb(239,101,34)" fg:x="2631" fg:w="38"/><text x="4.6583%" y="319.50"></text></g><g><title>core::hash::Hasher::write_isize (38 samples, 0.06%)</title><rect x="4.4083%" y="293" width="0.0637%" height="15" fill="rgb(226,209,5)" fg:x="2631" fg:w="38"/><text x="4.6583%" y="303.50"></text></g><g><title>core::hash::Hasher::write_usize (36 samples, 0.06%)</title><rect x="4.4116%" y="277" width="0.0603%" height="15" fill="rgb(250,105,47)" fg:x="2633" fg:w="36"/><text x="4.6616%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (35 samples, 0.06%)</title><rect x="4.4133%" y="261" width="0.0586%" height="15" fill="rgb(230,72,3)" fg:x="2634" fg:w="35"/><text x="4.6633%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (35 samples, 0.06%)</title><rect x="4.4133%" y="245" width="0.0586%" height="15" fill="rgb(232,218,39)" fg:x="2634" fg:w="35"/><text x="4.6633%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (35 samples, 0.06%)</title><rect x="4.4133%" y="229" width="0.0586%" height="15" fill="rgb(248,166,6)" fg:x="2634" fg:w="35"/><text x="4.6633%" y="239.50"></text></g><g><title>core::hash::sip::u8to64_le (7 samples, 0.01%)</title><rect x="4.4602%" y="213" width="0.0117%" height="15" fill="rgb(247,89,20)" fg:x="2662" fg:w="7"/><text x="4.7102%" y="223.50"></text></g><g><title>core::cmp::min (7 samples, 0.01%)</title><rect x="4.4770%" y="245" width="0.0117%" height="15" fill="rgb(248,130,54)" fg:x="2672" fg:w="7"/><text x="4.7270%" y="255.50"></text></g><g><title>core::cmp::Ord::min (7 samples, 0.01%)</title><rect x="4.4770%" y="229" width="0.0117%" height="15" fill="rgb(234,196,4)" fg:x="2672" fg:w="7"/><text x="4.7270%" y="239.50"></text></g><g><title>core::cmp::min_by (7 samples, 0.01%)</title><rect x="4.4770%" y="213" width="0.0117%" height="15" fill="rgb(250,143,31)" fg:x="2672" fg:w="7"/><text x="4.7270%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (13 samples, 0.02%)</title><rect x="4.4720%" y="325" width="0.0218%" height="15" fill="rgb(211,110,34)" fg:x="2669" fg:w="13"/><text x="4.7220%" y="335.50"></text></g><g><title>core::hash::Hasher::write_u32 (13 samples, 0.02%)</title><rect x="4.4720%" y="309" width="0.0218%" height="15" fill="rgb(215,124,48)" fg:x="2669" fg:w="13"/><text x="4.7220%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (13 samples, 0.02%)</title><rect x="4.4720%" y="293" width="0.0218%" height="15" fill="rgb(216,46,13)" fg:x="2669" fg:w="13"/><text x="4.7220%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (13 samples, 0.02%)</title><rect x="4.4720%" y="277" width="0.0218%" height="15" fill="rgb(205,184,25)" fg:x="2669" fg:w="13"/><text x="4.7220%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (13 samples, 0.02%)</title><rect x="4.4720%" y="261" width="0.0218%" height="15" fill="rgb(228,1,10)" fg:x="2669" fg:w="13"/><text x="4.7220%" y="271.50"></text></g><g><title>core::cmp::min (7 samples, 0.01%)</title><rect x="4.5071%" y="245" width="0.0117%" height="15" fill="rgb(213,116,27)" fg:x="2690" fg:w="7"/><text x="4.7571%" y="255.50"></text></g><g><title>core::cmp::Ord::min (7 samples, 0.01%)</title><rect x="4.5071%" y="229" width="0.0117%" height="15" fill="rgb(241,95,50)" fg:x="2690" fg:w="7"/><text x="4.7571%" y="239.50"></text></g><g><title>core::cmp::min_by (7 samples, 0.01%)</title><rect x="4.5071%" y="213" width="0.0117%" height="15" fill="rgb(238,48,32)" fg:x="2690" fg:w="7"/><text x="4.7571%" y="223.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (606 samples, 1.02%)</title><rect x="3.5152%" y="357" width="1.0154%" height="15" fill="rgb(235,113,49)" fg:x="2098" fg:w="606"/><text x="3.7652%" y="367.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (605 samples, 1.01%)</title><rect x="3.5169%" y="341" width="1.0137%" height="15" fill="rgb(205,127,43)" fg:x="2099" fg:w="605"/><text x="3.7669%" y="351.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (22 samples, 0.04%)</title><rect x="4.4937%" y="325" width="0.0369%" height="15" fill="rgb(250,162,2)" fg:x="2682" fg:w="22"/><text x="4.7437%" y="335.50"></text></g><g><title>core::hash::Hasher::write_usize (22 samples, 0.04%)</title><rect x="4.4937%" y="309" width="0.0369%" height="15" fill="rgb(220,13,41)" fg:x="2682" fg:w="22"/><text x="4.7437%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (21 samples, 0.04%)</title><rect x="4.4954%" y="293" width="0.0352%" height="15" fill="rgb(249,221,25)" fg:x="2683" fg:w="21"/><text x="4.7454%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (21 samples, 0.04%)</title><rect x="4.4954%" y="277" width="0.0352%" height="15" fill="rgb(215,208,19)" fg:x="2683" fg:w="21"/><text x="4.7454%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21 samples, 0.04%)</title><rect x="4.4954%" y="261" width="0.0352%" height="15" fill="rgb(236,175,2)" fg:x="2683" fg:w="21"/><text x="4.7454%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (7 samples, 0.01%)</title><rect x="4.5189%" y="245" width="0.0117%" height="15" fill="rgb(241,52,2)" fg:x="2697" fg:w="7"/><text x="4.7689%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.01%)</title><rect x="4.5356%" y="261" width="0.0101%" height="15" fill="rgb(248,140,14)" fg:x="2707" fg:w="6"/><text x="4.7856%" y="271.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (622 samples, 1.04%)</title><rect x="3.5119%" y="373" width="1.0422%" height="15" fill="rgb(253,22,42)" fg:x="2096" fg:w="622"/><text x="3.7619%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (14 samples, 0.02%)</title><rect x="4.5306%" y="357" width="0.0235%" height="15" fill="rgb(234,61,47)" fg:x="2704" fg:w="14"/><text x="4.7806%" y="367.50"></text></g><g><title>core::hash::Hasher::write_isize (14 samples, 0.02%)</title><rect x="4.5306%" y="341" width="0.0235%" height="15" fill="rgb(208,226,15)" fg:x="2704" fg:w="14"/><text x="4.7806%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (14 samples, 0.02%)</title><rect x="4.5306%" y="325" width="0.0235%" height="15" fill="rgb(217,221,4)" fg:x="2704" fg:w="14"/><text x="4.7806%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="4.5306%" y="309" width="0.0235%" height="15" fill="rgb(212,174,34)" fg:x="2704" fg:w="14"/><text x="4.7806%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="4.5306%" y="293" width="0.0235%" height="15" fill="rgb(253,83,4)" fg:x="2704" fg:w="14"/><text x="4.7806%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.02%)</title><rect x="4.5306%" y="277" width="0.0235%" height="15" fill="rgb(250,195,49)" fg:x="2704" fg:w="14"/><text x="4.7806%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (8 samples, 0.01%)</title><rect x="4.5541%" y="373" width="0.0134%" height="15" fill="rgb(241,192,25)" fg:x="2718" fg:w="8"/><text x="4.8041%" y="383.50"></text></g><g><title>core::hash::Hasher::write_u32 (8 samples, 0.01%)</title><rect x="4.5541%" y="357" width="0.0134%" height="15" fill="rgb(208,124,10)" fg:x="2718" fg:w="8"/><text x="4.8041%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="4.5557%" y="341" width="0.0117%" height="15" fill="rgb(222,33,0)" fg:x="2719" fg:w="7"/><text x="4.8057%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="4.5557%" y="325" width="0.0117%" height="15" fill="rgb(234,209,28)" fg:x="2719" fg:w="7"/><text x="4.8057%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (7 samples, 0.01%)</title><rect x="4.5557%" y="309" width="0.0117%" height="15" fill="rgb(224,11,23)" fg:x="2719" fg:w="7"/><text x="4.8057%" y="319.50"></text></g><g><title>core::hash::sip::u8to64_le (8 samples, 0.01%)</title><rect x="4.5909%" y="293" width="0.0134%" height="15" fill="rgb(232,99,1)" fg:x="2740" fg:w="8"/><text x="4.8409%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (775 samples, 1.30%)</title><rect x="3.3075%" y="501" width="1.2985%" height="15" fill="rgb(237,95,45)" fg:x="1974" fg:w="775"/><text x="3.5575%" y="511.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (774 samples, 1.30%)</title><rect x="3.3092%" y="485" width="1.2969%" height="15" fill="rgb(208,109,11)" fg:x="1975" fg:w="774"/><text x="3.5592%" y="495.50"></text></g><g><title>hashbrown::map::make_hash (774 samples, 1.30%)</title><rect x="3.3092%" y="469" width="1.2969%" height="15" fill="rgb(216,190,48)" fg:x="1975" fg:w="774"/><text x="3.5592%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (774 samples, 1.30%)</title><rect x="3.3092%" y="453" width="1.2969%" height="15" fill="rgb(251,171,36)" fg:x="1975" fg:w="774"/><text x="3.5592%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (769 samples, 1.29%)</title><rect x="3.3175%" y="437" width="1.2885%" height="15" fill="rgb(230,62,22)" fg:x="1980" fg:w="769"/><text x="3.5675%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (769 samples, 1.29%)</title><rect x="3.3175%" y="421" width="1.2885%" height="15" fill="rgb(225,114,35)" fg:x="1980" fg:w="769"/><text x="3.5675%" y="431.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::hash::Hash&gt;::hash (769 samples, 1.29%)</title><rect x="3.3175%" y="405" width="1.2885%" height="15" fill="rgb(215,118,42)" fg:x="1980" fg:w="769"/><text x="3.5675%" y="415.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (767 samples, 1.29%)</title><rect x="3.3209%" y="389" width="1.2851%" height="15" fill="rgb(243,119,21)" fg:x="1982" fg:w="767"/><text x="3.5709%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (23 samples, 0.04%)</title><rect x="4.5675%" y="373" width="0.0385%" height="15" fill="rgb(252,177,53)" fg:x="2726" fg:w="23"/><text x="4.8175%" y="383.50"></text></g><g><title>core::hash::Hasher::write_usize (22 samples, 0.04%)</title><rect x="4.5691%" y="357" width="0.0369%" height="15" fill="rgb(237,209,29)" fg:x="2727" fg:w="22"/><text x="4.8191%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (22 samples, 0.04%)</title><rect x="4.5691%" y="341" width="0.0369%" height="15" fill="rgb(212,65,23)" fg:x="2727" fg:w="22"/><text x="4.8191%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (21 samples, 0.04%)</title><rect x="4.5708%" y="325" width="0.0352%" height="15" fill="rgb(230,222,46)" fg:x="2728" fg:w="21"/><text x="4.8208%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (21 samples, 0.04%)</title><rect x="4.5708%" y="309" width="0.0352%" height="15" fill="rgb(215,135,32)" fg:x="2728" fg:w="21"/><text x="4.8208%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (6 samples, 0.01%)</title><rect x="4.6060%" y="469" width="0.0101%" height="15" fill="rgb(246,101,22)" fg:x="2749" fg:w="6"/><text x="4.8560%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (789 samples, 1.32%)</title><rect x="3.3024%" y="565" width="1.3220%" height="15" fill="rgb(206,107,13)" fg:x="1971" fg:w="789"/><text x="3.5524%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (789 samples, 1.32%)</title><rect x="3.3024%" y="549" width="1.3220%" height="15" fill="rgb(250,100,44)" fg:x="1971" fg:w="789"/><text x="3.5524%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (789 samples, 1.32%)</title><rect x="3.3024%" y="533" width="1.3220%" height="15" fill="rgb(231,147,38)" fg:x="1971" fg:w="789"/><text x="3.5524%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (789 samples, 1.32%)</title><rect x="3.3024%" y="517" width="1.3220%" height="15" fill="rgb(229,8,40)" fg:x="1971" fg:w="789"/><text x="3.5524%" y="527.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (11 samples, 0.02%)</title><rect x="4.6060%" y="501" width="0.0184%" height="15" fill="rgb(221,135,30)" fg:x="2749" fg:w="11"/><text x="4.8560%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (11 samples, 0.02%)</title><rect x="4.6060%" y="485" width="0.0184%" height="15" fill="rgb(249,193,18)" fg:x="2749" fg:w="11"/><text x="4.8560%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (805 samples, 1.35%)</title><rect x="3.3008%" y="581" width="1.3488%" height="15" fill="rgb(209,133,39)" fg:x="1970" fg:w="805"/><text x="3.5508%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (15 samples, 0.03%)</title><rect x="4.6244%" y="565" width="0.0251%" height="15" fill="rgb(232,100,14)" fg:x="2760" fg:w="15"/><text x="4.8744%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2,249 samples, 3.77%)</title><rect x="0.8830%" y="853" width="3.7682%" height="15" fill="rgb(224,185,1)" fg:x="527" fg:w="2249"/><text x="1.1330%" y="863.50">core..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,249 samples, 3.77%)</title><rect x="0.8830%" y="837" width="3.7682%" height="15" fill="rgb(223,139,8)" fg:x="527" fg:w="2249"/><text x="1.1330%" y="847.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,249 samples, 3.77%)</title><rect x="0.8830%" y="821" width="3.7682%" height="15" fill="rgb(232,213,38)" fg:x="527" fg:w="2249"/><text x="1.1330%" y="831.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,249 samples, 3.77%)</title><rect x="0.8830%" y="805" width="3.7682%" height="15" fill="rgb(207,94,22)" fg:x="527" fg:w="2249"/><text x="1.1330%" y="815.50">&lt;cor..</text></g><g><title>core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold (2,249 samples, 3.77%)</title><rect x="0.8830%" y="789" width="3.7682%" height="15" fill="rgb(219,183,54)" fg:x="527" fg:w="2249"/><text x="1.1330%" y="799.50">core..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,249 samples, 3.77%)</title><rect x="0.8830%" y="773" width="3.7682%" height="15" fill="rgb(216,185,54)" fg:x="527" fg:w="2249"/><text x="1.1330%" y="783.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,249 samples, 3.77%)</title><rect x="0.8830%" y="757" width="3.7682%" height="15" fill="rgb(254,217,39)" fg:x="527" fg:w="2249"/><text x="1.1330%" y="767.50">&lt;cor..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (2,249 samples, 3.77%)</title><rect x="0.8830%" y="741" width="3.7682%" height="15" fill="rgb(240,178,23)" fg:x="527" fg:w="2249"/><text x="1.1330%" y="751.50">core..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2,246 samples, 3.76%)</title><rect x="0.8880%" y="725" width="3.7632%" height="15" fill="rgb(218,11,47)" fg:x="530" fg:w="2246"/><text x="1.1380%" y="735.50">core..</text></g><g><title>core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt;::iter_fold::flatten::_{{closure}} (1,316 samples, 2.20%)</title><rect x="2.4463%" y="709" width="2.2050%" height="15" fill="rgb(218,51,51)" fg:x="1460" fg:w="1316"/><text x="2.6963%" y="719.50">c..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::fold::flatten::_{{closure}} (1,314 samples, 2.20%)</title><rect x="2.4496%" y="693" width="2.2016%" height="15" fill="rgb(238,126,27)" fg:x="1462" fg:w="1314"/><text x="2.6996%" y="703.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,314 samples, 2.20%)</title><rect x="2.4496%" y="677" width="2.2016%" height="15" fill="rgb(249,202,22)" fg:x="1462" fg:w="1314"/><text x="2.6996%" y="687.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1,313 samples, 2.20%)</title><rect x="2.4513%" y="661" width="2.2000%" height="15" fill="rgb(254,195,49)" fg:x="1463" fg:w="1313"/><text x="2.7013%" y="671.50">c..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1,313 samples, 2.20%)</title><rect x="2.4513%" y="645" width="2.2000%" height="15" fill="rgb(208,123,14)" fg:x="1463" fg:w="1313"/><text x="2.7013%" y="655.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1,313 samples, 2.20%)</title><rect x="2.4513%" y="629" width="2.2000%" height="15" fill="rgb(224,200,8)" fg:x="1463" fg:w="1313"/><text x="2.7013%" y="639.50">c..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (1,313 samples, 2.20%)</title><rect x="2.4513%" y="613" width="2.2000%" height="15" fill="rgb(217,61,36)" fg:x="1463" fg:w="1313"/><text x="2.7013%" y="623.50">&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,313 samples, 2.20%)</title><rect x="2.4513%" y="597" width="2.2000%" height="15" fill="rgb(206,35,45)" fg:x="1463" fg:w="1313"/><text x="2.7013%" y="607.50">h..</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2,250 samples, 3.77%)</title><rect x="0.8830%" y="901" width="3.7699%" height="15" fill="rgb(217,65,33)" fg:x="527" fg:w="2250"/><text x="1.1330%" y="911.50">&lt;std..</text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2,250 samples, 3.77%)</title><rect x="0.8830%" y="885" width="3.7699%" height="15" fill="rgb(222,158,48)" fg:x="527" fg:w="2250"/><text x="1.1330%" y="895.50">&lt;has..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2,250 samples, 3.77%)</title><rect x="0.8830%" y="869" width="3.7699%" height="15" fill="rgb(254,2,54)" fg:x="527" fg:w="2250"/><text x="1.1330%" y="879.50">&lt;has..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.02%)</title><rect x="4.6663%" y="773" width="0.0151%" height="15" fill="rgb(250,143,38)" fg:x="2785" fg:w="9"/><text x="4.9163%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.01%)</title><rect x="4.6680%" y="757" width="0.0134%" height="15" fill="rgb(248,25,0)" fg:x="2786" fg:w="8"/><text x="4.9180%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.01%)</title><rect x="4.6680%" y="741" width="0.0134%" height="15" fill="rgb(206,152,27)" fg:x="2786" fg:w="8"/><text x="4.9180%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.01%)</title><rect x="4.6680%" y="725" width="0.0134%" height="15" fill="rgb(240,77,30)" fg:x="2786" fg:w="8"/><text x="4.9180%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.01%)</title><rect x="4.6680%" y="709" width="0.0134%" height="15" fill="rgb(231,5,3)" fg:x="2786" fg:w="8"/><text x="4.9180%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.02%)</title><rect x="4.6814%" y="773" width="0.0151%" height="15" fill="rgb(207,226,32)" fg:x="2794" fg:w="9"/><text x="4.9314%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.02%)</title><rect x="4.6814%" y="757" width="0.0151%" height="15" fill="rgb(222,207,47)" fg:x="2794" fg:w="9"/><text x="4.9314%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (32 samples, 0.05%)</title><rect x="4.6579%" y="837" width="0.0536%" height="15" fill="rgb(229,115,45)" fg:x="2780" fg:w="32"/><text x="4.9079%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (29 samples, 0.05%)</title><rect x="4.6630%" y="821" width="0.0486%" height="15" fill="rgb(224,191,6)" fg:x="2783" fg:w="29"/><text x="4.9130%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (29 samples, 0.05%)</title><rect x="4.6630%" y="805" width="0.0486%" height="15" fill="rgb(230,227,24)" fg:x="2783" fg:w="29"/><text x="4.9130%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (29 samples, 0.05%)</title><rect x="4.6630%" y="789" width="0.0486%" height="15" fill="rgb(228,80,19)" fg:x="2783" fg:w="29"/><text x="4.9130%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 0.01%)</title><rect x="4.6982%" y="773" width="0.0134%" height="15" fill="rgb(247,229,0)" fg:x="2804" fg:w="8"/><text x="4.9482%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 0.01%)</title><rect x="4.6982%" y="757" width="0.0134%" height="15" fill="rgb(237,194,15)" fg:x="2804" fg:w="8"/><text x="4.9482%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 0.01%)</title><rect x="4.6982%" y="741" width="0.0134%" height="15" fill="rgb(219,203,20)" fg:x="2804" fg:w="8"/><text x="4.9482%" y="751.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (28 samples, 0.05%)</title><rect x="4.7568%" y="613" width="0.0469%" height="15" fill="rgb(234,128,8)" fg:x="2839" fg:w="28"/><text x="5.0068%" y="623.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (28 samples, 0.05%)</title><rect x="4.7568%" y="597" width="0.0469%" height="15" fill="rgb(248,202,8)" fg:x="2839" fg:w="28"/><text x="5.0068%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (28 samples, 0.05%)</title><rect x="4.7568%" y="581" width="0.0469%" height="15" fill="rgb(206,104,37)" fg:x="2839" fg:w="28"/><text x="5.0068%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (20 samples, 0.03%)</title><rect x="4.7702%" y="565" width="0.0335%" height="15" fill="rgb(223,8,27)" fg:x="2847" fg:w="20"/><text x="5.0202%" y="575.50"></text></g><g><title>[libc.so.6] (7 samples, 0.01%)</title><rect x="4.8104%" y="581" width="0.0117%" height="15" fill="rgb(216,217,28)" fg:x="2871" fg:w="7"/><text x="5.0604%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (17 samples, 0.03%)</title><rect x="4.8037%" y="613" width="0.0285%" height="15" fill="rgb(249,199,1)" fg:x="2867" fg:w="17"/><text x="5.0537%" y="623.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (13 samples, 0.02%)</title><rect x="4.8104%" y="597" width="0.0218%" height="15" fill="rgb(240,85,17)" fg:x="2871" fg:w="13"/><text x="5.0604%" y="607.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (6 samples, 0.01%)</title><rect x="4.8221%" y="581" width="0.0101%" height="15" fill="rgb(206,108,45)" fg:x="2878" fg:w="6"/><text x="5.0721%" y="591.50"></text></g><g><title>[libc.so.6] (6 samples, 0.01%)</title><rect x="4.8221%" y="565" width="0.0101%" height="15" fill="rgb(245,210,41)" fg:x="2878" fg:w="6"/><text x="5.0721%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.01%)</title><rect x="4.8456%" y="501" width="0.0134%" height="15" fill="rgb(206,13,37)" fg:x="2892" fg:w="8"/><text x="5.0956%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (18 samples, 0.03%)</title><rect x="4.8339%" y="517" width="0.0302%" height="15" fill="rgb(250,61,18)" fg:x="2885" fg:w="18"/><text x="5.0839%" y="527.50"></text></g><g><title>hashbrown::map::make_hash (76 samples, 0.13%)</title><rect x="4.7534%" y="645" width="0.1273%" height="15" fill="rgb(235,172,48)" fg:x="2837" fg:w="76"/><text x="5.0034%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (76 samples, 0.13%)</title><rect x="4.7534%" y="629" width="0.1273%" height="15" fill="rgb(249,201,17)" fg:x="2837" fg:w="76"/><text x="5.0034%" y="639.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (29 samples, 0.05%)</title><rect x="4.8322%" y="613" width="0.0486%" height="15" fill="rgb(219,208,6)" fg:x="2884" fg:w="29"/><text x="5.0822%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (29 samples, 0.05%)</title><rect x="4.8322%" y="597" width="0.0486%" height="15" fill="rgb(248,31,23)" fg:x="2884" fg:w="29"/><text x="5.0822%" y="607.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (28 samples, 0.05%)</title><rect x="4.8339%" y="581" width="0.0469%" height="15" fill="rgb(245,15,42)" fg:x="2885" fg:w="28"/><text x="5.0839%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (28 samples, 0.05%)</title><rect x="4.8339%" y="565" width="0.0469%" height="15" fill="rgb(222,217,39)" fg:x="2885" fg:w="28"/><text x="5.0839%" y="575.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (28 samples, 0.05%)</title><rect x="4.8339%" y="549" width="0.0469%" height="15" fill="rgb(210,219,27)" fg:x="2885" fg:w="28"/><text x="5.0839%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (28 samples, 0.05%)</title><rect x="4.8339%" y="533" width="0.0469%" height="15" fill="rgb(252,166,36)" fg:x="2885" fg:w="28"/><text x="5.0839%" y="543.50"></text></g><g><title>core::hash::Hasher::write_u8 (10 samples, 0.02%)</title><rect x="4.8640%" y="517" width="0.0168%" height="15" fill="rgb(245,132,34)" fg:x="2903" fg:w="10"/><text x="5.1140%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.02%)</title><rect x="4.8657%" y="501" width="0.0151%" height="15" fill="rgb(236,54,3)" fg:x="2904" fg:w="9"/><text x="5.1157%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (11 samples, 0.02%)</title><rect x="4.8975%" y="613" width="0.0184%" height="15" fill="rgb(241,173,43)" fg:x="2923" fg:w="11"/><text x="5.1475%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (6 samples, 0.01%)</title><rect x="4.9193%" y="613" width="0.0101%" height="15" fill="rgb(215,190,9)" fg:x="2936" fg:w="6"/><text x="5.1693%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (6 samples, 0.01%)</title><rect x="4.9193%" y="597" width="0.0101%" height="15" fill="rgb(242,101,16)" fg:x="2936" fg:w="6"/><text x="5.1693%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (6 samples, 0.01%)</title><rect x="4.9428%" y="597" width="0.0101%" height="15" fill="rgb(223,190,21)" fg:x="2950" fg:w="6"/><text x="5.1928%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (21 samples, 0.04%)</title><rect x="4.9294%" y="613" width="0.0352%" height="15" fill="rgb(215,228,25)" fg:x="2942" fg:w="21"/><text x="5.1794%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (7 samples, 0.01%)</title><rect x="4.9528%" y="597" width="0.0117%" height="15" fill="rgb(225,36,22)" fg:x="2956" fg:w="7"/><text x="5.2028%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (7 samples, 0.01%)</title><rect x="4.9528%" y="581" width="0.0117%" height="15" fill="rgb(251,106,46)" fg:x="2956" fg:w="7"/><text x="5.2028%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.01%)</title><rect x="4.9763%" y="581" width="0.0117%" height="15" fill="rgb(208,90,1)" fg:x="2970" fg:w="7"/><text x="5.2263%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (72 samples, 0.12%)</title><rect x="4.8808%" y="645" width="0.1206%" height="15" fill="rgb(243,10,4)" fg:x="2913" fg:w="72"/><text x="5.1308%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (70 samples, 0.12%)</title><rect x="4.8841%" y="629" width="0.1173%" height="15" fill="rgb(212,137,27)" fg:x="2915" fg:w="70"/><text x="5.1341%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (22 samples, 0.04%)</title><rect x="4.9646%" y="613" width="0.0369%" height="15" fill="rgb(231,220,49)" fg:x="2963" fg:w="22"/><text x="5.2146%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (22 samples, 0.04%)</title><rect x="4.9646%" y="597" width="0.0369%" height="15" fill="rgb(237,96,20)" fg:x="2963" fg:w="22"/><text x="5.2146%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (8 samples, 0.01%)</title><rect x="4.9880%" y="581" width="0.0134%" height="15" fill="rgb(239,229,30)" fg:x="2977" fg:w="8"/><text x="5.2380%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (8 samples, 0.01%)</title><rect x="4.9880%" y="565" width="0.0134%" height="15" fill="rgb(219,65,33)" fg:x="2977" fg:w="8"/><text x="5.2380%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (6 samples, 0.01%)</title><rect x="5.0098%" y="629" width="0.0101%" height="15" fill="rgb(243,134,7)" fg:x="2990" fg:w="6"/><text x="5.2598%" y="639.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (167 samples, 0.28%)</title><rect x="4.7417%" y="709" width="0.2798%" height="15" fill="rgb(216,177,54)" fg:x="2830" fg:w="167"/><text x="4.9917%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (163 samples, 0.27%)</title><rect x="4.7484%" y="693" width="0.2731%" height="15" fill="rgb(211,160,20)" fg:x="2834" fg:w="163"/><text x="4.9984%" y="703.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (163 samples, 0.27%)</title><rect x="4.7484%" y="677" width="0.2731%" height="15" fill="rgb(239,85,39)" fg:x="2834" fg:w="163"/><text x="4.9984%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (162 samples, 0.27%)</title><rect x="4.7501%" y="661" width="0.2714%" height="15" fill="rgb(232,125,22)" fg:x="2835" fg:w="162"/><text x="5.0001%" y="671.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (12 samples, 0.02%)</title><rect x="5.0014%" y="645" width="0.0201%" height="15" fill="rgb(244,57,34)" fg:x="2985" fg:w="12"/><text x="5.2514%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (183 samples, 0.31%)</title><rect x="4.7283%" y="757" width="0.3066%" height="15" fill="rgb(214,203,32)" fg:x="2822" fg:w="183"/><text x="4.9783%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (183 samples, 0.31%)</title><rect x="4.7283%" y="741" width="0.3066%" height="15" fill="rgb(207,58,43)" fg:x="2822" fg:w="183"/><text x="4.9783%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (183 samples, 0.31%)</title><rect x="4.7283%" y="725" width="0.3066%" height="15" fill="rgb(215,193,15)" fg:x="2822" fg:w="183"/><text x="4.9783%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::string::String&gt;&gt; (8 samples, 0.01%)</title><rect x="5.0215%" y="709" width="0.0134%" height="15" fill="rgb(232,15,44)" fg:x="2997" fg:w="8"/><text x="5.2715%" y="719.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="5.0215%" y="693" width="0.0134%" height="15" fill="rgb(212,3,48)" fg:x="2997" fg:w="8"/><text x="5.2715%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (11 samples, 0.02%)</title><rect x="5.0483%" y="645" width="0.0184%" height="15" fill="rgb(218,128,7)" fg:x="3013" fg:w="11"/><text x="5.2983%" y="655.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (8 samples, 0.01%)</title><rect x="5.0534%" y="629" width="0.0134%" height="15" fill="rgb(226,216,39)" fg:x="3016" fg:w="8"/><text x="5.3034%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.01%)</title><rect x="5.0567%" y="613" width="0.0101%" height="15" fill="rgb(243,47,51)" fg:x="3018" fg:w="6"/><text x="5.3067%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (14 samples, 0.02%)</title><rect x="5.0467%" y="661" width="0.0235%" height="15" fill="rgb(241,183,40)" fg:x="3012" fg:w="14"/><text x="5.2967%" y="671.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (209 samples, 0.35%)</title><rect x="4.7216%" y="805" width="0.3502%" height="15" fill="rgb(231,217,32)" fg:x="2818" fg:w="209"/><text x="4.9716%" y="815.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (209 samples, 0.35%)</title><rect x="4.7216%" y="789" width="0.3502%" height="15" fill="rgb(229,61,38)" fg:x="2818" fg:w="209"/><text x="4.9716%" y="799.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (209 samples, 0.35%)</title><rect x="4.7216%" y="773" width="0.3502%" height="15" fill="rgb(225,210,5)" fg:x="2818" fg:w="209"/><text x="4.9716%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (22 samples, 0.04%)</title><rect x="5.0349%" y="757" width="0.0369%" height="15" fill="rgb(231,79,45)" fg:x="3005" fg:w="22"/><text x="5.2849%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (22 samples, 0.04%)</title><rect x="5.0349%" y="741" width="0.0369%" height="15" fill="rgb(224,100,7)" fg:x="3005" fg:w="22"/><text x="5.2849%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (21 samples, 0.04%)</title><rect x="5.0366%" y="725" width="0.0352%" height="15" fill="rgb(241,198,18)" fg:x="3006" fg:w="21"/><text x="5.2866%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (21 samples, 0.04%)</title><rect x="5.0366%" y="709" width="0.0352%" height="15" fill="rgb(252,97,53)" fg:x="3006" fg:w="21"/><text x="5.2866%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (16 samples, 0.03%)</title><rect x="5.0450%" y="693" width="0.0268%" height="15" fill="rgb(220,88,7)" fg:x="3011" fg:w="16"/><text x="5.2950%" y="703.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (16 samples, 0.03%)</title><rect x="5.0450%" y="677" width="0.0268%" height="15" fill="rgb(213,176,14)" fg:x="3011" fg:w="16"/><text x="5.2950%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (218 samples, 0.37%)</title><rect x="4.7116%" y="837" width="0.3653%" height="15" fill="rgb(246,73,7)" fg:x="2812" fg:w="218"/><text x="4.9616%" y="847.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (218 samples, 0.37%)</title><rect x="4.7116%" y="821" width="0.3653%" height="15" fill="rgb(245,64,36)" fg:x="2812" fg:w="218"/><text x="4.9616%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.02%)</title><rect x="5.0969%" y="709" width="0.0184%" height="15" fill="rgb(245,80,10)" fg:x="3042" fg:w="11"/><text x="5.3469%" y="719.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (6 samples, 0.01%)</title><rect x="5.1053%" y="693" width="0.0101%" height="15" fill="rgb(232,107,50)" fg:x="3047" fg:w="6"/><text x="5.3553%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.04%)</title><rect x="5.0886%" y="741" width="0.0402%" height="15" fill="rgb(253,3,0)" fg:x="3037" fg:w="24"/><text x="5.3386%" y="751.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (22 samples, 0.04%)</title><rect x="5.0919%" y="725" width="0.0369%" height="15" fill="rgb(212,99,53)" fg:x="3039" fg:w="22"/><text x="5.3419%" y="735.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (8 samples, 0.01%)</title><rect x="5.1154%" y="709" width="0.0134%" height="15" fill="rgb(249,111,54)" fg:x="3053" fg:w="8"/><text x="5.3654%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (19 samples, 0.03%)</title><rect x="5.1288%" y="725" width="0.0318%" height="15" fill="rgb(249,55,30)" fg:x="3061" fg:w="19"/><text x="5.3788%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,())&gt; (19 samples, 0.03%)</title><rect x="5.1288%" y="709" width="0.0318%" height="15" fill="rgb(237,47,42)" fg:x="3061" fg:w="19"/><text x="5.3788%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (18 samples, 0.03%)</title><rect x="5.1304%" y="693" width="0.0302%" height="15" fill="rgb(211,20,18)" fg:x="3062" fg:w="18"/><text x="5.3804%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (18 samples, 0.03%)</title><rect x="5.1304%" y="677" width="0.0302%" height="15" fill="rgb(231,203,46)" fg:x="3062" fg:w="18"/><text x="5.3804%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (15 samples, 0.03%)</title><rect x="5.1355%" y="661" width="0.0251%" height="15" fill="rgb(237,142,3)" fg:x="3065" fg:w="15"/><text x="5.3855%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.02%)</title><rect x="5.1371%" y="645" width="0.0235%" height="15" fill="rgb(241,107,1)" fg:x="3066" fg:w="14"/><text x="5.3871%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (8 samples, 0.01%)</title><rect x="5.1472%" y="629" width="0.0134%" height="15" fill="rgb(229,83,13)" fg:x="3072" fg:w="8"/><text x="5.3972%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (21 samples, 0.04%)</title><rect x="5.1288%" y="741" width="0.0352%" height="15" fill="rgb(241,91,40)" fg:x="3061" fg:w="21"/><text x="5.3788%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (56 samples, 0.09%)</title><rect x="5.0785%" y="757" width="0.0938%" height="15" fill="rgb(225,3,45)" fg:x="3031" fg:w="56"/><text x="5.3285%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;alloc::string::String&gt;&gt; (62 samples, 0.10%)</title><rect x="5.0768%" y="837" width="0.1039%" height="15" fill="rgb(244,223,14)" fg:x="3030" fg:w="62"/><text x="5.3268%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;alloc::string::String,std::collections::hash::map::RandomState&gt;&gt; (62 samples, 0.10%)</title><rect x="5.0768%" y="821" width="0.1039%" height="15" fill="rgb(224,124,37)" fg:x="3030" fg:w="62"/><text x="5.3268%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,(),std::collections::hash::map::RandomState&gt;&gt; (62 samples, 0.10%)</title><rect x="5.0768%" y="805" width="0.1039%" height="15" fill="rgb(251,171,30)" fg:x="3030" fg:w="62"/><text x="5.3268%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,())&gt;&gt; (62 samples, 0.10%)</title><rect x="5.0768%" y="789" width="0.1039%" height="15" fill="rgb(236,46,54)" fg:x="3030" fg:w="62"/><text x="5.3268%" y="799.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.10%)</title><rect x="5.0768%" y="773" width="0.1039%" height="15" fill="rgb(245,213,5)" fg:x="3030" fg:w="62"/><text x="5.3268%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (6 samples, 0.01%)</title><rect x="5.1807%" y="821" width="0.0101%" height="15" fill="rgb(230,144,27)" fg:x="3092" fg:w="6"/><text x="5.4307%" y="831.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (6 samples, 0.01%)</title><rect x="5.1807%" y="805" width="0.0101%" height="15" fill="rgb(220,86,6)" fg:x="3092" fg:w="6"/><text x="5.4307%" y="815.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (322 samples, 0.54%)</title><rect x="4.6579%" y="901" width="0.5395%" height="15" fill="rgb(240,20,13)" fg:x="2780" fg:w="322"/><text x="4.9079%" y="911.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::cmp::PartialOrd&gt;::ge (322 samples, 0.54%)</title><rect x="4.6579%" y="885" width="0.5395%" height="15" fill="rgb(217,89,34)" fg:x="2780" fg:w="322"/><text x="4.9079%" y="895.50"></text></g><g><title>core::cmp::PartialOrd::ge (322 samples, 0.54%)</title><rect x="4.6579%" y="869" width="0.5395%" height="15" fill="rgb(229,13,5)" fg:x="2780" fg:w="322"/><text x="4.9079%" y="879.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::cmp::PartialOrd&gt;::partial_cmp (322 samples, 0.54%)</title><rect x="4.6579%" y="853" width="0.5395%" height="15" fill="rgb(244,67,35)" fg:x="2780" fg:w="322"/><text x="4.9079%" y="863.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::is_subset (10 samples, 0.02%)</title><rect x="5.1807%" y="837" width="0.0168%" height="15" fill="rgb(221,40,2)" fg:x="3092" fg:w="10"/><text x="5.4307%" y="847.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (16 samples, 0.03%)</title><rect x="5.5460%" y="789" width="0.0268%" height="15" fill="rgb(237,157,21)" fg:x="3310" fg:w="16"/><text x="5.7960%" y="799.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (96 samples, 0.16%)</title><rect x="5.4320%" y="821" width="0.1608%" height="15" fill="rgb(222,94,11)" fg:x="3242" fg:w="96"/><text x="5.6820%" y="831.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (62 samples, 0.10%)</title><rect x="5.4890%" y="805" width="0.1039%" height="15" fill="rgb(249,113,6)" fg:x="3276" fg:w="62"/><text x="5.7390%" y="815.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (12 samples, 0.02%)</title><rect x="5.5728%" y="789" width="0.0201%" height="15" fill="rgb(238,137,36)" fg:x="3326" fg:w="12"/><text x="5.8228%" y="799.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (36 samples, 0.06%)</title><rect x="5.5979%" y="821" width="0.0603%" height="15" fill="rgb(210,102,26)" fg:x="3341" fg:w="36"/><text x="5.8479%" y="831.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (10 samples, 0.02%)</title><rect x="5.6415%" y="805" width="0.0168%" height="15" fill="rgb(218,30,30)" fg:x="3367" fg:w="10"/><text x="5.8915%" y="815.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (15 samples, 0.03%)</title><rect x="5.6582%" y="821" width="0.0251%" height="15" fill="rgb(214,67,26)" fg:x="3377" fg:w="15"/><text x="5.9082%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (227 samples, 0.38%)</title><rect x="5.3164%" y="853" width="0.3803%" height="15" fill="rgb(251,9,53)" fg:x="3173" fg:w="227"/><text x="5.5664%" y="863.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (196 samples, 0.33%)</title><rect x="5.3684%" y="837" width="0.3284%" height="15" fill="rgb(228,204,25)" fg:x="3204" fg:w="196"/><text x="5.6184%" y="847.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (8 samples, 0.01%)</title><rect x="5.6834%" y="821" width="0.0134%" height="15" fill="rgb(207,153,8)" fg:x="3392" fg:w="8"/><text x="5.9334%" y="831.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (7 samples, 0.01%)</title><rect x="5.6968%" y="853" width="0.0117%" height="15" fill="rgb(242,9,16)" fg:x="3400" fg:w="7"/><text x="5.9468%" y="863.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (7 samples, 0.01%)</title><rect x="5.6968%" y="837" width="0.0117%" height="15" fill="rgb(217,211,10)" fg:x="3400" fg:w="7"/><text x="5.9468%" y="847.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (184 samples, 0.31%)</title><rect x="5.8325%" y="821" width="0.3083%" height="15" fill="rgb(219,228,52)" fg:x="3481" fg:w="184"/><text x="6.0825%" y="831.50"></text></g><g><title>&lt;core::cmp::Ordering as core::option::SpecOptionPartialEq&gt;::eq (173 samples, 0.29%)</title><rect x="5.8509%" y="805" width="0.2899%" height="15" fill="rgb(231,92,29)" fg:x="3492" fg:w="173"/><text x="6.1009%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (144 samples, 0.24%)</title><rect x="5.8995%" y="789" width="0.2413%" height="15" fill="rgb(232,8,23)" fg:x="3521" fg:w="144"/><text x="6.1495%" y="799.50"></text></g><g><title>&lt;core::cmp::Ordering as core::option::SpecOptionPartialEq&gt;::eq::_{{closure}} (27 samples, 0.05%)</title><rect x="6.0955%" y="773" width="0.0452%" height="15" fill="rgb(216,211,34)" fg:x="3638" fg:w="27"/><text x="6.3455%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1,146 samples, 1.92%)</title><rect x="6.4692%" y="773" width="1.9201%" height="15" fill="rgb(236,151,0)" fg:x="3861" fg:w="1146"/><text x="6.7192%" y="783.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1,145 samples, 1.92%)</title><rect x="6.4709%" y="757" width="1.9185%" height="15" fill="rgb(209,168,3)" fg:x="3862" fg:w="1145"/><text x="6.7209%" y="767.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1,225 samples, 2.05%)</title><rect x="6.4407%" y="789" width="2.0525%" height="15" fill="rgb(208,129,28)" fg:x="3844" fg:w="1225"/><text x="6.6907%" y="799.50">&lt;..</text></g><g><title>core::slice::raw::from_raw_parts (62 samples, 0.10%)</title><rect x="8.3893%" y="773" width="0.1039%" height="15" fill="rgb(229,78,22)" fg:x="5007" fg:w="62"/><text x="8.6393%" y="783.50"></text></g><g><title>core::ptr::slice_from_raw_parts (62 samples, 0.10%)</title><rect x="8.3893%" y="757" width="0.1039%" height="15" fill="rgb(228,187,13)" fg:x="5007" fg:w="62"/><text x="8.6393%" y="767.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (61 samples, 0.10%)</title><rect x="8.3910%" y="741" width="0.1022%" height="15" fill="rgb(240,119,24)" fg:x="5008" fg:w="61"/><text x="8.6410%" y="751.50"></text></g><g><title>__rdl_alloc (19 samples, 0.03%)</title><rect x="10.1805%" y="565" width="0.0318%" height="15" fill="rgb(209,194,42)" fg:x="6076" fg:w="19"/><text x="10.4305%" y="575.50"></text></g><g><title>__rust_alloc (30 samples, 0.05%)</title><rect x="10.2123%" y="565" width="0.0503%" height="15" fill="rgb(247,200,46)" fg:x="6095" fg:w="30"/><text x="10.4623%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (542 samples, 0.91%)</title><rect x="10.0782%" y="661" width="0.9081%" height="15" fill="rgb(218,76,16)" fg:x="6015" fg:w="542"/><text x="10.3282%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (542 samples, 0.91%)</title><rect x="10.0782%" y="645" width="0.9081%" height="15" fill="rgb(225,21,48)" fg:x="6015" fg:w="542"/><text x="10.3282%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (542 samples, 0.91%)</title><rect x="10.0782%" y="629" width="0.9081%" height="15" fill="rgb(239,223,50)" fg:x="6015" fg:w="542"/><text x="10.3282%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (487 samples, 0.82%)</title><rect x="10.1704%" y="613" width="0.8160%" height="15" fill="rgb(244,45,21)" fg:x="6070" fg:w="487"/><text x="10.4204%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (487 samples, 0.82%)</title><rect x="10.1704%" y="597" width="0.8160%" height="15" fill="rgb(232,33,43)" fg:x="6070" fg:w="487"/><text x="10.4204%" y="607.50"></text></g><g><title>alloc::alloc::alloc (487 samples, 0.82%)</title><rect x="10.1704%" y="581" width="0.8160%" height="15" fill="rgb(209,8,3)" fg:x="6070" fg:w="487"/><text x="10.4204%" y="591.50"></text></g><g><title>malloc (429 samples, 0.72%)</title><rect x="10.2676%" y="565" width="0.7188%" height="15" fill="rgb(214,25,53)" fg:x="6128" fg:w="429"/><text x="10.5176%" y="575.50"></text></g><g><title>[libc.so.6] (266 samples, 0.45%)</title><rect x="10.5407%" y="549" width="0.4457%" height="15" fill="rgb(254,186,54)" fg:x="6291" fg:w="266"/><text x="10.7907%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2,726 samples, 4.57%)</title><rect x="9.5421%" y="741" width="4.5675%" height="15" fill="rgb(208,174,49)" fg:x="5695" fg:w="2726"/><text x="9.7921%" y="751.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2,406 samples, 4.03%)</title><rect x="10.0782%" y="725" width="4.0313%" height="15" fill="rgb(233,191,51)" fg:x="6015" fg:w="2406"/><text x="10.3282%" y="735.50">&lt;all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2,406 samples, 4.03%)</title><rect x="10.0782%" y="709" width="4.0313%" height="15" fill="rgb(222,134,10)" fg:x="6015" fg:w="2406"/><text x="10.3282%" y="719.50">allo..</text></g><g><title>alloc::slice::hack::to_vec (2,406 samples, 4.03%)</title><rect x="10.0782%" y="693" width="4.0313%" height="15" fill="rgb(230,226,20)" fg:x="6015" fg:w="2406"/><text x="10.3282%" y="703.50">allo..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2,406 samples, 4.03%)</title><rect x="10.0782%" y="677" width="4.0313%" height="15" fill="rgb(251,111,25)" fg:x="6015" fg:w="2406"/><text x="10.3282%" y="687.50">&lt;T a..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,864 samples, 3.12%)</title><rect x="10.9864%" y="661" width="3.1232%" height="15" fill="rgb(224,40,46)" fg:x="6557" fg:w="1864"/><text x="11.2364%" y="671.50">cor..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1,864 samples, 3.12%)</title><rect x="10.9864%" y="645" width="3.1232%" height="15" fill="rgb(236,108,47)" fg:x="6557" fg:w="1864"/><text x="11.2364%" y="655.50">cor..</text></g><g><title>[libc.so.6] (1,861 samples, 3.12%)</title><rect x="10.9914%" y="629" width="3.1181%" height="15" fill="rgb(234,93,0)" fg:x="6560" fg:w="1861"/><text x="11.2414%" y="639.50">[li..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::FromResidual&gt;::from_residual (6 samples, 0.01%)</title><rect x="15.2874%" y="709" width="0.0101%" height="15" fill="rgb(224,213,32)" fg:x="9124" fg:w="6"/><text x="15.5374%" y="719.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (172 samples, 0.29%)</title><rect x="15.2975%" y="709" width="0.2882%" height="15" fill="rgb(251,11,48)" fg:x="9130" fg:w="172"/><text x="15.5475%" y="719.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (19 samples, 0.03%)</title><rect x="16.1671%" y="693" width="0.0318%" height="15" fill="rgb(236,173,5)" fg:x="9649" fg:w="19"/><text x="16.4171%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,311 samples, 2.20%)</title><rect x="14.1095%" y="741" width="2.1966%" height="15" fill="rgb(230,95,12)" fg:x="8421" fg:w="1311"/><text x="14.3595%" y="751.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,275 samples, 2.14%)</title><rect x="14.1699%" y="725" width="2.1363%" height="15" fill="rgb(232,209,1)" fg:x="8457" fg:w="1275"/><text x="14.4199%" y="735.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (430 samples, 0.72%)</title><rect x="15.5857%" y="709" width="0.7205%" height="15" fill="rgb(232,6,1)" fg:x="9302" fg:w="430"/><text x="15.8357%" y="719.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (62 samples, 0.10%)</title><rect x="16.2023%" y="693" width="0.1039%" height="15" fill="rgb(210,224,50)" fg:x="9670" fg:w="62"/><text x="16.4523%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (31 samples, 0.05%)</title><rect x="16.3815%" y="725" width="0.0519%" height="15" fill="rgb(228,127,35)" fg:x="9777" fg:w="31"/><text x="16.6315%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (31 samples, 0.05%)</title><rect x="16.3815%" y="709" width="0.0519%" height="15" fill="rgb(245,102,45)" fg:x="9777" fg:w="31"/><text x="16.6315%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::spare_capacity_mut (142 samples, 0.24%)</title><rect x="16.3062%" y="741" width="0.2379%" height="15" fill="rgb(214,1,49)" fg:x="9732" fg:w="142"/><text x="16.5562%" y="751.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (64 samples, 0.11%)</title><rect x="16.4368%" y="725" width="0.1072%" height="15" fill="rgb(226,163,40)" fg:x="9810" fg:w="64"/><text x="16.6868%" y="735.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (64 samples, 0.11%)</title><rect x="16.4368%" y="709" width="0.1072%" height="15" fill="rgb(239,212,28)" fg:x="9810" fg:w="64"/><text x="16.6868%" y="719.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (64 samples, 0.11%)</title><rect x="16.4368%" y="693" width="0.1072%" height="15" fill="rgb(220,20,13)" fg:x="9810" fg:w="64"/><text x="16.6868%" y="703.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (27 samples, 0.05%)</title><rect x="17.1238%" y="661" width="0.0452%" height="15" fill="rgb(210,164,35)" fg:x="10220" fg:w="27"/><text x="17.3738%" y="671.50"></text></g><g><title>__rust_alloc (6 samples, 0.01%)</title><rect x="17.2109%" y="645" width="0.0101%" height="15" fill="rgb(248,109,41)" fg:x="10272" fg:w="6"/><text x="17.4609%" y="655.50"></text></g><g><title>core::ptr::read_volatile (9 samples, 0.02%)</title><rect x="17.2227%" y="645" width="0.0151%" height="15" fill="rgb(238,23,50)" fg:x="10279" fg:w="9"/><text x="17.4727%" y="655.50"></text></g><g><title>core::ptr::read_volatile::runtime (9 samples, 0.02%)</title><rect x="17.2227%" y="629" width="0.0151%" height="15" fill="rgb(211,48,49)" fg:x="10279" fg:w="9"/><text x="17.4727%" y="639.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (7 samples, 0.01%)</title><rect x="17.2260%" y="613" width="0.0117%" height="15" fill="rgb(223,36,21)" fg:x="10281" fg:w="7"/><text x="17.4760%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (7 samples, 0.01%)</title><rect x="17.2260%" y="597" width="0.0117%" height="15" fill="rgb(207,123,46)" fg:x="10281" fg:w="7"/><text x="17.4760%" y="607.50"></text></g><g><title>alloc::alloc::alloc (130 samples, 0.22%)</title><rect x="17.1774%" y="661" width="0.2178%" height="15" fill="rgb(240,218,32)" fg:x="10252" fg:w="130"/><text x="17.4274%" y="671.50"></text></g><g><title>malloc (94 samples, 0.16%)</title><rect x="17.2377%" y="645" width="0.1575%" height="15" fill="rgb(252,5,43)" fg:x="10288" fg:w="94"/><text x="17.4877%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (30 samples, 0.05%)</title><rect x="17.3952%" y="661" width="0.0503%" height="15" fill="rgb(252,84,19)" fg:x="10382" fg:w="30"/><text x="17.6452%" y="671.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (52 samples, 0.09%)</title><rect x="17.4455%" y="661" width="0.0871%" height="15" fill="rgb(243,152,39)" fg:x="10412" fg:w="52"/><text x="17.6955%" y="671.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (22 samples, 0.04%)</title><rect x="17.4958%" y="645" width="0.0369%" height="15" fill="rgb(234,160,15)" fg:x="10442" fg:w="22"/><text x="17.7458%" y="655.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (7 samples, 0.01%)</title><rect x="17.5326%" y="645" width="0.0117%" height="15" fill="rgb(237,34,20)" fg:x="10464" fg:w="7"/><text x="17.7826%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (419 samples, 0.70%)</title><rect x="16.9395%" y="693" width="0.7020%" height="15" fill="rgb(229,97,13)" fg:x="10110" fg:w="419"/><text x="17.1895%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (414 samples, 0.69%)</title><rect x="16.9479%" y="677" width="0.6937%" height="15" fill="rgb(234,71,50)" fg:x="10115" fg:w="414"/><text x="17.1979%" y="687.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (65 samples, 0.11%)</title><rect x="17.5326%" y="661" width="0.1089%" height="15" fill="rgb(253,155,4)" fg:x="10464" fg:w="65"/><text x="17.7826%" y="671.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (58 samples, 0.10%)</title><rect x="17.5444%" y="645" width="0.0972%" height="15" fill="rgb(222,185,37)" fg:x="10471" fg:w="58"/><text x="17.7944%" y="655.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (56 samples, 0.09%)</title><rect x="17.5477%" y="629" width="0.0938%" height="15" fill="rgb(251,177,13)" fg:x="10473" fg:w="56"/><text x="17.7977%" y="639.50"></text></g><g><title>core::alloc::layout::Layout::max_size_for_align (11 samples, 0.02%)</title><rect x="17.9130%" y="661" width="0.0184%" height="15" fill="rgb(250,179,40)" fg:x="10691" fg:w="11"/><text x="18.1630%" y="671.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (174 samples, 0.29%)</title><rect x="17.6432%" y="677" width="0.2915%" height="15" fill="rgb(242,44,2)" fg:x="10530" fg:w="174"/><text x="17.8932%" y="687.50"></text></g><g><title>core::alloc::layout::Layout::array (181 samples, 0.30%)</title><rect x="17.6415%" y="693" width="0.3033%" height="15" fill="rgb(216,177,13)" fg:x="10529" fg:w="181"/><text x="17.8915%" y="703.50"></text></g><g><title>core::ptr::alignment::Alignment::of (6 samples, 0.01%)</title><rect x="17.9348%" y="677" width="0.0101%" height="15" fill="rgb(216,106,43)" fg:x="10704" fg:w="6"/><text x="18.1848%" y="687.50"></text></g><g><title>core::mem::align_of (6 samples, 0.01%)</title><rect x="17.9348%" y="661" width="0.0101%" height="15" fill="rgb(216,183,2)" fg:x="10704" fg:w="6"/><text x="18.1848%" y="671.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (22 samples, 0.04%)</title><rect x="17.9448%" y="693" width="0.0369%" height="15" fill="rgb(249,75,3)" fg:x="10710" fg:w="22"/><text x="18.1948%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (885 samples, 1.48%)</title><rect x="16.5441%" y="741" width="1.4828%" height="15" fill="rgb(219,67,39)" fg:x="9874" fg:w="885"/><text x="16.7941%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (855 samples, 1.43%)</title><rect x="16.5943%" y="725" width="1.4326%" height="15" fill="rgb(253,228,2)" fg:x="9904" fg:w="855"/><text x="16.8443%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (854 samples, 1.43%)</title><rect x="16.5960%" y="709" width="1.4309%" height="15" fill="rgb(235,138,27)" fg:x="9905" fg:w="854"/><text x="16.8460%" y="719.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (27 samples, 0.05%)</title><rect x="17.9817%" y="693" width="0.0452%" height="15" fill="rgb(236,97,51)" fg:x="10732" fg:w="27"/><text x="18.2317%" y="703.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (293 samples, 0.49%)</title><rect x="18.0370%" y="741" width="0.4909%" height="15" fill="rgb(240,80,30)" fg:x="10765" fg:w="293"/><text x="18.2870%" y="751.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::new (167 samples, 0.28%)</title><rect x="18.2481%" y="725" width="0.2798%" height="15" fill="rgb(230,178,19)" fg:x="10891" fg:w="167"/><text x="18.4981%" y="735.50"></text></g><g><title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (51 samples, 0.09%)</title><rect x="18.4424%" y="709" width="0.0855%" height="15" fill="rgb(210,190,27)" fg:x="11007" fg:w="51"/><text x="18.6924%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7,295 samples, 12.22%)</title><rect x="6.3217%" y="805" width="12.2229%" height="15" fill="rgb(222,107,31)" fg:x="3773" fg:w="7295"/><text x="6.5717%" y="815.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5,999 samples, 10.05%)</title><rect x="8.4932%" y="789" width="10.0514%" height="15" fill="rgb(216,127,34)" fg:x="5069" fg:w="5999"/><text x="8.7432%" y="799.50">alloc::slice::&lt;..</text></g><g><title>alloc::slice::hack::to_vec (5,999 samples, 10.05%)</title><rect x="8.4932%" y="773" width="10.0514%" height="15" fill="rgb(234,116,52)" fg:x="5069" fg:w="5999"/><text x="8.7432%" y="783.50">alloc::slice::h..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5,999 samples, 10.05%)</title><rect x="8.4932%" y="757" width="10.0514%" height="15" fill="rgb(222,124,15)" fg:x="5069" fg:w="5999"/><text x="8.7432%" y="767.50">&lt;T as alloc::sl..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (10 samples, 0.02%)</title><rect x="18.5279%" y="741" width="0.0168%" height="15" fill="rgb(231,179,28)" fg:x="11058" fg:w="10"/><text x="18.7779%" y="751.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (10 samples, 0.02%)</title><rect x="18.5279%" y="725" width="0.0168%" height="15" fill="rgb(226,93,45)" fg:x="11058" fg:w="10"/><text x="18.7779%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (35 samples, 0.06%)</title><rect x="18.6552%" y="789" width="0.0586%" height="15" fill="rgb(215,8,51)" fg:x="11134" fg:w="35"/><text x="18.9052%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (35 samples, 0.06%)</title><rect x="18.6552%" y="773" width="0.0586%" height="15" fill="rgb(223,106,5)" fg:x="11134" fg:w="35"/><text x="18.9052%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (29 samples, 0.05%)</title><rect x="18.7139%" y="789" width="0.0486%" height="15" fill="rgb(250,191,5)" fg:x="11169" fg:w="29"/><text x="18.9639%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (135 samples, 0.23%)</title><rect x="18.5446%" y="805" width="0.2262%" height="15" fill="rgb(242,132,44)" fg:x="11068" fg:w="135"/><text x="18.7946%" y="815.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (25 samples, 0.04%)</title><rect x="19.2283%" y="725" width="0.0419%" height="15" fill="rgb(251,152,29)" fg:x="11476" fg:w="25"/><text x="19.4783%" y="735.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (39 samples, 0.07%)</title><rect x="19.6136%" y="709" width="0.0653%" height="15" fill="rgb(218,179,5)" fg:x="11706" fg:w="39"/><text x="19.8636%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (53 samples, 0.09%)</title><rect x="19.6823%" y="709" width="0.0888%" height="15" fill="rgb(227,67,19)" fg:x="11747" fg:w="53"/><text x="19.9323%" y="719.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (212 samples, 0.36%)</title><rect x="19.7711%" y="709" width="0.3552%" height="15" fill="rgb(233,119,31)" fg:x="11800" fg:w="212"/><text x="20.0211%" y="719.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (173 samples, 0.29%)</title><rect x="19.8365%" y="693" width="0.2899%" height="15" fill="rgb(241,120,22)" fg:x="11839" fg:w="173"/><text x="20.0865%" y="703.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (72 samples, 0.12%)</title><rect x="20.0057%" y="677" width="0.1206%" height="15" fill="rgb(224,102,30)" fg:x="11940" fg:w="72"/><text x="20.2557%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (30 samples, 0.05%)</title><rect x="20.0761%" y="661" width="0.0503%" height="15" fill="rgb(210,164,37)" fg:x="11982" fg:w="30"/><text x="20.3261%" y="671.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (15 samples, 0.03%)</title><rect x="20.1448%" y="693" width="0.0251%" height="15" fill="rgb(226,191,16)" fg:x="12023" fg:w="15"/><text x="20.3948%" y="703.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::default::Default&gt;::default (610 samples, 1.02%)</title><rect x="19.1897%" y="773" width="1.0221%" height="15" fill="rgb(214,40,45)" fg:x="11453" fg:w="610"/><text x="19.4397%" y="783.50"></text></g><g><title>std::collections::hash::map::RandomState::new (605 samples, 1.01%)</title><rect x="19.1981%" y="757" width="1.0137%" height="15" fill="rgb(244,29,26)" fg:x="11458" fg:w="605"/><text x="19.4481%" y="767.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (605 samples, 1.01%)</title><rect x="19.1981%" y="741" width="1.0137%" height="15" fill="rgb(216,16,5)" fg:x="11458" fg:w="605"/><text x="19.4481%" y="751.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (562 samples, 0.94%)</title><rect x="19.2701%" y="725" width="0.9416%" height="15" fill="rgb(249,76,35)" fg:x="11501" fg:w="562"/><text x="19.5201%" y="735.50"></text></g><g><title>std::collections::hash::map::RandomState::new::_{{closure}} (51 samples, 0.09%)</title><rect x="20.1263%" y="709" width="0.0855%" height="15" fill="rgb(207,11,44)" fg:x="12012" fg:w="51"/><text x="20.3763%" y="719.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (25 samples, 0.04%)</title><rect x="20.1699%" y="693" width="0.0419%" height="15" fill="rgb(228,190,49)" fg:x="12038" fg:w="25"/><text x="20.4199%" y="703.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (25 samples, 0.04%)</title><rect x="20.1699%" y="677" width="0.0419%" height="15" fill="rgb(214,173,12)" fg:x="12038" fg:w="25"/><text x="20.4199%" y="687.50"></text></g><g><title>core::mem::replace (25 samples, 0.04%)</title><rect x="20.1699%" y="661" width="0.0419%" height="15" fill="rgb(218,26,35)" fg:x="12038" fg:w="25"/><text x="20.4199%" y="671.50"></text></g><g><title>core::ptr::write (25 samples, 0.04%)</title><rect x="20.1699%" y="645" width="0.0419%" height="15" fill="rgb(220,200,19)" fg:x="12038" fg:w="25"/><text x="20.4199%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (115 samples, 0.19%)</title><rect x="20.6122%" y="725" width="0.1927%" height="15" fill="rgb(239,95,49)" fg:x="12302" fg:w="115"/><text x="20.8622%" y="735.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (111 samples, 0.19%)</title><rect x="20.6189%" y="709" width="0.1860%" height="15" fill="rgb(235,85,53)" fg:x="12306" fg:w="111"/><text x="20.8689%" y="719.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (48 samples, 0.08%)</title><rect x="20.7245%" y="693" width="0.0804%" height="15" fill="rgb(233,133,31)" fg:x="12369" fg:w="48"/><text x="20.9745%" y="703.50"></text></g><g><title>core::mem::zeroed (25 samples, 0.04%)</title><rect x="23.1992%" y="661" width="0.0419%" height="15" fill="rgb(218,25,20)" fg:x="13846" fg:w="25"/><text x="23.4492%" y="671.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::zeroed (25 samples, 0.04%)</title><rect x="23.1992%" y="645" width="0.0419%" height="15" fill="rgb(252,210,38)" fg:x="13846" fg:w="25"/><text x="23.4492%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (25 samples, 0.04%)</title><rect x="23.1992%" y="629" width="0.0419%" height="15" fill="rgb(242,134,21)" fg:x="13846" fg:w="25"/><text x="23.4492%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (10 samples, 0.02%)</title><rect x="23.2411%" y="661" width="0.0168%" height="15" fill="rgb(213,28,48)" fg:x="13871" fg:w="10"/><text x="23.4911%" y="671.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (17 samples, 0.03%)</title><rect x="23.2579%" y="629" width="0.0285%" height="15" fill="rgb(250,196,2)" fg:x="13881" fg:w="17"/><text x="23.5079%" y="639.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (17 samples, 0.03%)</title><rect x="23.2579%" y="613" width="0.0285%" height="15" fill="rgb(227,5,17)" fg:x="13881" fg:w="17"/><text x="23.5079%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_byte_sub (23 samples, 0.04%)</title><rect x="23.2579%" y="661" width="0.0385%" height="15" fill="rgb(221,226,24)" fg:x="13881" fg:w="23"/><text x="23.5079%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_sub (23 samples, 0.04%)</title><rect x="23.2579%" y="645" width="0.0385%" height="15" fill="rgb(211,5,48)" fg:x="13881" fg:w="23"/><text x="23.5079%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::wrapping_offset (6 samples, 0.01%)</title><rect x="23.2864%" y="629" width="0.0101%" height="15" fill="rgb(219,150,6)" fg:x="13898" fg:w="6"/><text x="23.5364%" y="639.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (283 samples, 0.47%)</title><rect x="22.9144%" y="677" width="0.4742%" height="15" fill="rgb(251,46,16)" fg:x="13676" fg:w="283"/><text x="23.1644%" y="687.50"></text></g><g><title>core::ptr::read (55 samples, 0.09%)</title><rect x="23.2964%" y="661" width="0.0922%" height="15" fill="rgb(220,204,40)" fg:x="13904" fg:w="55"/><text x="23.5464%" y="671.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend::_{{closure}} (165 samples, 0.28%)</title><rect x="24.5363%" y="661" width="0.2765%" height="15" fill="rgb(211,85,2)" fg:x="14644" fg:w="165"/><text x="24.7863%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (81 samples, 0.14%)</title><rect x="28.8105%" y="517" width="0.1357%" height="15" fill="rgb(229,17,7)" fg:x="17195" fg:w="81"/><text x="29.0605%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,141 samples, 1.91%)</title><rect x="27.0747%" y="533" width="1.9118%" height="15" fill="rgb(239,72,28)" fg:x="16159" fg:w="1141"/><text x="27.3247%" y="543.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (24 samples, 0.04%)</title><rect x="28.9463%" y="517" width="0.0402%" height="15" fill="rgb(230,47,54)" fg:x="17276" fg:w="24"/><text x="29.1963%" y="527.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (228 samples, 0.38%)</title><rect x="34.4252%" y="517" width="0.3820%" height="15" fill="rgb(214,50,8)" fg:x="20546" fg:w="228"/><text x="34.6752%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (5,107 samples, 8.56%)</title><rect x="26.2520%" y="581" width="8.5569%" height="15" fill="rgb(216,198,43)" fg:x="15668" fg:w="5107"/><text x="26.5020%" y="591.50">&lt;std::collec..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5,086 samples, 8.52%)</title><rect x="26.2872%" y="565" width="8.5217%" height="15" fill="rgb(234,20,35)" fg:x="15689" fg:w="5086"/><text x="26.5372%" y="575.50">&lt;core::hash:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5,086 samples, 8.52%)</title><rect x="26.2872%" y="549" width="8.5217%" height="15" fill="rgb(254,45,19)" fg:x="15689" fg:w="5086"/><text x="26.5372%" y="559.50">&lt;core::hash:..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3,475 samples, 5.82%)</title><rect x="28.9865%" y="533" width="5.8224%" height="15" fill="rgb(219,14,44)" fg:x="17300" fg:w="3475"/><text x="29.2365%" y="543.50">&lt;core::..</text></g><g><title>[libc.so.6] (671 samples, 1.12%)</title><rect x="34.9429%" y="565" width="1.1243%" height="15" fill="rgb(217,220,26)" fg:x="20855" fg:w="671"/><text x="35.1929%" y="575.50"></text></g><g><title>[libc.so.6] (629 samples, 1.05%)</title><rect x="36.0672%" y="549" width="1.0539%" height="15" fill="rgb(213,158,28)" fg:x="21526" fg:w="629"/><text x="36.3172%" y="559.50"></text></g><g><title>[libc.so.6] (882 samples, 1.48%)</title><rect x="37.2267%" y="533" width="1.4778%" height="15" fill="rgb(252,51,52)" fg:x="22218" fg:w="882"/><text x="37.4767%" y="543.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (208 samples, 0.35%)</title><rect x="38.7045%" y="533" width="0.3485%" height="15" fill="rgb(246,89,16)" fg:x="23100" fg:w="208"/><text x="38.9545%" y="543.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1,176 samples, 1.97%)</title><rect x="37.1211%" y="549" width="1.9704%" height="15" fill="rgb(216,158,49)" fg:x="22155" fg:w="1176"/><text x="37.3711%" y="559.50">c..</text></g><g><title>memcpy@plt (23 samples, 0.04%)</title><rect x="39.0530%" y="533" width="0.0385%" height="15" fill="rgb(236,107,19)" fg:x="23308" fg:w="23"/><text x="39.3030%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (2,579 samples, 4.32%)</title><rect x="34.8089%" y="581" width="4.3212%" height="15" fill="rgb(228,185,30)" fg:x="20775" fg:w="2579"/><text x="35.0589%" y="591.50">&lt;std:..</text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1,828 samples, 3.06%)</title><rect x="36.0672%" y="565" width="3.0628%" height="15" fill="rgb(246,134,8)" fg:x="21526" fg:w="1828"/><text x="36.3172%" y="575.50">cor..</text></g><g><title>memcpy@plt (23 samples, 0.04%)</title><rect x="39.0915%" y="549" width="0.0385%" height="15" fill="rgb(214,143,50)" fg:x="23331" fg:w="23"/><text x="39.3415%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (38 samples, 0.06%)</title><rect x="39.2273%" y="549" width="0.0637%" height="15" fill="rgb(228,75,8)" fg:x="23412" fg:w="38"/><text x="39.4773%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (38 samples, 0.06%)</title><rect x="39.2273%" y="533" width="0.0637%" height="15" fill="rgb(207,175,4)" fg:x="23412" fg:w="38"/><text x="39.4773%" y="543.50"></text></g><g><title>core::slice::raw::from_raw_parts (14 samples, 0.02%)</title><rect x="39.2675%" y="517" width="0.0235%" height="15" fill="rgb(205,108,24)" fg:x="23436" fg:w="14"/><text x="39.5175%" y="527.50"></text></g><g><title>core::ptr::slice_from_raw_parts (14 samples, 0.02%)</title><rect x="39.2675%" y="501" width="0.0235%" height="15" fill="rgb(244,120,49)" fg:x="23436" fg:w="14"/><text x="39.5175%" y="511.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (14 samples, 0.02%)</title><rect x="39.2675%" y="485" width="0.0235%" height="15" fill="rgb(223,47,38)" fg:x="23436" fg:w="14"/><text x="39.5175%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1,115 samples, 1.87%)</title><rect x="41.2211%" y="469" width="1.8682%" height="15" fill="rgb(229,179,11)" fg:x="24602" fg:w="1115"/><text x="41.4711%" y="479.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (79 samples, 0.13%)</title><rect x="42.9570%" y="453" width="0.1324%" height="15" fill="rgb(231,122,1)" fg:x="25638" fg:w="79"/><text x="43.2070%" y="463.50"></text></g><g><title>core::hash::sip::u8to64_le (62 samples, 0.10%)</title><rect x="43.0893%" y="469" width="0.1039%" height="15" fill="rgb(245,119,9)" fg:x="25717" fg:w="62"/><text x="43.3393%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.03%)</title><rect x="43.1664%" y="453" width="0.0268%" height="15" fill="rgb(241,163,25)" fg:x="25763" fg:w="16"/><text x="43.4164%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2,353 samples, 3.94%)</title><rect x="39.3630%" y="485" width="3.9425%" height="15" fill="rgb(217,214,3)" fg:x="23493" fg:w="2353"/><text x="39.6130%" y="495.50">&lt;cor..</text></g><g><title>core::intrinsics::copy_nonoverlapping (67 samples, 0.11%)</title><rect x="43.1932%" y="469" width="0.1123%" height="15" fill="rgb(240,86,28)" fg:x="25779" fg:w="67"/><text x="43.4432%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (82 samples, 0.14%)</title><rect x="44.7464%" y="437" width="0.1374%" height="15" fill="rgb(215,47,9)" fg:x="26706" fg:w="82"/><text x="44.9964%" y="447.50"></text></g><g><title>hashbrown::map::make_hash (11,337 samples, 19.00%)</title><rect x="25.9153%" y="613" width="18.9954%" height="15" fill="rgb(252,25,45)" fg:x="15467" fg:w="11337"/><text x="26.1653%" y="623.50">hashbrown::map::make_hash</text></g><g><title>core::hash::BuildHasher::hash_one (11,336 samples, 18.99%)</title><rect x="25.9169%" y="597" width="18.9937%" height="15" fill="rgb(251,164,9)" fg:x="15468" fg:w="11336"/><text x="26.1669%" y="607.50">core::hash::BuildHasher::hash_..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3,450 samples, 5.78%)</title><rect x="39.1301%" y="581" width="5.7805%" height="15" fill="rgb(233,194,0)" fg:x="23354" fg:w="3450"/><text x="39.3801%" y="591.50">core::h..</text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (3,436 samples, 5.76%)</title><rect x="39.1535%" y="565" width="5.7571%" height="15" fill="rgb(249,111,24)" fg:x="23368" fg:w="3436"/><text x="39.4035%" y="575.50">&lt;alloc:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (3,354 samples, 5.62%)</title><rect x="39.2909%" y="549" width="5.6197%" height="15" fill="rgb(250,223,3)" fg:x="23450" fg:w="3354"/><text x="39.5409%" y="559.50">core::h..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (3,354 samples, 5.62%)</title><rect x="39.2909%" y="533" width="5.6197%" height="15" fill="rgb(236,178,37)" fg:x="23450" fg:w="3354"/><text x="39.5409%" y="543.50">&lt;std::c..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (3,336 samples, 5.59%)</title><rect x="39.3211%" y="517" width="5.5895%" height="15" fill="rgb(241,158,50)" fg:x="23468" fg:w="3336"/><text x="39.5711%" y="527.50">&lt;core::..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (3,311 samples, 5.55%)</title><rect x="39.3630%" y="501" width="5.5476%" height="15" fill="rgb(213,121,41)" fg:x="23493" fg:w="3311"/><text x="39.6130%" y="511.50">&lt;core::..</text></g><g><title>core::hash::Hasher::write_u8 (958 samples, 1.61%)</title><rect x="43.3055%" y="485" width="1.6051%" height="15" fill="rgb(240,92,3)" fg:x="25846" fg:w="958"/><text x="43.5555%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (928 samples, 1.55%)</title><rect x="43.3557%" y="469" width="1.5549%" height="15" fill="rgb(205,123,3)" fg:x="25876" fg:w="928"/><text x="43.6057%" y="479.50"></text></g><g><title>core::hash::sip::u8to64_le (581 samples, 0.97%)</title><rect x="43.9371%" y="453" width="0.9735%" height="15" fill="rgb(205,97,47)" fg:x="26223" fg:w="581"/><text x="44.1871%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (16 samples, 0.03%)</title><rect x="44.8838%" y="437" width="0.0268%" height="15" fill="rgb(247,152,14)" fg:x="26788" fg:w="16"/><text x="45.1338%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (16 samples, 0.03%)</title><rect x="44.8838%" y="421" width="0.0268%" height="15" fill="rgb(248,195,53)" fg:x="26788" fg:w="16"/><text x="45.1338%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const [T]&gt;::as_ptr (16 samples, 0.03%)</title><rect x="44.8838%" y="405" width="0.0268%" height="15" fill="rgb(226,201,16)" fg:x="26788" fg:w="16"/><text x="45.1338%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (17 samples, 0.03%)</title><rect x="45.1016%" y="597" width="0.0285%" height="15" fill="rgb(205,98,0)" fg:x="26918" fg:w="17"/><text x="45.3516%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (118 samples, 0.20%)</title><rect x="45.1301%" y="597" width="0.1977%" height="15" fill="rgb(214,191,48)" fg:x="26935" fg:w="118"/><text x="45.3801%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (172 samples, 0.29%)</title><rect x="46.6716%" y="581" width="0.2882%" height="15" fill="rgb(237,112,39)" fg:x="27855" fg:w="172"/><text x="46.9216%" y="591.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (28 samples, 0.05%)</title><rect x="47.2731%" y="565" width="0.0469%" height="15" fill="rgb(247,203,27)" fg:x="28214" fg:w="28"/><text x="47.5231%" y="575.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (41 samples, 0.07%)</title><rect x="47.3250%" y="549" width="0.0687%" height="15" fill="rgb(235,124,28)" fg:x="28245" fg:w="41"/><text x="47.5750%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (262 samples, 0.44%)</title><rect x="46.9598%" y="581" width="0.4390%" height="15" fill="rgb(208,207,46)" fg:x="28027" fg:w="262"/><text x="47.2098%" y="591.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (47 samples, 0.08%)</title><rect x="47.3200%" y="565" width="0.0787%" height="15" fill="rgb(234,176,4)" fg:x="28242" fg:w="47"/><text x="47.5700%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (11 samples, 0.02%)</title><rect x="47.3988%" y="581" width="0.0184%" height="15" fill="rgb(230,133,28)" fg:x="28289" fg:w="11"/><text x="47.6488%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (11 samples, 0.02%)</title><rect x="47.3988%" y="565" width="0.0184%" height="15" fill="rgb(211,137,40)" fg:x="28289" fg:w="11"/><text x="47.6488%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_unchecked (19 samples, 0.03%)</title><rect x="47.4172%" y="581" width="0.0318%" height="15" fill="rgb(254,35,13)" fg:x="28300" fg:w="19"/><text x="47.6672%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (14 samples, 0.02%)</title><rect x="47.4792%" y="485" width="0.0235%" height="15" fill="rgb(225,49,51)" fg:x="28337" fg:w="14"/><text x="47.7292%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (10 samples, 0.02%)</title><rect x="47.4859%" y="469" width="0.0168%" height="15" fill="rgb(251,10,15)" fg:x="28341" fg:w="10"/><text x="47.7359%" y="479.50"></text></g><g><title>core::slice::raw::from_raw_parts (9 samples, 0.02%)</title><rect x="47.4876%" y="453" width="0.0151%" height="15" fill="rgb(228,207,15)" fg:x="28342" fg:w="9"/><text x="47.7376%" y="463.50"></text></g><g><title>core::ptr::slice_from_raw_parts (9 samples, 0.02%)</title><rect x="47.4876%" y="437" width="0.0151%" height="15" fill="rgb(241,99,19)" fg:x="28342" fg:w="9"/><text x="47.7376%" y="447.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (8 samples, 0.01%)</title><rect x="47.4892%" y="421" width="0.0134%" height="15" fill="rgb(207,104,49)" fg:x="28343" fg:w="8"/><text x="47.7392%" y="431.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (47 samples, 0.08%)</title><rect x="47.4641%" y="565" width="0.0787%" height="15" fill="rgb(234,99,18)" fg:x="28328" fg:w="47"/><text x="47.7141%" y="575.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (47 samples, 0.08%)</title><rect x="47.4641%" y="549" width="0.0787%" height="15" fill="rgb(213,191,49)" fg:x="28328" fg:w="47"/><text x="47.7141%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (42 samples, 0.07%)</title><rect x="47.4725%" y="533" width="0.0704%" height="15" fill="rgb(210,226,19)" fg:x="28333" fg:w="42"/><text x="47.7225%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (41 samples, 0.07%)</title><rect x="47.4742%" y="517" width="0.0687%" height="15" fill="rgb(229,97,18)" fg:x="28334" fg:w="41"/><text x="47.7242%" y="527.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (40 samples, 0.07%)</title><rect x="47.4758%" y="501" width="0.0670%" height="15" fill="rgb(211,167,15)" fg:x="28335" fg:w="40"/><text x="47.7258%" y="511.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (24 samples, 0.04%)</title><rect x="47.5026%" y="485" width="0.0402%" height="15" fill="rgb(210,169,34)" fg:x="28351" fg:w="24"/><text x="47.7526%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (24 samples, 0.04%)</title><rect x="47.5026%" y="469" width="0.0402%" height="15" fill="rgb(241,121,31)" fg:x="28351" fg:w="24"/><text x="47.7526%" y="479.50"></text></g><g><title>[libc.so.6] (13 samples, 0.02%)</title><rect x="47.5211%" y="453" width="0.0218%" height="15" fill="rgb(232,40,11)" fg:x="28362" fg:w="13"/><text x="47.7711%" y="463.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (10 samples, 0.02%)</title><rect x="47.5496%" y="549" width="0.0168%" height="15" fill="rgb(205,86,26)" fg:x="28379" fg:w="10"/><text x="47.7996%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (72 samples, 0.12%)</title><rect x="47.4490%" y="581" width="0.1206%" height="15" fill="rgb(231,126,28)" fg:x="28319" fg:w="72"/><text x="47.6990%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (13 samples, 0.02%)</title><rect x="47.5479%" y="565" width="0.0218%" height="15" fill="rgb(219,221,18)" fg:x="28378" fg:w="13"/><text x="47.7979%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::ctrl (130 samples, 0.22%)</title><rect x="47.5697%" y="581" width="0.2178%" height="15" fill="rgb(211,40,0)" fg:x="28391" fg:w="130"/><text x="47.8197%" y="591.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (129 samples, 0.22%)</title><rect x="47.5713%" y="565" width="0.2161%" height="15" fill="rgb(239,85,43)" fg:x="28392" fg:w="129"/><text x="47.8213%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (63 samples, 0.11%)</title><rect x="48.5147%" y="565" width="0.1056%" height="15" fill="rgb(231,55,21)" fg:x="28955" fg:w="63"/><text x="48.7647%" y="575.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (268 samples, 0.45%)</title><rect x="48.9888%" y="549" width="0.4490%" height="15" fill="rgb(225,184,43)" fg:x="29238" fg:w="268"/><text x="49.2388%" y="559.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (704 samples, 1.18%)</title><rect x="48.6202%" y="565" width="1.1796%" height="15" fill="rgb(251,158,41)" fg:x="29018" fg:w="704"/><text x="48.8702%" y="575.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (216 samples, 0.36%)</title><rect x="49.4379%" y="549" width="0.3619%" height="15" fill="rgb(234,159,37)" fg:x="29506" fg:w="216"/><text x="49.6879%" y="559.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (69 samples, 0.12%)</title><rect x="49.6842%" y="533" width="0.1156%" height="15" fill="rgb(216,204,22)" fg:x="29653" fg:w="69"/><text x="49.9342%" y="543.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (36 samples, 0.06%)</title><rect x="52.3047%" y="533" width="0.0603%" height="15" fill="rgb(214,17,3)" fg:x="31217" fg:w="36"/><text x="52.5547%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (2,733 samples, 4.58%)</title><rect x="47.7875%" y="581" width="4.5792%" height="15" fill="rgb(212,111,17)" fg:x="28521" fg:w="2733"/><text x="48.0375%" y="591.50">hashb..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1,532 samples, 2.57%)</title><rect x="49.7998%" y="565" width="2.5669%" height="15" fill="rgb(221,157,24)" fg:x="29722" fg:w="1532"/><text x="50.0498%" y="575.50">ha..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,509 samples, 2.53%)</title><rect x="49.8383%" y="549" width="2.5284%" height="15" fill="rgb(252,16,13)" fg:x="29745" fg:w="1509"/><text x="50.0883%" y="559.50">co..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_unchecked (6 samples, 0.01%)</title><rect x="52.5560%" y="565" width="0.0101%" height="15" fill="rgb(221,62,2)" fg:x="31367" fg:w="6"/><text x="52.8060%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_bucket_full (30 samples, 0.05%)</title><rect x="52.5694%" y="565" width="0.0503%" height="15" fill="rgb(247,87,22)" fg:x="31375" fg:w="30"/><text x="52.8194%" y="575.50"></text></g><g><title>hashbrown::raw::is_full (30 samples, 0.05%)</title><rect x="52.5694%" y="549" width="0.0503%" height="15" fill="rgb(215,73,9)" fg:x="31375" fg:w="30"/><text x="52.8194%" y="559.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (13 samples, 0.02%)</title><rect x="52.6297%" y="549" width="0.0218%" height="15" fill="rgb(207,175,33)" fg:x="31411" fg:w="13"/><text x="52.8797%" y="559.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (26 samples, 0.04%)</title><rect x="52.6197%" y="565" width="0.0436%" height="15" fill="rgb(243,129,54)" fg:x="31405" fg:w="26"/><text x="52.8697%" y="575.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (7 samples, 0.01%)</title><rect x="52.6515%" y="549" width="0.0117%" height="15" fill="rgb(227,119,45)" fg:x="31424" fg:w="7"/><text x="52.9015%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fix_insert_slot (218 samples, 0.37%)</title><rect x="52.3667%" y="581" width="0.3653%" height="15" fill="rgb(205,109,36)" fg:x="31254" fg:w="218"/><text x="52.6167%" y="591.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (41 samples, 0.07%)</title><rect x="52.6632%" y="565" width="0.0687%" height="15" fill="rgb(205,6,39)" fg:x="31431" fg:w="41"/><text x="52.9132%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (41 samples, 0.07%)</title><rect x="52.6632%" y="549" width="0.0687%" height="15" fill="rgb(221,32,16)" fg:x="31431" fg:w="41"/><text x="52.9132%" y="559.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::any_bit_set (21 samples, 0.04%)</title><rect x="52.7319%" y="581" width="0.0352%" height="15" fill="rgb(228,144,50)" fg:x="31472" fg:w="21"/><text x="52.9819%" y="591.50"></text></g><g><title>hashbrown::raw::h2 (29 samples, 0.05%)</title><rect x="52.7671%" y="581" width="0.0486%" height="15" fill="rgb(229,201,53)" fg:x="31493" fg:w="29"/><text x="53.0171%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_undefined_si128 (71 samples, 0.12%)</title><rect x="54.6119%" y="549" width="0.1190%" height="15" fill="rgb(249,153,27)" fg:x="32594" fg:w="71"/><text x="54.8619%" y="559.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1,212 samples, 2.03%)</title><rect x="52.8157%" y="581" width="2.0307%" height="15" fill="rgb(227,106,25)" fg:x="31522" fg:w="1212"/><text x="53.0657%" y="591.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1,019 samples, 1.71%)</title><rect x="53.1391%" y="565" width="1.7074%" height="15" fill="rgb(230,65,29)" fg:x="31715" fg:w="1019"/><text x="53.3891%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (69 samples, 0.12%)</title><rect x="54.7308%" y="549" width="0.1156%" height="15" fill="rgb(221,57,46)" fg:x="32665" fg:w="69"/><text x="54.9808%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (464 samples, 0.78%)</title><rect x="55.9724%" y="565" width="0.7774%" height="15" fill="rgb(229,161,17)" fg:x="33406" fg:w="464"/><text x="56.2224%" y="575.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (122 samples, 0.20%)</title><rect x="56.5454%" y="549" width="0.2044%" height="15" fill="rgb(222,213,11)" fg:x="33748" fg:w="122"/><text x="56.7954%" y="559.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (37 samples, 0.06%)</title><rect x="58.7739%" y="549" width="0.0620%" height="15" fill="rgb(235,35,13)" fg:x="35078" fg:w="37"/><text x="59.0239%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,355 samples, 2.27%)</title><rect x="56.7498%" y="565" width="2.2703%" height="15" fill="rgb(233,158,34)" fg:x="33870" fg:w="1355"/><text x="56.9998%" y="575.50">c..</text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (110 samples, 0.18%)</title><rect x="58.8358%" y="549" width="0.1843%" height="15" fill="rgb(215,151,48)" fg:x="35115" fg:w="110"/><text x="59.0858%" y="559.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3,353 samples, 5.62%)</title><rect x="54.8464%" y="581" width="5.6180%" height="15" fill="rgb(229,84,14)" fg:x="32734" fg:w="3353"/><text x="55.0964%" y="591.50">hashbro..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (862 samples, 1.44%)</title><rect x="59.0202%" y="565" width="1.4443%" height="15" fill="rgb(229,68,14)" fg:x="35225" fg:w="862"/><text x="59.2702%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (831 samples, 1.39%)</title><rect x="59.0721%" y="549" width="1.3924%" height="15" fill="rgb(243,106,26)" fg:x="35256" fg:w="831"/><text x="59.3221%" y="559.50"></text></g><g><title>core::core_arch::simd::i8x16::new (47 samples, 0.08%)</title><rect x="60.3857%" y="533" width="0.0787%" height="15" fill="rgb(206,45,38)" fg:x="36040" fg:w="47"/><text x="60.6357%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (468 samples, 0.78%)</title><rect x="61.3843%" y="549" width="0.7841%" height="15" fill="rgb(226,6,15)" fg:x="36636" fg:w="468"/><text x="61.6343%" y="559.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (116 samples, 0.19%)</title><rect x="61.9741%" y="533" width="0.1944%" height="15" fill="rgb(232,22,54)" fg:x="36988" fg:w="116"/><text x="62.2241%" y="543.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (43 samples, 0.07%)</title><rect x="64.2109%" y="533" width="0.0720%" height="15" fill="rgb(229,222,32)" fg:x="38323" fg:w="43"/><text x="64.4609%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1,370 samples, 2.30%)</title><rect x="62.1685%" y="549" width="2.2955%" height="15" fill="rgb(228,62,29)" fg:x="37104" fg:w="1370"/><text x="62.4185%" y="559.50">c..</text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (108 samples, 0.18%)</title><rect x="64.2830%" y="533" width="0.1810%" height="15" fill="rgb(251,103,34)" fg:x="38366" fg:w="108"/><text x="64.5330%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (12,622 samples, 21.15%)</title><rect x="44.9106%" y="613" width="21.1484%" height="15" fill="rgb(233,12,30)" fg:x="26804" fg:w="12622"/><text x="45.1606%" y="623.50">hashbrown::raw::RawTable&lt;T,A&gt;::fi..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (12,373 samples, 20.73%)</title><rect x="45.3278%" y="597" width="20.7312%" height="15" fill="rgb(238,52,0)" fg:x="27053" fg:w="12373"/><text x="45.5778%" y="607.50">hashbrown::raw::RawTableInner&lt;A&gt;:..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (3,339 samples, 5.59%)</title><rect x="60.4645%" y="581" width="5.5946%" height="15" fill="rgb(223,98,5)" fg:x="36087" fg:w="3339"/><text x="60.7145%" y="591.50">hashbro..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3,314 samples, 5.55%)</title><rect x="60.5063%" y="565" width="5.5527%" height="15" fill="rgb(228,75,37)" fg:x="36112" fg:w="3314"/><text x="60.7563%" y="575.50">hashbro..</text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (952 samples, 1.60%)</title><rect x="64.4639%" y="549" width="1.5951%" height="15" fill="rgb(205,115,49)" fg:x="38474" fg:w="952"/><text x="64.7139%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (909 samples, 1.52%)</title><rect x="64.5360%" y="533" width="1.5230%" height="15" fill="rgb(250,154,43)" fg:x="38517" fg:w="909"/><text x="64.7860%" y="543.50"></text></g><g><title>core::core_arch::simd::i8x16::new (42 samples, 0.07%)</title><rect x="65.9886%" y="517" width="0.0704%" height="15" fill="rgb(226,43,29)" fg:x="39384" fg:w="42"/><text x="66.2386%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (270 samples, 0.45%)</title><rect x="66.3070%" y="581" width="0.4524%" height="15" fill="rgb(249,228,39)" fg:x="39574" fg:w="270"/><text x="66.5570%" y="591.50"></text></g><g><title>core::ptr::write (270 samples, 0.45%)</title><rect x="66.3070%" y="565" width="0.4524%" height="15" fill="rgb(216,79,43)" fg:x="39574" fg:w="270"/><text x="66.5570%" y="575.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (567 samples, 0.95%)</title><rect x="66.3070%" y="597" width="0.9500%" height="15" fill="rgb(228,95,12)" fg:x="39574" fg:w="567"/><text x="66.5570%" y="607.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (297 samples, 0.50%)</title><rect x="66.7594%" y="581" width="0.4976%" height="15" fill="rgb(249,221,15)" fg:x="39844" fg:w="297"/><text x="67.0094%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (258 samples, 0.43%)</title><rect x="66.8247%" y="565" width="0.4323%" height="15" fill="rgb(233,34,13)" fg:x="39883" fg:w="258"/><text x="67.0747%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (258 samples, 0.43%)</title><rect x="66.8247%" y="549" width="0.4323%" height="15" fill="rgb(214,103,39)" fg:x="39883" fg:w="258"/><text x="67.0747%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (23 samples, 0.04%)</title><rect x="69.3481%" y="565" width="0.0385%" height="15" fill="rgb(251,126,39)" fg:x="41389" fg:w="23"/><text x="69.5981%" y="575.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1,015 samples, 1.70%)</title><rect x="67.8803%" y="581" width="1.7007%" height="15" fill="rgb(214,216,36)" fg:x="40513" fg:w="1015"/><text x="68.1303%" y="591.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (116 samples, 0.19%)</title><rect x="69.3866%" y="565" width="0.1944%" height="15" fill="rgb(220,221,8)" fg:x="41412" fg:w="116"/><text x="69.6366%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::cast (22 samples, 0.04%)</title><rect x="69.6078%" y="565" width="0.0369%" height="15" fill="rgb(240,216,3)" fg:x="41544" fg:w="22"/><text x="69.8578%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1,472 samples, 2.47%)</title><rect x="67.2570%" y="597" width="2.4664%" height="15" fill="rgb(232,218,17)" fg:x="40141" fg:w="1472"/><text x="67.5070%" y="607.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::data_end (85 samples, 0.14%)</title><rect x="69.5810%" y="581" width="0.1424%" height="15" fill="rgb(229,163,45)" fg:x="41528" fg:w="85"/><text x="69.8310%" y="591.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (47 samples, 0.08%)</title><rect x="69.6446%" y="565" width="0.0787%" height="15" fill="rgb(231,110,42)" fg:x="41566" fg:w="47"/><text x="69.8946%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::ctrl (38 samples, 0.06%)</title><rect x="69.7234%" y="597" width="0.0637%" height="15" fill="rgb(208,170,48)" fg:x="41613" fg:w="38"/><text x="69.9734%" y="607.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (17 samples, 0.03%)</title><rect x="69.7586%" y="581" width="0.0285%" height="15" fill="rgb(239,116,25)" fg:x="41634" fg:w="17"/><text x="70.0086%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (17 samples, 0.03%)</title><rect x="69.9697%" y="549" width="0.0285%" height="15" fill="rgb(219,200,50)" fg:x="41760" fg:w="17"/><text x="70.2197%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (158 samples, 0.26%)</title><rect x="69.8859%" y="565" width="0.2647%" height="15" fill="rgb(245,200,0)" fg:x="41710" fg:w="158"/><text x="70.1359%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::ctrl (91 samples, 0.15%)</title><rect x="69.9982%" y="549" width="0.1525%" height="15" fill="rgb(245,119,33)" fg:x="41777" fg:w="91"/><text x="70.2482%" y="559.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (43 samples, 0.07%)</title><rect x="70.0786%" y="533" width="0.0720%" height="15" fill="rgb(231,125,12)" fg:x="41825" fg:w="43"/><text x="70.3286%" y="543.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (27,941 samples, 46.82%)</title><rect x="23.3886%" y="677" width="46.8157%" height="15" fill="rgb(216,96,41)" fg:x="13959" fg:w="27941"/><text x="23.6386%" y="687.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (27,091 samples, 45.39%)</title><rect x="24.8128%" y="661" width="45.3915%" height="15" fill="rgb(248,43,45)" fg:x="14809" fg:w="27091"/><text x="25.0628%" y="671.50">core::iter::traits::iterator::Iterator::for_each::call::_{{closure}}</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (26,906 samples, 45.08%)</title><rect x="25.1227%" y="645" width="45.0815%" height="15" fill="rgb(217,222,7)" fg:x="14994" fg:w="26906"/><text x="25.3727%" y="655.50">&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (26,747 samples, 44.82%)</title><rect x="25.3891%" y="629" width="44.8151%" height="15" fill="rgb(233,28,6)" fg:x="15153" fg:w="26747"/><text x="25.6391%" y="639.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (2,474 samples, 4.15%)</title><rect x="66.0590%" y="613" width="4.1452%" height="15" fill="rgb(231,218,15)" fg:x="39426" fg:w="2474"/><text x="66.3090%" y="623.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::record_item_insert_at (249 samples, 0.42%)</title><rect x="69.7870%" y="597" width="0.4172%" height="15" fill="rgb(226,171,48)" fg:x="41651" fg:w="249"/><text x="70.0370%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (190 samples, 0.32%)</title><rect x="69.8859%" y="581" width="0.3183%" height="15" fill="rgb(235,201,9)" fg:x="41710" fg:w="190"/><text x="70.1359%" y="591.50"></text></g><g><title>hashbrown::raw::h2 (32 samples, 0.05%)</title><rect x="70.1506%" y="565" width="0.0536%" height="15" fill="rgb(217,80,15)" fg:x="41868" fg:w="32"/><text x="70.4006%" y="575.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (186 samples, 0.31%)</title><rect x="70.7438%" y="597" width="0.3116%" height="15" fill="rgb(219,152,8)" fg:x="42222" fg:w="186"/><text x="70.9938%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (59 samples, 0.10%)</title><rect x="70.9566%" y="581" width="0.0989%" height="15" fill="rgb(243,107,38)" fg:x="42349" fg:w="59"/><text x="71.2066%" y="591.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (314 samples, 0.53%)</title><rect x="70.5913%" y="629" width="0.5261%" height="15" fill="rgb(231,17,5)" fg:x="42131" fg:w="314"/><text x="70.8413%" y="639.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (314 samples, 0.53%)</title><rect x="70.5913%" y="613" width="0.5261%" height="15" fill="rgb(209,25,54)" fg:x="42131" fg:w="314"/><text x="70.8413%" y="623.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (37 samples, 0.06%)</title><rect x="71.0554%" y="597" width="0.0620%" height="15" fill="rgb(219,0,2)" fg:x="42408" fg:w="37"/><text x="71.3054%" y="607.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (37 samples, 0.06%)</title><rect x="71.0554%" y="581" width="0.0620%" height="15" fill="rgb(246,9,5)" fg:x="42408" fg:w="37"/><text x="71.3054%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (17 samples, 0.03%)</title><rect x="71.0889%" y="565" width="0.0285%" height="15" fill="rgb(226,159,4)" fg:x="42428" fg:w="17"/><text x="71.3389%" y="575.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (428 samples, 0.72%)</title><rect x="70.4908%" y="645" width="0.7171%" height="15" fill="rgb(219,175,34)" fg:x="42071" fg:w="428"/><text x="70.7408%" y="655.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (54 samples, 0.09%)</title><rect x="71.1174%" y="629" width="0.0905%" height="15" fill="rgb(236,10,46)" fg:x="42445" fg:w="54"/><text x="71.3674%" y="639.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (54 samples, 0.09%)</title><rect x="71.1174%" y="613" width="0.0905%" height="15" fill="rgb(240,211,16)" fg:x="42445" fg:w="54"/><text x="71.3674%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::from_raw_parts_in (57 samples, 0.10%)</title><rect x="71.3604%" y="613" width="0.0955%" height="15" fill="rgb(205,3,43)" fg:x="42590" fg:w="57"/><text x="71.6104%" y="623.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::new_unchecked (16 samples, 0.03%)</title><rect x="71.4291%" y="597" width="0.0268%" height="15" fill="rgb(245,7,22)" fg:x="42631" fg:w="16"/><text x="71.6791%" y="607.50"></text></g><g><title>__rust_dealloc (12 samples, 0.02%)</title><rect x="71.6284%" y="549" width="0.0201%" height="15" fill="rgb(239,132,32)" fg:x="42750" fg:w="12"/><text x="71.8784%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (118 samples, 0.20%)</title><rect x="71.5731%" y="581" width="0.1977%" height="15" fill="rgb(228,202,34)" fg:x="42717" fg:w="118"/><text x="71.8231%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (87 samples, 0.15%)</title><rect x="71.6251%" y="565" width="0.1458%" height="15" fill="rgb(254,200,22)" fg:x="42748" fg:w="87"/><text x="71.8751%" y="575.50"></text></g><g><title>cfree (73 samples, 0.12%)</title><rect x="71.6485%" y="549" width="0.1223%" height="15" fill="rgb(219,10,39)" fg:x="42762" fg:w="73"/><text x="71.8985%" y="559.50"></text></g><g><title>[libc.so.6] (57 samples, 0.10%)</title><rect x="71.6754%" y="533" width="0.0955%" height="15" fill="rgb(226,210,39)" fg:x="42778" fg:w="57"/><text x="71.9254%" y="543.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (45 samples, 0.08%)</title><rect x="71.9971%" y="565" width="0.0754%" height="15" fill="rgb(208,219,16)" fg:x="42970" fg:w="45"/><text x="72.2471%" y="575.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (45 samples, 0.08%)</title><rect x="71.9971%" y="549" width="0.0754%" height="15" fill="rgb(216,158,51)" fg:x="42970" fg:w="45"/><text x="72.2471%" y="559.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (45 samples, 0.08%)</title><rect x="71.9971%" y="533" width="0.0754%" height="15" fill="rgb(233,14,44)" fg:x="42970" fg:w="45"/><text x="72.2471%" y="543.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (45 samples, 0.08%)</title><rect x="71.9971%" y="517" width="0.0754%" height="15" fill="rgb(237,97,39)" fg:x="42970" fg:w="45"/><text x="72.2471%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (387 samples, 0.65%)</title><rect x="71.4559%" y="613" width="0.6484%" height="15" fill="rgb(218,198,43)" fg:x="42647" fg:w="387"/><text x="71.7059%" y="623.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (373 samples, 0.62%)</title><rect x="71.4793%" y="597" width="0.6250%" height="15" fill="rgb(231,104,20)" fg:x="42661" fg:w="373"/><text x="71.7293%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (199 samples, 0.33%)</title><rect x="71.7709%" y="581" width="0.3334%" height="15" fill="rgb(254,36,13)" fg:x="42835" fg:w="199"/><text x="72.0209%" y="591.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::cast (14 samples, 0.02%)</title><rect x="72.0808%" y="565" width="0.0235%" height="15" fill="rgb(248,14,50)" fg:x="43020" fg:w="14"/><text x="72.3308%" y="575.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (14 samples, 0.02%)</title><rect x="72.0808%" y="549" width="0.0235%" height="15" fill="rgb(217,107,29)" fg:x="43020" fg:w="14"/><text x="72.3308%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::string::String,alloc::alloc::Global&gt;&gt; (536 samples, 0.90%)</title><rect x="71.2079%" y="645" width="0.8981%" height="15" fill="rgb(251,169,33)" fg:x="42499" fg:w="536"/><text x="71.4579%" y="655.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (485 samples, 0.81%)</title><rect x="71.2933%" y="629" width="0.8126%" height="15" fill="rgb(217,108,32)" fg:x="42550" fg:w="485"/><text x="71.5433%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::string::String&gt;&gt; (1,171 samples, 1.96%)</title><rect x="70.2042%" y="677" width="1.9620%" height="15" fill="rgb(219,66,42)" fg:x="41900" fg:w="1171"/><text x="70.4542%" y="687.50">c..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,113 samples, 1.86%)</title><rect x="70.3014%" y="661" width="1.8649%" height="15" fill="rgb(206,180,7)" fg:x="41958" fg:w="1113"/><text x="70.5514%" y="671.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (36 samples, 0.06%)</title><rect x="72.1060%" y="645" width="0.0603%" height="15" fill="rgb(208,226,31)" fg:x="43035" fg:w="36"/><text x="72.3560%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (30,611 samples, 51.29%)</title><rect x="20.9507%" y="709" width="51.2893%" height="15" fill="rgb(218,26,49)" fg:x="12504" fg:w="30611"/><text x="21.2007%" y="719.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (30,534 samples, 51.16%)</title><rect x="21.0797%" y="693" width="51.1603%" height="15" fill="rgb(233,197,48)" fg:x="12581" fg:w="30534"/><text x="21.3297%" y="703.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (44 samples, 0.07%)</title><rect x="72.1663%" y="677" width="0.0737%" height="15" fill="rgb(252,181,51)" fg:x="43071" fg:w="44"/><text x="72.4163%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (30,701 samples, 51.44%)</title><rect x="20.8049%" y="725" width="51.4401%" height="15" fill="rgb(253,90,19)" fg:x="12417" fg:w="30701"/><text x="21.0549%" y="735.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>core::result::Result&lt;T,E&gt;::is_err (41 samples, 0.07%)</title><rect x="72.4025%" y="693" width="0.0687%" height="15" fill="rgb(215,171,30)" fg:x="43212" fg:w="41"/><text x="72.6525%" y="703.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::is_ok (41 samples, 0.07%)</title><rect x="72.4025%" y="677" width="0.0687%" height="15" fill="rgb(214,222,9)" fg:x="43212" fg:w="41"/><text x="72.6525%" y="687.50"></text></g><g><title>core::cmp::Ord::max (242 samples, 0.41%)</title><rect x="72.7862%" y="661" width="0.4055%" height="15" fill="rgb(223,3,22)" fg:x="43441" fg:w="242"/><text x="73.0362%" y="671.50"></text></g><g><title>core::cmp::max_by (231 samples, 0.39%)</title><rect x="72.8047%" y="645" width="0.3870%" height="15" fill="rgb(225,196,46)" fg:x="43452" fg:w="231"/><text x="73.0547%" y="655.50"></text></g><g><title>core::ops::function::FnOnce::call_once (115 samples, 0.19%)</title><rect x="72.9990%" y="629" width="0.1927%" height="15" fill="rgb(209,110,37)" fg:x="43568" fg:w="115"/><text x="73.2490%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (86 samples, 0.14%)</title><rect x="73.0476%" y="613" width="0.1441%" height="15" fill="rgb(249,89,12)" fg:x="43597" fg:w="86"/><text x="73.2976%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (51 samples, 0.09%)</title><rect x="73.1917%" y="661" width="0.0855%" height="15" fill="rgb(226,27,33)" fg:x="43683" fg:w="51"/><text x="73.4417%" y="671.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (9 samples, 0.02%)</title><rect x="73.2621%" y="645" width="0.0151%" height="15" fill="rgb(213,82,22)" fg:x="43725" fg:w="9"/><text x="73.5121%" y="655.50"></text></g><g><title>[libc.so.6] (39 samples, 0.07%)</title><rect x="73.5754%" y="629" width="0.0653%" height="15" fill="rgb(248,140,0)" fg:x="43912" fg:w="39"/><text x="73.8254%" y="639.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (59 samples, 0.10%)</title><rect x="73.5469%" y="645" width="0.0989%" height="15" fill="rgb(228,106,3)" fg:x="43895" fg:w="59"/><text x="73.7969%" y="655.50"></text></g><g><title>[libc.so.6] (65 samples, 0.11%)</title><rect x="73.6458%" y="645" width="0.1089%" height="15" fill="rgb(209,23,37)" fg:x="43954" fg:w="65"/><text x="73.8958%" y="655.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (15 samples, 0.03%)</title><rect x="73.7547%" y="645" width="0.0251%" height="15" fill="rgb(241,93,50)" fg:x="44019" fg:w="15"/><text x="74.0047%" y="655.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (15 samples, 0.03%)</title><rect x="73.7547%" y="629" width="0.0251%" height="15" fill="rgb(253,46,43)" fg:x="44019" fg:w="15"/><text x="74.0047%" y="639.50"></text></g><g><title>core::ptr::read (36 samples, 0.06%)</title><rect x="73.8284%" y="613" width="0.0603%" height="15" fill="rgb(226,206,43)" fg:x="44063" fg:w="36"/><text x="74.0784%" y="623.50"></text></g><g><title>core::mem::swap (107 samples, 0.18%)</title><rect x="73.7798%" y="645" width="0.1793%" height="15" fill="rgb(217,54,7)" fg:x="44034" fg:w="107"/><text x="74.0298%" y="655.50"></text></g><g><title>core::mem::swap_simple (78 samples, 0.13%)</title><rect x="73.8284%" y="629" width="0.1307%" height="15" fill="rgb(223,5,52)" fg:x="44063" fg:w="78"/><text x="74.0784%" y="639.50"></text></g><g><title>core::ptr::write (42 samples, 0.07%)</title><rect x="73.8887%" y="613" width="0.0704%" height="15" fill="rgb(206,52,46)" fg:x="44099" fg:w="42"/><text x="74.1387%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;,hashbrown::raw::RawTableInner&lt;alloc::alloc::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (46 samples, 0.08%)</title><rect x="73.9591%" y="645" width="0.0771%" height="15" fill="rgb(253,136,11)" fg:x="44141" fg:w="46"/><text x="74.2091%" y="655.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.07%)</title><rect x="73.9675%" y="629" width="0.0687%" height="15" fill="rgb(208,106,33)" fg:x="44146" fg:w="41"/><text x="74.2175%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize::_{{closure}} (20 samples, 0.03%)</title><rect x="74.0026%" y="613" width="0.0335%" height="15" fill="rgb(206,54,4)" fg:x="44167" fg:w="20"/><text x="74.2526%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket_ptr (21 samples, 0.04%)</title><rect x="74.0362%" y="645" width="0.0352%" height="15" fill="rgb(213,3,15)" fg:x="44187" fg:w="21"/><text x="74.2862%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_bucket_full (22 samples, 0.04%)</title><rect x="74.0730%" y="645" width="0.0369%" height="15" fill="rgb(252,211,39)" fg:x="44209" fg:w="22"/><text x="74.3230%" y="655.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (57 samples, 0.10%)</title><rect x="74.4383%" y="629" width="0.0955%" height="15" fill="rgb(223,6,36)" fg:x="44427" fg:w="57"/><text x="74.6883%" y="639.50"></text></g><g><title>[libc.so.6] (120 samples, 0.20%)</title><rect x="74.5338%" y="629" width="0.2011%" height="15" fill="rgb(252,169,45)" fg:x="44484" fg:w="120"/><text x="74.7838%" y="639.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (71 samples, 0.12%)</title><rect x="75.0247%" y="613" width="0.1190%" height="15" fill="rgb(212,48,26)" fg:x="44777" fg:w="71"/><text x="75.2747%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or_else (33 samples, 0.06%)</title><rect x="75.1437%" y="613" width="0.0553%" height="15" fill="rgb(251,102,48)" fg:x="44848" fg:w="33"/><text x="75.3937%" y="623.50"></text></g><g><title>[libc.so.6] (13 samples, 0.02%)</title><rect x="75.2291%" y="581" width="0.0218%" height="15" fill="rgb(243,208,16)" fg:x="44899" fg:w="13"/><text x="75.4791%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (37 samples, 0.06%)</title><rect x="75.1990%" y="613" width="0.0620%" height="15" fill="rgb(219,96,24)" fg:x="44881" fg:w="37"/><text x="75.4490%" y="623.50"></text></g><g><title>core::intrinsics::write_bytes (34 samples, 0.06%)</title><rect x="75.2040%" y="597" width="0.0570%" height="15" fill="rgb(219,33,29)" fg:x="44884" fg:w="34"/><text x="75.4540%" y="607.50"></text></g><g><title>memset@plt (6 samples, 0.01%)</title><rect x="75.2509%" y="581" width="0.0101%" height="15" fill="rgb(223,176,5)" fg:x="44912" fg:w="6"/><text x="75.5009%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::ctrl (39 samples, 0.07%)</title><rect x="75.2610%" y="613" width="0.0653%" height="15" fill="rgb(228,140,14)" fg:x="44918" fg:w="39"/><text x="75.5110%" y="623.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (31 samples, 0.05%)</title><rect x="75.5961%" y="597" width="0.0519%" height="15" fill="rgb(217,179,31)" fg:x="45118" fg:w="31"/><text x="75.8461%" y="607.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (91 samples, 0.15%)</title><rect x="75.9714%" y="581" width="0.1525%" height="15" fill="rgb(230,9,30)" fg:x="45342" fg:w="91"/><text x="76.2214%" y="591.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (35 samples, 0.06%)</title><rect x="76.1239%" y="581" width="0.0586%" height="15" fill="rgb(230,136,20)" fg:x="45433" fg:w="35"/><text x="76.3739%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (139 samples, 0.23%)</title><rect x="76.1825%" y="581" width="0.2329%" height="15" fill="rgb(215,210,22)" fg:x="45468" fg:w="139"/><text x="76.4325%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (40 samples, 0.07%)</title><rect x="76.3484%" y="565" width="0.0670%" height="15" fill="rgb(218,43,5)" fg:x="45567" fg:w="40"/><text x="76.5984%" y="575.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (551 samples, 0.92%)</title><rect x="75.6514%" y="597" width="0.9232%" height="15" fill="rgb(216,11,5)" fg:x="45151" fg:w="551"/><text x="75.9014%" y="607.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (95 samples, 0.16%)</title><rect x="76.4154%" y="581" width="0.1592%" height="15" fill="rgb(209,82,29)" fg:x="45607" fg:w="95"/><text x="76.6654%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (11 samples, 0.02%)</title><rect x="76.5561%" y="565" width="0.0184%" height="15" fill="rgb(244,115,12)" fg:x="45691" fg:w="11"/><text x="76.8061%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (39 samples, 0.07%)</title><rect x="76.9063%" y="549" width="0.0653%" height="15" fill="rgb(222,82,18)" fg:x="45900" fg:w="39"/><text x="77.1563%" y="559.50"></text></g><g><title>__rust_alloc (9 samples, 0.02%)</title><rect x="77.0085%" y="533" width="0.0151%" height="15" fill="rgb(249,227,8)" fg:x="45961" fg:w="9"/><text x="77.2585%" y="543.50"></text></g><g><title>core::ptr::read_volatile (7 samples, 0.01%)</title><rect x="77.0236%" y="533" width="0.0117%" height="15" fill="rgb(253,141,45)" fg:x="45970" fg:w="7"/><text x="77.2736%" y="543.50"></text></g><g><title>alloc::alloc::alloc (107 samples, 0.18%)</title><rect x="76.9784%" y="549" width="0.1793%" height="15" fill="rgb(234,184,4)" fg:x="45943" fg:w="107"/><text x="77.2284%" y="559.50"></text></g><g><title>malloc (73 samples, 0.12%)</title><rect x="77.0353%" y="533" width="0.1223%" height="15" fill="rgb(218,194,23)" fg:x="45977" fg:w="73"/><text x="77.2853%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (38 samples, 0.06%)</title><rect x="77.1576%" y="549" width="0.0637%" height="15" fill="rgb(235,66,41)" fg:x="46050" fg:w="38"/><text x="77.4076%" y="559.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (51 samples, 0.09%)</title><rect x="77.2213%" y="549" width="0.0855%" height="15" fill="rgb(245,217,1)" fg:x="46088" fg:w="51"/><text x="77.4713%" y="559.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (21 samples, 0.04%)</title><rect x="77.2716%" y="533" width="0.0352%" height="15" fill="rgb(229,91,1)" fg:x="46118" fg:w="21"/><text x="77.5216%" y="543.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (50 samples, 0.08%)</title><rect x="77.3168%" y="517" width="0.0838%" height="15" fill="rgb(207,101,30)" fg:x="46145" fg:w="50"/><text x="77.5668%" y="527.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (494 samples, 0.83%)</title><rect x="76.5746%" y="597" width="0.8277%" height="15" fill="rgb(223,82,49)" fg:x="45702" fg:w="494"/><text x="76.8246%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (400 samples, 0.67%)</title><rect x="76.7321%" y="581" width="0.6702%" height="15" fill="rgb(218,167,17)" fg:x="45796" fg:w="400"/><text x="76.9821%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (397 samples, 0.67%)</title><rect x="76.7371%" y="565" width="0.6652%" height="15" fill="rgb(208,103,14)" fg:x="45799" fg:w="397"/><text x="76.9871%" y="575.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (57 samples, 0.10%)</title><rect x="77.3068%" y="549" width="0.0955%" height="15" fill="rgb(238,20,8)" fg:x="46139" fg:w="57"/><text x="77.5568%" y="559.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (57 samples, 0.10%)</title><rect x="77.3068%" y="533" width="0.0955%" height="15" fill="rgb(218,80,54)" fg:x="46139" fg:w="57"/><text x="77.5568%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (1,243 samples, 2.08%)</title><rect x="75.3263%" y="613" width="2.0827%" height="15" fill="rgb(240,144,17)" fg:x="44957" fg:w="1243"/><text x="75.5763%" y="623.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1,729 samples, 2.90%)</title><rect x="74.7348%" y="629" width="2.8970%" height="15" fill="rgb(245,27,50)" fg:x="44604" fg:w="1729"/><text x="74.9848%" y="639.50">ha..</text></g><g><title>hashbrown::raw::capacity_to_buckets (128 samples, 0.21%)</title><rect x="77.4174%" y="613" width="0.2145%" height="15" fill="rgb(251,51,7)" fg:x="46205" fg:w="128"/><text x="77.6674%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (12 samples, 0.02%)</title><rect x="77.6117%" y="597" width="0.0201%" height="15" fill="rgb(245,217,29)" fg:x="46321" fg:w="12"/><text x="77.8617%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (2,123 samples, 3.56%)</title><rect x="74.1099%" y="645" width="3.5571%" height="15" fill="rgb(221,176,29)" fg:x="44231" fg:w="2123"/><text x="74.3599%" y="655.50">hash..</text></g><g><title>hashbrown::scopeguard::guard (21 samples, 0.04%)</title><rect x="77.6318%" y="629" width="0.0352%" height="15" fill="rgb(212,180,24)" fg:x="46333" fg:w="21"/><text x="77.8818%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (2,624 samples, 4.40%)</title><rect x="73.2771%" y="661" width="4.3966%" height="15" fill="rgb(254,24,2)" fg:x="43734" fg:w="2624"/><text x="73.5271%" y="671.50">hashb..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (34,251 samples, 57.39%)</title><rect x="20.3073%" y="741" width="57.3882%" height="15" fill="rgb(230,100,2)" fg:x="12120" fg:w="34251"/><text x="20.5573%" y="751.50">&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (3,253 samples, 5.45%)</title><rect x="72.2450%" y="725" width="5.4505%" height="15" fill="rgb(219,142,25)" fg:x="43118" fg:w="3253"/><text x="72.4950%" y="735.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (3,253 samples, 5.45%)</title><rect x="72.2450%" y="709" width="5.4505%" height="15" fill="rgb(240,73,43)" fg:x="43118" fg:w="3253"/><text x="72.4950%" y="719.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (3,118 samples, 5.22%)</title><rect x="72.4712%" y="693" width="5.2243%" height="15" fill="rgb(214,114,15)" fg:x="43253" fg:w="3118"/><text x="72.7212%" y="703.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (3,044 samples, 5.10%)</title><rect x="72.5952%" y="677" width="5.1003%" height="15" fill="rgb(207,130,4)" fg:x="43327" fg:w="3044"/><text x="72.8452%" y="687.50">hashbr..</text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (13 samples, 0.02%)</title><rect x="77.6737%" y="661" width="0.0218%" height="15" fill="rgb(221,25,40)" fg:x="46358" fg:w="13"/><text x="77.9237%" y="671.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (34,319 samples, 57.50%)</title><rect x="20.2118%" y="773" width="57.5021%" height="15" fill="rgb(241,184,7)" fg:x="12063" fg:w="34319"/><text x="20.4618%" y="783.50">&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend</text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (34,290 samples, 57.45%)</title><rect x="20.2604%" y="757" width="57.4535%" height="15" fill="rgb(235,159,4)" fg:x="12092" fg:w="34290"/><text x="20.5104%" y="767.50">&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend</text></g><g><title>core::iter::traits::iterator::Iterator::map (11 samples, 0.02%)</title><rect x="77.6955%" y="741" width="0.0184%" height="15" fill="rgb(214,87,48)" fg:x="46371" fg:w="11"/><text x="77.9455%" y="751.50"></text></g><g><title>[libc.so.6] (134 samples, 0.22%)</title><rect x="77.7139%" y="773" width="0.2245%" height="15" fill="rgb(246,198,24)" fg:x="46382" fg:w="134"/><text x="77.9639%" y="783.50"></text></g><g><title>memcpy@plt (6 samples, 0.01%)</title><rect x="77.9384%" y="773" width="0.0101%" height="15" fill="rgb(209,66,40)" fg:x="46516" fg:w="6"/><text x="78.1884%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (35,585 samples, 59.62%)</title><rect x="18.7708%" y="805" width="59.6233%" height="15" fill="rgb(233,147,39)" fg:x="11203" fg:w="35585"/><text x="19.0208%" y="815.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (35,504 samples, 59.49%)</title><rect x="18.9066%" y="789" width="59.4876%" height="15" fill="rgb(231,145,52)" fg:x="11284" fg:w="35504"/><text x="19.1566%" y="799.50">&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::with_hasher (266 samples, 0.45%)</title><rect x="77.9485%" y="773" width="0.4457%" height="15" fill="rgb(206,20,26)" fg:x="46522" fg:w="266"/><text x="78.1985%" y="783.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S&gt;::with_hasher (232 samples, 0.39%)</title><rect x="78.0055%" y="757" width="0.3887%" height="15" fill="rgb(238,220,4)" fg:x="46556" fg:w="232"/><text x="78.2555%" y="767.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_hasher (150 samples, 0.25%)</title><rect x="78.1429%" y="741" width="0.2513%" height="15" fill="rgb(252,195,42)" fg:x="46638" fg:w="150"/><text x="78.3929%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::new (105 samples, 0.18%)</title><rect x="78.2183%" y="725" width="0.1759%" height="15" fill="rgb(209,10,6)" fg:x="46683" fg:w="105"/><text x="78.4683%" y="735.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (88 samples, 0.15%)</title><rect x="79.1582%" y="709" width="0.1474%" height="15" fill="rgb(229,3,52)" fg:x="47244" fg:w="88"/><text x="79.4082%" y="719.50"></text></g><g><title>[libc.so.6] (82 samples, 0.14%)</title><rect x="79.1683%" y="693" width="0.1374%" height="15" fill="rgb(253,49,37)" fg:x="47250" fg:w="82"/><text x="79.4183%" y="703.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (163 samples, 0.27%)</title><rect x="81.7167%" y="661" width="0.2731%" height="15" fill="rgb(240,103,49)" fg:x="48771" fg:w="163"/><text x="81.9667%" y="671.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (331 samples, 0.55%)</title><rect x="82.3719%" y="645" width="0.5546%" height="15" fill="rgb(250,182,30)" fg:x="49162" fg:w="331"/><text x="82.6219%" y="655.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (818 samples, 1.37%)</title><rect x="81.9898%" y="661" width="1.3706%" height="15" fill="rgb(248,8,30)" fg:x="48934" fg:w="818"/><text x="82.2398%" y="671.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (259 samples, 0.43%)</title><rect x="82.9265%" y="645" width="0.4340%" height="15" fill="rgb(237,120,30)" fg:x="49493" fg:w="259"/><text x="83.1765%" y="655.50"></text></g><g><title>core::num::nonzero::NonZeroU16::trailing_zeros (54 samples, 0.09%)</title><rect x="83.2699%" y="629" width="0.0905%" height="15" fill="rgb(221,146,34)" fg:x="49698" fg:w="54"/><text x="83.5199%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1,450 samples, 2.43%)</title><rect x="80.9326%" y="677" width="2.4295%" height="15" fill="rgb(242,55,13)" fg:x="48303" fg:w="1450"/><text x="81.1826%" y="687.50">&lt;h..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (23 samples, 0.04%)</title><rect x="83.3621%" y="677" width="0.0385%" height="15" fill="rgb(242,112,31)" fg:x="49753" fg:w="23"/><text x="83.6121%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (692 samples, 1.16%)</title><rect x="83.4006%" y="677" width="1.1595%" height="15" fill="rgb(249,192,27)" fg:x="49776" fg:w="692"/><text x="83.6506%" y="687.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (228 samples, 0.38%)</title><rect x="84.1781%" y="661" width="0.3820%" height="15" fill="rgb(208,204,44)" fg:x="50240" fg:w="228"/><text x="84.4281%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (74 samples, 0.12%)</title><rect x="84.4361%" y="645" width="0.1240%" height="15" fill="rgb(208,93,54)" fg:x="50394" fg:w="74"/><text x="84.6861%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,142 samples, 5.26%)</title><rect x="79.3057%" y="709" width="5.2645%" height="15" fill="rgb(242,1,31)" fg:x="47332" fg:w="3142"/><text x="79.5557%" y="719.50">&lt;hashb..</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (2,649 samples, 4.44%)</title><rect x="80.1317%" y="693" width="4.4384%" height="15" fill="rgb(241,83,25)" fg:x="47825" fg:w="2649"/><text x="80.3817%" y="703.50">hashb..</text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (6 samples, 0.01%)</title><rect x="84.5601%" y="677" width="0.0101%" height="15" fill="rgb(205,169,50)" fg:x="50468" fg:w="6"/><text x="84.8101%" y="687.50"></text></g><g><title>[libc.so.6] (104 samples, 0.17%)</title><rect x="84.5701%" y="709" width="0.1743%" height="15" fill="rgb(239,186,37)" fg:x="50474" fg:w="104"/><text x="84.8201%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (23 samples, 0.04%)</title><rect x="85.2655%" y="613" width="0.0385%" height="15" fill="rgb(205,221,10)" fg:x="50889" fg:w="23"/><text x="85.5155%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (23 samples, 0.04%)</title><rect x="85.2655%" y="597" width="0.0385%" height="15" fill="rgb(218,196,15)" fg:x="50889" fg:w="23"/><text x="85.5155%" y="607.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (23 samples, 0.04%)</title><rect x="85.2655%" y="581" width="0.0385%" height="15" fill="rgb(218,196,35)" fg:x="50889" fg:w="23"/><text x="85.5155%" y="591.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (23 samples, 0.04%)</title><rect x="85.2655%" y="565" width="0.0385%" height="15" fill="rgb(233,63,24)" fg:x="50889" fg:w="23"/><text x="85.5155%" y="575.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (218 samples, 0.37%)</title><rect x="85.3040%" y="597" width="0.3653%" height="15" fill="rgb(225,8,4)" fg:x="50912" fg:w="218"/><text x="85.5540%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (249 samples, 0.42%)</title><rect x="85.2655%" y="629" width="0.4172%" height="15" fill="rgb(234,105,35)" fg:x="50889" fg:w="249"/><text x="85.5155%" y="639.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (226 samples, 0.38%)</title><rect x="85.3040%" y="613" width="0.3787%" height="15" fill="rgb(236,21,32)" fg:x="50912" fg:w="226"/><text x="85.5540%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::cast (8 samples, 0.01%)</title><rect x="85.6693%" y="597" width="0.0134%" height="15" fill="rgb(228,109,6)" fg:x="51130" fg:w="8"/><text x="85.9193%" y="607.50"></text></g><g><title>__rdl_dealloc (25 samples, 0.04%)</title><rect x="86.4769%" y="565" width="0.0419%" height="15" fill="rgb(229,215,31)" fg:x="51612" fg:w="25"/><text x="86.7269%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (25 samples, 0.04%)</title><rect x="86.4769%" y="549" width="0.0419%" height="15" fill="rgb(221,52,54)" fg:x="51612" fg:w="25"/><text x="86.7269%" y="559.50"></text></g><g><title>__rust_dealloc (43 samples, 0.07%)</title><rect x="86.5188%" y="565" width="0.0720%" height="15" fill="rgb(252,129,43)" fg:x="51637" fg:w="43"/><text x="86.7688%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (804 samples, 1.35%)</title><rect x="86.1686%" y="597" width="1.3471%" height="15" fill="rgb(248,183,27)" fg:x="51428" fg:w="804"/><text x="86.4186%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (620 samples, 1.04%)</title><rect x="86.4769%" y="581" width="1.0388%" height="15" fill="rgb(250,0,22)" fg:x="51612" fg:w="620"/><text x="86.7269%" y="591.50"></text></g><g><title>cfree (552 samples, 0.92%)</title><rect x="86.5908%" y="565" width="0.9249%" height="15" fill="rgb(213,166,10)" fg:x="51680" fg:w="552"/><text x="86.8408%" y="575.50"></text></g><g><title>[libc.so.6] (469 samples, 0.79%)</title><rect x="86.7299%" y="549" width="0.7858%" height="15" fill="rgb(207,163,36)" fg:x="51763" fg:w="469"/><text x="86.9799%" y="559.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (161 samples, 0.27%)</title><rect x="88.1608%" y="581" width="0.2698%" height="15" fill="rgb(208,122,22)" fg:x="52617" fg:w="161"/><text x="88.4108%" y="591.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::convert::From&lt;core::ptr::unique::Unique&lt;T&gt;&gt;&gt;::from (161 samples, 0.27%)</title><rect x="88.1608%" y="565" width="0.2698%" height="15" fill="rgb(207,104,49)" fg:x="52617" fg:w="161"/><text x="88.4108%" y="575.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (156 samples, 0.26%)</title><rect x="88.1692%" y="549" width="0.2614%" height="15" fill="rgb(248,211,50)" fg:x="52622" fg:w="156"/><text x="88.4192%" y="559.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (156 samples, 0.26%)</title><rect x="88.1692%" y="533" width="0.2614%" height="15" fill="rgb(217,13,45)" fg:x="52622" fg:w="156"/><text x="88.4192%" y="543.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (6 samples, 0.01%)</title><rect x="88.4305%" y="581" width="0.0101%" height="15" fill="rgb(211,216,49)" fg:x="52778" fg:w="6"/><text x="88.6805%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (16 samples, 0.03%)</title><rect x="88.4406%" y="581" width="0.0268%" height="15" fill="rgb(221,58,53)" fg:x="52784" fg:w="16"/><text x="88.6906%" y="591.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (132 samples, 0.22%)</title><rect x="88.4674%" y="565" width="0.2212%" height="15" fill="rgb(220,112,41)" fg:x="52800" fg:w="132"/><text x="88.7174%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (2,346 samples, 3.93%)</title><rect x="84.7595%" y="693" width="3.9308%" height="15" fill="rgb(236,38,28)" fg:x="50587" fg:w="2346"/><text x="85.0095%" y="703.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,())&gt; (2,179 samples, 3.65%)</title><rect x="85.0393%" y="677" width="3.6510%" height="15" fill="rgb(227,195,22)" fg:x="50754" fg:w="2179"/><text x="85.2893%" y="687.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2,162 samples, 3.62%)</title><rect x="85.0678%" y="661" width="3.6225%" height="15" fill="rgb(214,55,33)" fg:x="50771" fg:w="2162"/><text x="85.3178%" y="671.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2,105 samples, 3.53%)</title><rect x="85.1633%" y="645" width="3.5270%" height="15" fill="rgb(248,80,13)" fg:x="50828" fg:w="2105"/><text x="85.4133%" y="655.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,795 samples, 3.01%)</title><rect x="85.6827%" y="629" width="3.0076%" height="15" fill="rgb(238,52,6)" fg:x="51138" fg:w="1795"/><text x="85.9327%" y="639.50">cor..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,705 samples, 2.86%)</title><rect x="85.8335%" y="613" width="2.8568%" height="15" fill="rgb(224,198,47)" fg:x="51228" fg:w="1705"/><text x="86.0835%" y="623.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (701 samples, 1.17%)</title><rect x="87.5157%" y="597" width="1.1745%" height="15" fill="rgb(233,171,20)" fg:x="52232" fg:w="701"/><text x="87.7657%" y="607.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::cast (133 samples, 0.22%)</title><rect x="88.4674%" y="581" width="0.2228%" height="15" fill="rgb(241,30,25)" fg:x="52800" fg:w="133"/><text x="88.7174%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (188 samples, 0.31%)</title><rect x="88.8343%" y="677" width="0.3150%" height="15" fill="rgb(207,171,38)" fg:x="53019" fg:w="188"/><text x="89.0843%" y="687.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (146 samples, 0.24%)</title><rect x="88.9047%" y="661" width="0.2446%" height="15" fill="rgb(234,70,1)" fg:x="53061" fg:w="146"/><text x="89.1547%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2,631 samples, 4.41%)</title><rect x="84.7444%" y="709" width="4.4083%" height="15" fill="rgb(232,178,18)" fg:x="50578" fg:w="2631"/><text x="84.9944%" y="719.50">hashb..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (276 samples, 0.46%)</title><rect x="88.6902%" y="693" width="0.4624%" height="15" fill="rgb(241,78,40)" fg:x="52933" fg:w="276"/><text x="88.9402%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (128 samples, 0.21%)</title><rect x="89.3973%" y="693" width="0.2145%" height="15" fill="rgb(222,35,25)" fg:x="53355" fg:w="128"/><text x="89.6473%" y="703.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (22 samples, 0.04%)</title><rect x="89.5749%" y="677" width="0.0369%" height="15" fill="rgb(207,92,16)" fg:x="53461" fg:w="22"/><text x="89.8249%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (46 samples, 0.08%)</title><rect x="89.6805%" y="677" width="0.0771%" height="15" fill="rgb(216,59,51)" fg:x="53524" fg:w="46"/><text x="89.9305%" y="687.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (9 samples, 0.02%)</title><rect x="89.7576%" y="677" width="0.0151%" height="15" fill="rgb(213,80,28)" fg:x="53570" fg:w="9"/><text x="90.0076%" y="687.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (11 samples, 0.02%)</title><rect x="90.3473%" y="629" width="0.0184%" height="15" fill="rgb(220,93,7)" fg:x="53922" fg:w="11"/><text x="90.5973%" y="639.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (502 samples, 0.84%)</title><rect x="89.6118%" y="693" width="0.8411%" height="15" fill="rgb(225,24,44)" fg:x="53483" fg:w="502"/><text x="89.8618%" y="703.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (401 samples, 0.67%)</title><rect x="89.7810%" y="677" width="0.6719%" height="15" fill="rgb(243,74,40)" fg:x="53584" fg:w="401"/><text x="90.0310%" y="687.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (386 samples, 0.65%)</title><rect x="89.8061%" y="661" width="0.6468%" height="15" fill="rgb(228,39,7)" fg:x="53599" fg:w="386"/><text x="90.0561%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (366 samples, 0.61%)</title><rect x="89.8397%" y="645" width="0.6132%" height="15" fill="rgb(227,79,8)" fg:x="53619" fg:w="366"/><text x="90.0897%" y="655.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (52 samples, 0.09%)</title><rect x="90.3658%" y="629" width="0.0871%" height="15" fill="rgb(236,58,11)" fg:x="53933" fg:w="52"/><text x="90.6158%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (777 samples, 1.30%)</title><rect x="89.1527%" y="709" width="1.3019%" height="15" fill="rgb(249,63,35)" fg:x="53209" fg:w="777"/><text x="89.4027%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (7,067 samples, 11.84%)</title><rect x="78.6154%" y="725" width="11.8409%" height="15" fill="rgb(252,114,16)" fg:x="46920" fg:w="7067"/><text x="78.8654%" y="735.50">hashbrown::raw::Ra..</text></g><g><title>__rust_dealloc (9 samples, 0.02%)</title><rect x="90.5819%" y="661" width="0.0151%" height="15" fill="rgb(254,151,24)" fg:x="54062" fg:w="9"/><text x="90.8319%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (89 samples, 0.15%)</title><rect x="90.5182%" y="693" width="0.1491%" height="15" fill="rgb(253,54,39)" fg:x="54024" fg:w="89"/><text x="90.7682%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (56 samples, 0.09%)</title><rect x="90.5735%" y="677" width="0.0938%" height="15" fill="rgb(243,25,45)" fg:x="54057" fg:w="56"/><text x="90.8235%" y="687.50"></text></g><g><title>cfree (42 samples, 0.07%)</title><rect x="90.5970%" y="661" width="0.0704%" height="15" fill="rgb(234,134,9)" fg:x="54071" fg:w="42"/><text x="90.8470%" y="671.50"></text></g><g><title>[libc.so.6] (29 samples, 0.05%)</title><rect x="90.6188%" y="645" width="0.0486%" height="15" fill="rgb(227,166,31)" fg:x="54084" fg:w="29"/><text x="90.8688%" y="655.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (68 samples, 0.11%)</title><rect x="91.1265%" y="661" width="0.1139%" height="15" fill="rgb(245,143,41)" fg:x="54387" fg:w="68"/><text x="91.3765%" y="671.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (21 samples, 0.04%)</title><rect x="91.2404%" y="661" width="0.0352%" height="15" fill="rgb(238,181,32)" fg:x="54455" fg:w="21"/><text x="91.4904%" y="671.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (115 samples, 0.19%)</title><rect x="91.2756%" y="661" width="0.1927%" height="15" fill="rgb(224,113,18)" fg:x="54476" fg:w="115"/><text x="91.5256%" y="671.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (36 samples, 0.06%)</title><rect x="91.4079%" y="645" width="0.0603%" height="15" fill="rgb(240,229,28)" fg:x="54555" fg:w="36"/><text x="91.6579%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;alloc::string::String&gt;&gt; (7,898 samples, 13.23%)</title><rect x="78.3942%" y="805" width="13.2332%" height="15" fill="rgb(250,185,3)" fg:x="46788" fg:w="7898"/><text x="78.6442%" y="815.50">core::ptr::drop_in_p..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;alloc::string::String,std::collections::hash::map::RandomState&gt;&gt; (7,878 samples, 13.20%)</title><rect x="78.4277%" y="789" width="13.1997%" height="15" fill="rgb(212,59,25)" fg:x="46808" fg:w="7878"/><text x="78.6777%" y="799.50">core::ptr::drop_in_p..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,(),std::collections::hash::map::RandomState&gt;&gt; (7,865 samples, 13.18%)</title><rect x="78.4495%" y="773" width="13.1780%" height="15" fill="rgb(221,87,20)" fg:x="46821" fg:w="7865"/><text x="78.6995%" y="783.50">core::ptr::drop_in_p..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,())&gt;&gt; (7,855 samples, 13.16%)</title><rect x="78.4662%" y="757" width="13.1612%" height="15" fill="rgb(213,74,28)" fg:x="46831" fg:w="7855"/><text x="78.7162%" y="767.50">core::ptr::drop_in_p..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7,836 samples, 13.13%)</title><rect x="78.4981%" y="741" width="13.1294%" height="15" fill="rgb(224,132,34)" fg:x="46850" fg:w="7836"/><text x="78.7481%" y="751.50">&lt;hashbrown::raw::Raw..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (699 samples, 1.17%)</title><rect x="90.4562%" y="725" width="1.1712%" height="15" fill="rgb(222,101,24)" fg:x="53987" fg:w="699"/><text x="90.7062%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (694 samples, 1.16%)</title><rect x="90.4646%" y="709" width="1.1628%" height="15" fill="rgb(254,142,4)" fg:x="53992" fg:w="694"/><text x="90.7146%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::allocation_info (573 samples, 0.96%)</title><rect x="90.6674%" y="693" width="0.9601%" height="15" fill="rgb(230,229,49)" fg:x="54113" fg:w="573"/><text x="90.9174%" y="703.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (479 samples, 0.80%)</title><rect x="90.8249%" y="677" width="0.8026%" height="15" fill="rgb(238,70,47)" fg:x="54207" fg:w="479"/><text x="91.0749%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (95 samples, 0.16%)</title><rect x="91.4683%" y="661" width="0.1592%" height="15" fill="rgb(231,160,17)" fg:x="54591" fg:w="95"/><text x="91.7183%" y="671.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (9 samples, 0.02%)</title><rect x="91.6124%" y="645" width="0.0151%" height="15" fill="rgb(218,68,53)" fg:x="54677" fg:w="9"/><text x="91.8624%" y="655.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::cmp::PartialEq&gt;::eq (15 samples, 0.03%)</title><rect x="91.7280%" y="773" width="0.0251%" height="15" fill="rgb(236,111,10)" fg:x="54746" fg:w="15"/><text x="91.9780%" y="783.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for ()&gt;::eq (6 samples, 0.01%)</title><rect x="91.7430%" y="757" width="0.0101%" height="15" fill="rgb(224,34,41)" fg:x="54755" fg:w="6"/><text x="91.9930%" y="767.50"></text></g><g><title>&lt;core::ops::control_flow::ControlFlow&lt;B,C&gt; as core::ops::try_trait::Try&gt;::branch (18 samples, 0.03%)</title><rect x="91.9123%" y="757" width="0.0302%" height="15" fill="rgb(241,118,19)" fg:x="54856" fg:w="18"/><text x="92.1623%" y="767.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.01%)</title><rect x="92.4283%" y="645" width="0.0117%" height="15" fill="rgb(238,129,25)" fg:x="55164" fg:w="7"/><text x="92.6783%" y="655.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (6 samples, 0.01%)</title><rect x="92.4518%" y="629" width="0.0101%" height="15" fill="rgb(238,22,31)" fg:x="55178" fg:w="6"/><text x="92.7018%" y="639.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (21 samples, 0.04%)</title><rect x="92.4401%" y="645" width="0.0352%" height="15" fill="rgb(222,174,48)" fg:x="55171" fg:w="21"/><text x="92.6901%" y="655.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (8 samples, 0.01%)</title><rect x="92.4618%" y="629" width="0.0134%" height="15" fill="rgb(206,152,40)" fg:x="55184" fg:w="8"/><text x="92.7118%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (84 samples, 0.14%)</title><rect x="92.3362%" y="661" width="0.1407%" height="15" fill="rgb(218,99,54)" fg:x="55109" fg:w="84"/><text x="92.5862%" y="671.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (95 samples, 0.16%)</title><rect x="92.4769%" y="661" width="0.1592%" height="15" fill="rgb(220,174,26)" fg:x="55193" fg:w="95"/><text x="92.7269%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (15 samples, 0.03%)</title><rect x="92.6110%" y="645" width="0.0251%" height="15" fill="rgb(245,116,9)" fg:x="55273" fg:w="15"/><text x="92.8610%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (6 samples, 0.01%)</title><rect x="92.6260%" y="629" width="0.0101%" height="15" fill="rgb(209,72,35)" fg:x="55282" fg:w="6"/><text x="92.8760%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (287 samples, 0.48%)</title><rect x="92.1602%" y="693" width="0.4809%" height="15" fill="rgb(226,126,21)" fg:x="55004" fg:w="287"/><text x="92.4102%" y="703.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (225 samples, 0.38%)</title><rect x="92.2641%" y="677" width="0.3770%" height="15" fill="rgb(227,192,1)" fg:x="55066" fg:w="225"/><text x="92.5141%" y="687.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (454 samples, 0.76%)</title><rect x="91.9424%" y="757" width="0.7607%" height="15" fill="rgb(237,180,29)" fg:x="54874" fg:w="454"/><text x="92.1924%" y="767.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (454 samples, 0.76%)</title><rect x="91.9424%" y="741" width="0.7607%" height="15" fill="rgb(230,197,35)" fg:x="54874" fg:w="454"/><text x="92.1924%" y="751.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (454 samples, 0.76%)</title><rect x="91.9424%" y="725" width="0.7607%" height="15" fill="rgb(246,193,31)" fg:x="54874" fg:w="454"/><text x="92.1924%" y="735.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (411 samples, 0.69%)</title><rect x="92.0145%" y="709" width="0.6886%" height="15" fill="rgb(241,36,4)" fg:x="54917" fg:w="411"/><text x="92.2645%" y="719.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (37 samples, 0.06%)</title><rect x="92.6411%" y="693" width="0.0620%" height="15" fill="rgb(241,130,17)" fg:x="55291" fg:w="37"/><text x="92.8911%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (17 samples, 0.03%)</title><rect x="92.6746%" y="677" width="0.0285%" height="15" fill="rgb(206,137,32)" fg:x="55311" fg:w="17"/><text x="92.9246%" y="687.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (7 samples, 0.01%)</title><rect x="92.6914%" y="661" width="0.0117%" height="15" fill="rgb(237,228,51)" fg:x="55321" fg:w="7"/><text x="92.9414%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (14 samples, 0.02%)</title><rect x="92.7835%" y="677" width="0.0235%" height="15" fill="rgb(243,6,42)" fg:x="55376" fg:w="14"/><text x="93.0335%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (11 samples, 0.02%)</title><rect x="93.2359%" y="565" width="0.0184%" height="15" fill="rgb(251,74,28)" fg:x="55646" fg:w="11"/><text x="93.4859%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (152 samples, 0.25%)</title><rect x="93.0014%" y="581" width="0.2547%" height="15" fill="rgb(218,20,49)" fg:x="55506" fg:w="152"/><text x="93.2514%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (596 samples, 1.00%)</title><rect x="92.9109%" y="629" width="0.9986%" height="15" fill="rgb(238,28,14)" fg:x="55452" fg:w="596"/><text x="93.1609%" y="639.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (596 samples, 1.00%)</title><rect x="92.9109%" y="613" width="0.9986%" height="15" fill="rgb(229,40,46)" fg:x="55452" fg:w="596"/><text x="93.1609%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (596 samples, 1.00%)</title><rect x="92.9109%" y="597" width="0.9986%" height="15" fill="rgb(244,195,20)" fg:x="55452" fg:w="596"/><text x="93.1609%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (390 samples, 0.65%)</title><rect x="93.2560%" y="581" width="0.6535%" height="15" fill="rgb(253,56,35)" fg:x="55658" fg:w="390"/><text x="93.5060%" y="591.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (27 samples, 0.05%)</title><rect x="93.8642%" y="565" width="0.0452%" height="15" fill="rgb(210,149,44)" fg:x="56021" fg:w="27"/><text x="94.1142%" y="575.50"></text></g><g><title>[libc.so.6] (80 samples, 0.13%)</title><rect x="93.9262%" y="613" width="0.1340%" height="15" fill="rgb(240,135,12)" fg:x="56058" fg:w="80"/><text x="94.1762%" y="623.50"></text></g><g><title>[libc.so.6] (85 samples, 0.14%)</title><rect x="94.0620%" y="597" width="0.1424%" height="15" fill="rgb(251,24,50)" fg:x="56139" fg:w="85"/><text x="94.3120%" y="607.50"></text></g><g><title>[libc.so.6] (109 samples, 0.18%)</title><rect x="94.2211%" y="581" width="0.1826%" height="15" fill="rgb(243,200,47)" fg:x="56234" fg:w="109"/><text x="94.4711%" y="591.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (124 samples, 0.21%)</title><rect x="94.2044%" y="597" width="0.2078%" height="15" fill="rgb(224,166,26)" fg:x="56224" fg:w="124"/><text x="94.4544%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (301 samples, 0.50%)</title><rect x="93.9095%" y="629" width="0.5043%" height="15" fill="rgb(233,0,47)" fg:x="56048" fg:w="301"/><text x="94.1595%" y="639.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (211 samples, 0.35%)</title><rect x="94.0603%" y="613" width="0.3535%" height="15" fill="rgb(253,80,5)" fg:x="56138" fg:w="211"/><text x="94.3103%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.01%)</title><rect x="94.8143%" y="501" width="0.0101%" height="15" fill="rgb(214,133,25)" fg:x="56588" fg:w="6"/><text x="95.0643%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (116 samples, 0.19%)</title><rect x="94.6316%" y="517" width="0.1944%" height="15" fill="rgb(209,27,14)" fg:x="56479" fg:w="116"/><text x="94.8816%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.01%)</title><rect x="94.8344%" y="517" width="0.0134%" height="15" fill="rgb(219,102,51)" fg:x="56600" fg:w="8"/><text x="95.0844%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (242 samples, 0.41%)</title><rect x="94.4440%" y="533" width="0.4055%" height="15" fill="rgb(237,18,16)" fg:x="56367" fg:w="242"/><text x="94.6940%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.01%)</title><rect x="95.0070%" y="485" width="0.0134%" height="15" fill="rgb(241,85,17)" fg:x="56703" fg:w="8"/><text x="95.2570%" y="495.50"></text></g><g><title>hashbrown::map::make_hash (1,294 samples, 2.17%)</title><rect x="92.8573%" y="661" width="2.1681%" height="15" fill="rgb(236,90,42)" fg:x="55420" fg:w="1294"/><text x="93.1073%" y="671.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (1,294 samples, 2.17%)</title><rect x="92.8573%" y="645" width="2.1681%" height="15" fill="rgb(249,57,21)" fg:x="55420" fg:w="1294"/><text x="93.1073%" y="655.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (365 samples, 0.61%)</title><rect x="94.4138%" y="629" width="0.6116%" height="15" fill="rgb(243,12,36)" fg:x="56349" fg:w="365"/><text x="94.6638%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (361 samples, 0.60%)</title><rect x="94.4205%" y="613" width="0.6049%" height="15" fill="rgb(253,128,47)" fg:x="56353" fg:w="361"/><text x="94.6705%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (349 samples, 0.58%)</title><rect x="94.4406%" y="597" width="0.5848%" height="15" fill="rgb(207,33,20)" fg:x="56365" fg:w="349"/><text x="94.6906%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (349 samples, 0.58%)</title><rect x="94.4406%" y="581" width="0.5848%" height="15" fill="rgb(233,215,35)" fg:x="56365" fg:w="349"/><text x="94.6906%" y="591.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (349 samples, 0.58%)</title><rect x="94.4406%" y="565" width="0.5848%" height="15" fill="rgb(249,188,52)" fg:x="56365" fg:w="349"/><text x="94.6906%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (347 samples, 0.58%)</title><rect x="94.4440%" y="549" width="0.5814%" height="15" fill="rgb(225,12,32)" fg:x="56367" fg:w="347"/><text x="94.6940%" y="559.50"></text></g><g><title>core::hash::Hasher::write_u8 (105 samples, 0.18%)</title><rect x="94.8495%" y="533" width="0.1759%" height="15" fill="rgb(247,98,14)" fg:x="56609" fg:w="105"/><text x="95.0995%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (103 samples, 0.17%)</title><rect x="94.8528%" y="517" width="0.1726%" height="15" fill="rgb(247,219,48)" fg:x="56611" fg:w="103"/><text x="95.1028%" y="527.50"></text></g><g><title>core::hash::sip::u8to64_le (64 samples, 0.11%)</title><rect x="94.9182%" y="501" width="0.1072%" height="15" fill="rgb(253,60,48)" fg:x="56650" fg:w="64"/><text x="95.1682%" y="511.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (8 samples, 0.01%)</title><rect x="95.0555%" y="645" width="0.0134%" height="15" fill="rgb(245,15,52)" fg:x="56732" fg:w="8"/><text x="95.3055%" y="655.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (8 samples, 0.01%)</title><rect x="95.0555%" y="629" width="0.0134%" height="15" fill="rgb(220,133,28)" fg:x="56732" fg:w="8"/><text x="95.3055%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (7 samples, 0.01%)</title><rect x="95.1443%" y="597" width="0.0117%" height="15" fill="rgb(217,180,4)" fg:x="56785" fg:w="7"/><text x="95.3943%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (30 samples, 0.05%)</title><rect x="95.1092%" y="629" width="0.0503%" height="15" fill="rgb(251,24,1)" fg:x="56764" fg:w="30"/><text x="95.3592%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (28 samples, 0.05%)</title><rect x="95.1125%" y="613" width="0.0469%" height="15" fill="rgb(212,185,49)" fg:x="56766" fg:w="28"/><text x="95.3625%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (85 samples, 0.14%)</title><rect x="95.4392%" y="613" width="0.1424%" height="15" fill="rgb(215,175,22)" fg:x="56961" fg:w="85"/><text x="95.6892%" y="623.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (9 samples, 0.02%)</title><rect x="95.6906%" y="597" width="0.0151%" height="15" fill="rgb(250,205,14)" fg:x="57111" fg:w="9"/><text x="95.9406%" y="607.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (42 samples, 0.07%)</title><rect x="95.7459%" y="581" width="0.0704%" height="15" fill="rgb(225,211,22)" fg:x="57144" fg:w="42"/><text x="95.9959%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (149 samples, 0.25%)</title><rect x="95.5817%" y="613" width="0.2497%" height="15" fill="rgb(251,179,42)" fg:x="57046" fg:w="149"/><text x="95.8317%" y="623.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (75 samples, 0.13%)</title><rect x="95.7056%" y="597" width="0.1257%" height="15" fill="rgb(208,216,51)" fg:x="57120" fg:w="75"/><text x="95.9556%" y="607.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (9 samples, 0.02%)</title><rect x="95.8162%" y="581" width="0.0151%" height="15" fill="rgb(235,36,11)" fg:x="57186" fg:w="9"/><text x="96.0662%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (29 samples, 0.05%)</title><rect x="95.9369%" y="501" width="0.0486%" height="15" fill="rgb(213,189,28)" fg:x="57258" fg:w="29"/><text x="96.1869%" y="511.50"></text></g><g><title>core::slice::raw::from_raw_parts (26 samples, 0.04%)</title><rect x="95.9419%" y="485" width="0.0436%" height="15" fill="rgb(227,203,42)" fg:x="57261" fg:w="26"/><text x="96.1919%" y="495.50"></text></g><g><title>core::ptr::slice_from_raw_parts (26 samples, 0.04%)</title><rect x="95.9419%" y="469" width="0.0436%" height="15" fill="rgb(244,72,36)" fg:x="57261" fg:w="26"/><text x="96.1919%" y="479.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (25 samples, 0.04%)</title><rect x="95.9436%" y="453" width="0.0419%" height="15" fill="rgb(213,53,17)" fg:x="57262" fg:w="25"/><text x="96.1936%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (46 samples, 0.08%)</title><rect x="95.9117%" y="517" width="0.0771%" height="15" fill="rgb(207,167,3)" fg:x="57243" fg:w="46"/><text x="96.1617%" y="527.50"></text></g><g><title>hashbrown::map::equivalent_key::_{{closure}} (142 samples, 0.24%)</title><rect x="95.8648%" y="597" width="0.2379%" height="15" fill="rgb(216,98,30)" fg:x="57215" fg:w="142"/><text x="96.1148%" y="607.50"></text></g><g><title>&lt;Q as hashbrown::Equivalent&lt;K&gt;&gt;::equivalent (141 samples, 0.24%)</title><rect x="95.8665%" y="581" width="0.2362%" height="15" fill="rgb(236,123,15)" fg:x="57216" fg:w="141"/><text x="96.1165%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (129 samples, 0.22%)</title><rect x="95.8866%" y="565" width="0.2161%" height="15" fill="rgb(248,81,50)" fg:x="57228" fg:w="129"/><text x="96.1366%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (123 samples, 0.21%)</title><rect x="95.8967%" y="549" width="0.2061%" height="15" fill="rgb(214,120,4)" fg:x="57234" fg:w="123"/><text x="96.1467%" y="559.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (121 samples, 0.20%)</title><rect x="95.9000%" y="533" width="0.2027%" height="15" fill="rgb(208,179,34)" fg:x="57236" fg:w="121"/><text x="96.1500%" y="543.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (68 samples, 0.11%)</title><rect x="95.9888%" y="517" width="0.1139%" height="15" fill="rgb(227,140,7)" fg:x="57289" fg:w="68"/><text x="96.2388%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (68 samples, 0.11%)</title><rect x="95.9888%" y="501" width="0.1139%" height="15" fill="rgb(214,22,6)" fg:x="57289" fg:w="68"/><text x="96.2388%" y="511.50"></text></g><g><title>[libc.so.6] (33 samples, 0.06%)</title><rect x="96.0475%" y="485" width="0.0553%" height="15" fill="rgb(207,137,27)" fg:x="57324" fg:w="33"/><text x="96.2975%" y="495.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (10 samples, 0.02%)</title><rect x="96.1027%" y="597" width="0.0168%" height="15" fill="rgb(210,8,46)" fg:x="57357" fg:w="10"/><text x="96.3527%" y="607.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (10 samples, 0.02%)</title><rect x="96.1027%" y="581" width="0.0168%" height="15" fill="rgb(240,16,54)" fg:x="57357" fg:w="10"/><text x="96.3527%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (8 samples, 0.01%)</title><rect x="96.1714%" y="565" width="0.0134%" height="15" fill="rgb(211,209,29)" fg:x="57398" fg:w="8"/><text x="96.4214%" y="575.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (42 samples, 0.07%)</title><rect x="96.1195%" y="581" width="0.0704%" height="15" fill="rgb(226,228,24)" fg:x="57367" fg:w="42"/><text x="96.3695%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (215 samples, 0.36%)</title><rect x="95.8313%" y="613" width="0.3602%" height="15" fill="rgb(222,84,9)" fg:x="57195" fg:w="215"/><text x="96.0813%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (43 samples, 0.07%)</title><rect x="96.1195%" y="597" width="0.0720%" height="15" fill="rgb(234,203,30)" fg:x="57367" fg:w="43"/><text x="96.3695%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (152 samples, 0.25%)</title><rect x="96.2016%" y="613" width="0.2547%" height="15" fill="rgb(238,109,14)" fg:x="57416" fg:w="152"/><text x="96.4516%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (128 samples, 0.21%)</title><rect x="96.2418%" y="597" width="0.2145%" height="15" fill="rgb(233,206,34)" fg:x="57440" fg:w="128"/><text x="96.4918%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.01%)</title><rect x="96.4445%" y="581" width="0.0117%" height="15" fill="rgb(220,167,47)" fg:x="57561" fg:w="7"/><text x="96.6945%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (51 samples, 0.09%)</title><rect x="96.5953%" y="597" width="0.0855%" height="15" fill="rgb(238,105,10)" fg:x="57651" fg:w="51"/><text x="96.8453%" y="607.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (21 samples, 0.04%)</title><rect x="96.6456%" y="581" width="0.0352%" height="15" fill="rgb(213,227,17)" fg:x="57681" fg:w="21"/><text x="96.8956%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (169 samples, 0.28%)</title><rect x="96.6808%" y="597" width="0.2832%" height="15" fill="rgb(217,132,38)" fg:x="57702" fg:w="169"/><text x="96.9308%" y="607.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (13 samples, 0.02%)</title><rect x="96.9422%" y="581" width="0.0218%" height="15" fill="rgb(242,146,4)" fg:x="57858" fg:w="13"/><text x="97.1922%" y="591.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (406 samples, 0.68%)</title><rect x="96.4563%" y="613" width="0.6803%" height="15" fill="rgb(212,61,9)" fg:x="57568" fg:w="406"/><text x="96.7063%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (103 samples, 0.17%)</title><rect x="96.9640%" y="597" width="0.1726%" height="15" fill="rgb(247,126,22)" fg:x="57871" fg:w="103"/><text x="97.2140%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (99 samples, 0.17%)</title><rect x="96.9707%" y="581" width="0.1659%" height="15" fill="rgb(220,196,2)" fg:x="57875" fg:w="99"/><text x="97.2207%" y="591.50"></text></g><g><title>core::core_arch::simd::i8x16::new (8 samples, 0.01%)</title><rect x="97.1231%" y="565" width="0.0134%" height="15" fill="rgb(208,46,4)" fg:x="57966" fg:w="8"/><text x="97.3731%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (44 samples, 0.07%)</title><rect x="97.2337%" y="581" width="0.0737%" height="15" fill="rgb(252,104,46)" fg:x="58032" fg:w="44"/><text x="97.4837%" y="591.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (15 samples, 0.03%)</title><rect x="97.2823%" y="565" width="0.0251%" height="15" fill="rgb(237,152,48)" fg:x="58061" fg:w="15"/><text x="97.5323%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (96 samples, 0.16%)</title><rect x="97.3074%" y="581" width="0.1608%" height="15" fill="rgb(221,59,37)" fg:x="58076" fg:w="96"/><text x="97.5574%" y="591.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (16 samples, 0.03%)</title><rect x="97.4415%" y="565" width="0.0268%" height="15" fill="rgb(209,202,51)" fg:x="58156" fg:w="16"/><text x="97.6915%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (3,485 samples, 5.84%)</title><rect x="91.7263%" y="789" width="5.8392%" height="15" fill="rgb(228,81,30)" fg:x="54745" fg:w="3485"/><text x="91.9763%" y="799.50">core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3,469 samples, 5.81%)</title><rect x="91.7531%" y="773" width="5.8124%" height="15" fill="rgb(227,42,39)" fg:x="54761" fg:w="3469"/><text x="92.0031%" y="783.50">core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::all::check::_{{closure}} (2,902 samples, 4.86%)</title><rect x="92.7031%" y="757" width="4.8624%" height="15" fill="rgb(221,26,2)" fg:x="55328" fg:w="2902"/><text x="92.9531%" y="767.50">core::..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::is_subset::_{{closure}} (2,872 samples, 4.81%)</title><rect x="92.7534%" y="741" width="4.8121%" height="15" fill="rgb(254,61,31)" fg:x="55358" fg:w="2872"/><text x="93.0034%" y="751.50">std::c..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (2,869 samples, 4.81%)</title><rect x="92.7584%" y="725" width="4.8071%" height="15" fill="rgb(222,173,38)" fg:x="55361" fg:w="2869"/><text x="93.0084%" y="735.50">std::c..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (2,869 samples, 4.81%)</title><rect x="92.7584%" y="709" width="4.8071%" height="15" fill="rgb(218,50,12)" fg:x="55361" fg:w="2869"/><text x="93.0084%" y="719.50">hashbr..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2,864 samples, 4.80%)</title><rect x="92.7668%" y="693" width="4.7987%" height="15" fill="rgb(223,88,40)" fg:x="55366" fg:w="2864"/><text x="93.0168%" y="703.50">hashbr..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2,840 samples, 4.76%)</title><rect x="92.8070%" y="677" width="4.7585%" height="15" fill="rgb(237,54,19)" fg:x="55390" fg:w="2840"/><text x="93.0570%" y="687.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1,516 samples, 2.54%)</title><rect x="95.0254%" y="661" width="2.5401%" height="15" fill="rgb(251,129,25)" fg:x="56714" fg:w="1516"/><text x="95.2754%" y="671.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1,490 samples, 2.50%)</title><rect x="95.0689%" y="645" width="2.4965%" height="15" fill="rgb(238,97,19)" fg:x="56740" fg:w="1490"/><text x="95.3189%" y="655.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1,436 samples, 2.41%)</title><rect x="95.1594%" y="629" width="2.4060%" height="15" fill="rgb(240,169,18)" fg:x="56794" fg:w="1436"/><text x="95.4094%" y="639.50">ha..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (256 samples, 0.43%)</title><rect x="97.1365%" y="613" width="0.4289%" height="15" fill="rgb(230,187,49)" fg:x="57974" fg:w="256"/><text x="97.3865%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (242 samples, 0.41%)</title><rect x="97.1600%" y="597" width="0.4055%" height="15" fill="rgb(209,44,26)" fg:x="57988" fg:w="242"/><text x="97.4100%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (58 samples, 0.10%)</title><rect x="97.4683%" y="581" width="0.0972%" height="15" fill="rgb(244,0,6)" fg:x="58172" fg:w="58"/><text x="97.7183%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (57 samples, 0.10%)</title><rect x="97.4700%" y="565" width="0.0955%" height="15" fill="rgb(248,18,21)" fg:x="58173" fg:w="57"/><text x="97.7200%" y="575.50"></text></g><g><title>[libc.so.6] (45 samples, 0.08%)</title><rect x="97.5671%" y="773" width="0.0754%" height="15" fill="rgb(245,180,19)" fg:x="58231" fg:w="45"/><text x="97.8171%" y="783.50"></text></g><g><title>[libc.so.6] (41 samples, 0.07%)</title><rect x="97.6459%" y="757" width="0.0687%" height="15" fill="rgb(252,118,36)" fg:x="58278" fg:w="41"/><text x="97.8959%" y="767.50"></text></g><g><title>[libc.so.6] (35 samples, 0.06%)</title><rect x="97.7163%" y="741" width="0.0586%" height="15" fill="rgb(210,224,19)" fg:x="58320" fg:w="35"/><text x="97.9663%" y="751.50"></text></g><g><title>[libc.so.6] (39 samples, 0.07%)</title><rect x="97.7833%" y="725" width="0.0653%" height="15" fill="rgb(218,30,24)" fg:x="58360" fg:w="39"/><text x="98.0333%" y="735.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (52 samples, 0.09%)</title><rect x="97.9425%" y="709" width="0.0871%" height="15" fill="rgb(219,75,50)" fg:x="58455" fg:w="52"/><text x="98.1925%" y="719.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (9 samples, 0.02%)</title><rect x="98.0145%" y="693" width="0.0151%" height="15" fill="rgb(234,72,50)" fg:x="58498" fg:w="9"/><text x="98.2645%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (16 samples, 0.03%)</title><rect x="98.0463%" y="693" width="0.0268%" height="15" fill="rgb(219,100,48)" fg:x="58517" fg:w="16"/><text x="98.2963%" y="703.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (208 samples, 0.35%)</title><rect x="98.0296%" y="709" width="0.3485%" height="15" fill="rgb(253,5,41)" fg:x="58507" fg:w="208"/><text x="98.2796%" y="719.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (177 samples, 0.30%)</title><rect x="98.0815%" y="693" width="0.2966%" height="15" fill="rgb(247,181,11)" fg:x="58538" fg:w="177"/><text x="98.3315%" y="703.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (150 samples, 0.25%)</title><rect x="98.1268%" y="677" width="0.2513%" height="15" fill="rgb(222,223,25)" fg:x="58565" fg:w="150"/><text x="98.3768%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (134 samples, 0.22%)</title><rect x="98.1536%" y="661" width="0.2245%" height="15" fill="rgb(214,198,28)" fg:x="58581" fg:w="134"/><text x="98.4036%" y="671.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (11 samples, 0.02%)</title><rect x="98.3597%" y="645" width="0.0184%" height="15" fill="rgb(230,46,43)" fg:x="58704" fg:w="11"/><text x="98.6097%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (320 samples, 0.54%)</title><rect x="97.8486%" y="725" width="0.5362%" height="15" fill="rgb(233,65,53)" fg:x="58399" fg:w="320"/><text x="98.0986%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (365 samples, 0.61%)</title><rect x="97.7749%" y="741" width="0.6116%" height="15" fill="rgb(221,121,27)" fg:x="58355" fg:w="365"/><text x="98.0249%" y="751.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::iter (492 samples, 0.82%)</title><rect x="97.5655%" y="789" width="0.8244%" height="15" fill="rgb(247,70,47)" fg:x="58230" fg:w="492"/><text x="97.8155%" y="799.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::iter (446 samples, 0.75%)</title><rect x="97.6425%" y="773" width="0.7473%" height="15" fill="rgb(228,85,35)" fg:x="58276" fg:w="446"/><text x="97.8925%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::keys (403 samples, 0.68%)</title><rect x="97.7146%" y="757" width="0.6752%" height="15" fill="rgb(209,50,18)" fg:x="58319" fg:w="403"/><text x="97.9646%" y="767.50"></text></g><g><title>aes_grinder::exaustive_search::update_queue (58,197 samples, 97.51%)</title><rect x="0.8813%" y="917" width="97.5102%" height="15" fill="rgb(250,19,35)" fg:x="526" fg:w="58197"/><text x="1.1313%" y="927.50">aes_grinder::exaustive_search::update_queue</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::retain (55,617 samples, 93.19%)</title><rect x="5.2042%" y="901" width="93.1873%" height="15" fill="rgb(253,107,29)" fg:x="3106" fg:w="55617"/><text x="5.4542%" y="911.50">std::collections::hash::set::HashSet&lt;T,S&gt;::retain</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::retain (55,617 samples, 93.19%)</title><rect x="5.2042%" y="885" width="93.1873%" height="15" fill="rgb(252,179,29)" fg:x="3106" fg:w="55617"/><text x="5.4542%" y="895.50">hashbrown::set::HashSet&lt;T,S,A&gt;::retain</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::retain (55,617 samples, 93.19%)</title><rect x="5.2042%" y="869" width="93.1873%" height="15" fill="rgb(238,194,6)" fg:x="3106" fg:w="55617"/><text x="5.4542%" y="879.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::retain</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::retain::_{{closure}} (55,316 samples, 92.68%)</title><rect x="5.7085%" y="853" width="92.6830%" height="15" fill="rgb(238,164,29)" fg:x="3407" fg:w="55316"/><text x="5.9585%" y="863.50">hashbrown::set::HashSet&lt;T,S,A&gt;::retain::_{{closure}}</text></g><g><title>aes_grinder::exaustive_search::update_queue::_{{closure}} (55,303 samples, 92.66%)</title><rect x="5.7303%" y="837" width="92.6612%" height="15" fill="rgb(224,25,9)" fg:x="3420" fg:w="55303"/><text x="5.9803%" y="847.50">aes_grinder::exaustive_search::update_queue::_{{closure}}</text></g><g><title>aes_grinder::algo::Algo::compare1 (55,058 samples, 92.25%)</title><rect x="6.1408%" y="821" width="92.2507%" height="15" fill="rgb(244,153,23)" fg:x="3665" fg:w="55058"/><text x="6.3908%" y="831.50">aes_grinder::algo::Algo::compare1</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::is_subset (4,037 samples, 6.76%)</title><rect x="91.6274%" y="805" width="6.7641%" height="15" fill="rgb(212,203,14)" fg:x="54686" fg:w="4037"/><text x="91.8774%" y="815.50">std::coll..</text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.01%)</title><rect x="98.4032%" y="901" width="0.0101%" height="15" fill="rgb(220,164,20)" fg:x="58730" fg:w="6"/><text x="98.6532%" y="911.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.01%)</title><rect x="98.4032%" y="885" width="0.0101%" height="15" fill="rgb(222,203,48)" fg:x="58730" fg:w="6"/><text x="98.6532%" y="895.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.01%)</title><rect x="98.4032%" y="869" width="0.0101%" height="15" fill="rgb(215,159,22)" fg:x="58730" fg:w="6"/><text x="98.6532%" y="879.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.01%)</title><rect x="98.4032%" y="853" width="0.0101%" height="15" fill="rgb(216,183,47)" fg:x="58730" fg:w="6"/><text x="98.6532%" y="863.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (11 samples, 0.02%)</title><rect x="98.4602%" y="549" width="0.0184%" height="15" fill="rgb(229,195,25)" fg:x="58764" fg:w="11"/><text x="98.7102%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (34 samples, 0.06%)</title><rect x="98.4568%" y="597" width="0.0570%" height="15" fill="rgb(224,132,51)" fg:x="58762" fg:w="34"/><text x="98.7068%" y="607.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (34 samples, 0.06%)</title><rect x="98.4568%" y="581" width="0.0570%" height="15" fill="rgb(240,63,7)" fg:x="58762" fg:w="34"/><text x="98.7068%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (34 samples, 0.06%)</title><rect x="98.4568%" y="565" width="0.0570%" height="15" fill="rgb(249,182,41)" fg:x="58762" fg:w="34"/><text x="98.7068%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (21 samples, 0.04%)</title><rect x="98.4786%" y="549" width="0.0352%" height="15" fill="rgb(243,47,26)" fg:x="58775" fg:w="21"/><text x="98.7286%" y="559.50"></text></g><g><title>[libc.so.6] (6 samples, 0.01%)</title><rect x="98.5172%" y="581" width="0.0101%" height="15" fill="rgb(233,48,2)" fg:x="58798" fg:w="6"/><text x="98.7672%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (17 samples, 0.03%)</title><rect x="98.5138%" y="597" width="0.0285%" height="15" fill="rgb(244,165,34)" fg:x="58796" fg:w="17"/><text x="98.7638%" y="607.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (9 samples, 0.02%)</title><rect x="98.5272%" y="581" width="0.0151%" height="15" fill="rgb(207,89,7)" fg:x="58804" fg:w="9"/><text x="98.7772%" y="591.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (7 samples, 0.01%)</title><rect x="98.5306%" y="565" width="0.0117%" height="15" fill="rgb(244,117,36)" fg:x="58806" fg:w="7"/><text x="98.7806%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16 samples, 0.03%)</title><rect x="98.5440%" y="501" width="0.0268%" height="15" fill="rgb(226,144,34)" fg:x="58814" fg:w="16"/><text x="98.7940%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (81 samples, 0.14%)</title><rect x="98.4485%" y="629" width="0.1357%" height="15" fill="rgb(213,23,19)" fg:x="58757" fg:w="81"/><text x="98.6985%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (81 samples, 0.14%)</title><rect x="98.4485%" y="613" width="0.1357%" height="15" fill="rgb(217,75,12)" fg:x="58757" fg:w="81"/><text x="98.6985%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (25 samples, 0.04%)</title><rect x="98.5423%" y="597" width="0.0419%" height="15" fill="rgb(224,159,17)" fg:x="58813" fg:w="25"/><text x="98.7923%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (25 samples, 0.04%)</title><rect x="98.5423%" y="581" width="0.0419%" height="15" fill="rgb(217,118,1)" fg:x="58813" fg:w="25"/><text x="98.7923%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (24 samples, 0.04%)</title><rect x="98.5440%" y="565" width="0.0402%" height="15" fill="rgb(232,180,48)" fg:x="58814" fg:w="24"/><text x="98.7940%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (24 samples, 0.04%)</title><rect x="98.5440%" y="549" width="0.0402%" height="15" fill="rgb(230,27,33)" fg:x="58814" fg:w="24"/><text x="98.7940%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (24 samples, 0.04%)</title><rect x="98.5440%" y="533" width="0.0402%" height="15" fill="rgb(205,31,21)" fg:x="58814" fg:w="24"/><text x="98.7940%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (24 samples, 0.04%)</title><rect x="98.5440%" y="517" width="0.0402%" height="15" fill="rgb(253,59,4)" fg:x="58814" fg:w="24"/><text x="98.7940%" y="527.50"></text></g><g><title>core::hash::Hasher::write_u8 (8 samples, 0.01%)</title><rect x="98.5708%" y="501" width="0.0134%" height="15" fill="rgb(224,201,9)" fg:x="58830" fg:w="8"/><text x="98.8208%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.01%)</title><rect x="98.5708%" y="485" width="0.0134%" height="15" fill="rgb(229,206,30)" fg:x="58830" fg:w="8"/><text x="98.8208%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot_in_group (18 samples, 0.03%)</title><rect x="98.6043%" y="597" width="0.0302%" height="15" fill="rgb(212,67,47)" fg:x="58850" fg:w="18"/><text x="98.8543%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (10 samples, 0.02%)</title><rect x="98.6177%" y="581" width="0.0168%" height="15" fill="rgb(211,96,50)" fg:x="58858" fg:w="10"/><text x="98.8677%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (10 samples, 0.02%)</title><rect x="98.6177%" y="565" width="0.0168%" height="15" fill="rgb(252,114,18)" fg:x="58858" fg:w="10"/><text x="98.8677%" y="575.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (7 samples, 0.01%)</title><rect x="98.6345%" y="597" width="0.0117%" height="15" fill="rgb(223,58,37)" fg:x="58868" fg:w="7"/><text x="98.8845%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (6 samples, 0.01%)</title><rect x="98.6361%" y="581" width="0.0101%" height="15" fill="rgb(237,70,4)" fg:x="58869" fg:w="6"/><text x="98.8861%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.01%)</title><rect x="98.6596%" y="581" width="0.0117%" height="15" fill="rgb(244,85,46)" fg:x="58883" fg:w="7"/><text x="98.9096%" y="591.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (16 samples, 0.03%)</title><rect x="98.6462%" y="597" width="0.0268%" height="15" fill="rgb(223,39,52)" fg:x="58875" fg:w="16"/><text x="98.8962%" y="607.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (10 samples, 0.02%)</title><rect x="98.6847%" y="565" width="0.0168%" height="15" fill="rgb(218,200,14)" fg:x="58898" fg:w="10"/><text x="98.9347%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (77 samples, 0.13%)</title><rect x="98.5842%" y="629" width="0.1290%" height="15" fill="rgb(208,171,16)" fg:x="58838" fg:w="77"/><text x="98.8342%" y="639.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (75 samples, 0.13%)</title><rect x="98.5875%" y="613" width="0.1257%" height="15" fill="rgb(234,200,18)" fg:x="58840" fg:w="75"/><text x="98.8375%" y="623.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (24 samples, 0.04%)</title><rect x="98.6730%" y="597" width="0.0402%" height="15" fill="rgb(228,45,11)" fg:x="58891" fg:w="24"/><text x="98.9230%" y="607.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (24 samples, 0.04%)</title><rect x="98.6730%" y="581" width="0.0402%" height="15" fill="rgb(237,182,11)" fg:x="58891" fg:w="24"/><text x="98.9230%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (7 samples, 0.01%)</title><rect x="98.7015%" y="565" width="0.0117%" height="15" fill="rgb(241,175,49)" fg:x="58908" fg:w="7"/><text x="98.9515%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (7 samples, 0.01%)</title><rect x="98.7015%" y="549" width="0.0117%" height="15" fill="rgb(247,38,35)" fg:x="58908" fg:w="7"/><text x="98.9515%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (10 samples, 0.02%)</title><rect x="98.7149%" y="613" width="0.0168%" height="15" fill="rgb(228,39,49)" fg:x="58916" fg:w="10"/><text x="98.9649%" y="623.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (6 samples, 0.01%)</title><rect x="98.7216%" y="597" width="0.0101%" height="15" fill="rgb(226,101,26)" fg:x="58920" fg:w="6"/><text x="98.9716%" y="607.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (175 samples, 0.29%)</title><rect x="98.4434%" y="693" width="0.2932%" height="15" fill="rgb(206,141,19)" fg:x="58754" fg:w="175"/><text x="98.6934%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (173 samples, 0.29%)</title><rect x="98.4468%" y="677" width="0.2899%" height="15" fill="rgb(211,200,13)" fg:x="58756" fg:w="173"/><text x="98.6968%" y="687.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (172 samples, 0.29%)</title><rect x="98.4485%" y="661" width="0.2882%" height="15" fill="rgb(241,121,6)" fg:x="58757" fg:w="172"/><text x="98.6985%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (172 samples, 0.29%)</title><rect x="98.4485%" y="645" width="0.2882%" height="15" fill="rgb(234,221,29)" fg:x="58757" fg:w="172"/><text x="98.6985%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (14 samples, 0.02%)</title><rect x="98.7132%" y="629" width="0.0235%" height="15" fill="rgb(229,136,5)" fg:x="58915" fg:w="14"/><text x="98.9632%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (206 samples, 0.35%)</title><rect x="98.4317%" y="789" width="0.3452%" height="15" fill="rgb(238,36,11)" fg:x="58747" fg:w="206"/><text x="98.6817%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (206 samples, 0.35%)</title><rect x="98.4317%" y="773" width="0.3452%" height="15" fill="rgb(251,55,41)" fg:x="58747" fg:w="206"/><text x="98.6817%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (205 samples, 0.34%)</title><rect x="98.4334%" y="757" width="0.3435%" height="15" fill="rgb(242,34,40)" fg:x="58748" fg:w="205"/><text x="98.6834%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (205 samples, 0.34%)</title><rect x="98.4334%" y="741" width="0.3435%" height="15" fill="rgb(215,42,17)" fg:x="58748" fg:w="205"/><text x="98.6834%" y="751.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (205 samples, 0.34%)</title><rect x="98.4334%" y="725" width="0.3435%" height="15" fill="rgb(207,44,46)" fg:x="58748" fg:w="205"/><text x="98.6834%" y="735.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (201 samples, 0.34%)</title><rect x="98.4401%" y="709" width="0.3368%" height="15" fill="rgb(211,206,28)" fg:x="58752" fg:w="201"/><text x="98.6901%" y="719.50"></text></g><g><title>core::ops::function::FnMut::call_mut (24 samples, 0.04%)</title><rect x="98.7367%" y="693" width="0.0402%" height="15" fill="rgb(237,167,16)" fg:x="58929" fg:w="24"/><text x="98.9867%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (24 samples, 0.04%)</title><rect x="98.7367%" y="677" width="0.0402%" height="15" fill="rgb(233,66,6)" fg:x="58929" fg:w="24"/><text x="98.9867%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (20 samples, 0.03%)</title><rect x="98.7434%" y="661" width="0.0335%" height="15" fill="rgb(246,123,29)" fg:x="58933" fg:w="20"/><text x="98.9934%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (20 samples, 0.03%)</title><rect x="98.7434%" y="645" width="0.0335%" height="15" fill="rgb(209,62,40)" fg:x="58933" fg:w="20"/><text x="98.9934%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (20 samples, 0.03%)</title><rect x="98.7434%" y="629" width="0.0335%" height="15" fill="rgb(218,4,25)" fg:x="58933" fg:w="20"/><text x="98.9934%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (20 samples, 0.03%)</title><rect x="98.7434%" y="613" width="0.0335%" height="15" fill="rgb(253,91,49)" fg:x="58933" fg:w="20"/><text x="98.9934%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (16 samples, 0.03%)</title><rect x="98.7501%" y="597" width="0.0268%" height="15" fill="rgb(228,155,29)" fg:x="58937" fg:w="16"/><text x="99.0001%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.03%)</title><rect x="98.7501%" y="581" width="0.0268%" height="15" fill="rgb(243,57,37)" fg:x="58937" fg:w="16"/><text x="99.0001%" y="591.50"></text></g><g><title>[libc.so.6] (16 samples, 0.03%)</title><rect x="98.7501%" y="565" width="0.0268%" height="15" fill="rgb(244,167,17)" fg:x="58937" fg:w="16"/><text x="99.0001%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (8 samples, 0.01%)</title><rect x="98.7987%" y="677" width="0.0134%" height="15" fill="rgb(207,181,38)" fg:x="58966" fg:w="8"/><text x="99.0487%" y="687.50"></text></g><g><title>aes_grinder::algo::Algo::get_all_variables (238 samples, 0.40%)</title><rect x="98.4183%" y="885" width="0.3988%" height="15" fill="rgb(211,8,23)" fg:x="58739" fg:w="238"/><text x="98.6683%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (235 samples, 0.39%)</title><rect x="98.4233%" y="869" width="0.3937%" height="15" fill="rgb(235,11,44)" fg:x="58742" fg:w="235"/><text x="98.6733%" y="879.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (234 samples, 0.39%)</title><rect x="98.4250%" y="853" width="0.3921%" height="15" fill="rgb(248,18,52)" fg:x="58743" fg:w="234"/><text x="98.6750%" y="863.50"></text></g><g><title>&lt;std::collections::hash::set::HashSet&lt;T,S&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (231 samples, 0.39%)</title><rect x="98.4300%" y="837" width="0.3870%" height="15" fill="rgb(208,4,7)" fg:x="58746" fg:w="231"/><text x="98.6800%" y="847.50"></text></g><g><title>&lt;hashbrown::set::HashSet&lt;T,S,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (231 samples, 0.39%)</title><rect x="98.4300%" y="821" width="0.3870%" height="15" fill="rgb(240,17,39)" fg:x="58746" fg:w="231"/><text x="98.6800%" y="831.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (231 samples, 0.39%)</title><rect x="98.4300%" y="805" width="0.3870%" height="15" fill="rgb(207,170,3)" fg:x="58746" fg:w="231"/><text x="98.6800%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (24 samples, 0.04%)</title><rect x="98.7769%" y="789" width="0.0402%" height="15" fill="rgb(236,100,52)" fg:x="58953" fg:w="24"/><text x="99.0269%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (24 samples, 0.04%)</title><rect x="98.7769%" y="773" width="0.0402%" height="15" fill="rgb(246,78,51)" fg:x="58953" fg:w="24"/><text x="99.0269%" y="783.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (24 samples, 0.04%)</title><rect x="98.7769%" y="757" width="0.0402%" height="15" fill="rgb(211,17,15)" fg:x="58953" fg:w="24"/><text x="99.0269%" y="767.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (23 samples, 0.04%)</title><rect x="98.7785%" y="741" width="0.0385%" height="15" fill="rgb(209,59,46)" fg:x="58954" fg:w="23"/><text x="99.0285%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (20 samples, 0.03%)</title><rect x="98.7836%" y="725" width="0.0335%" height="15" fill="rgb(210,92,25)" fg:x="58957" fg:w="20"/><text x="99.0336%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (17 samples, 0.03%)</title><rect x="98.7886%" y="709" width="0.0285%" height="15" fill="rgb(238,174,52)" fg:x="58960" fg:w="17"/><text x="99.0386%" y="719.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (13 samples, 0.02%)</title><rect x="98.7953%" y="693" width="0.0218%" height="15" fill="rgb(230,73,7)" fg:x="58964" fg:w="13"/><text x="99.0453%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.02%)</title><rect x="98.8255%" y="757" width="0.0168%" height="15" fill="rgb(243,124,40)" fg:x="58982" fg:w="10"/><text x="99.0755%" y="767.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (8 samples, 0.01%)</title><rect x="98.8288%" y="741" width="0.0134%" height="15" fill="rgb(244,170,11)" fg:x="58984" fg:w="8"/><text x="99.0788%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.03%)</title><rect x="98.8221%" y="789" width="0.0285%" height="15" fill="rgb(207,114,54)" fg:x="58980" fg:w="17"/><text x="99.0721%" y="799.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (16 samples, 0.03%)</title><rect x="98.8238%" y="773" width="0.0268%" height="15" fill="rgb(205,42,20)" fg:x="58981" fg:w="16"/><text x="99.0738%" y="783.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (15 samples, 0.03%)</title><rect x="98.8506%" y="773" width="0.0251%" height="15" fill="rgb(230,30,28)" fg:x="58997" fg:w="15"/><text x="99.1006%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,())&gt; (14 samples, 0.02%)</title><rect x="98.8523%" y="757" width="0.0235%" height="15" fill="rgb(205,73,54)" fg:x="58998" fg:w="14"/><text x="99.1023%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (14 samples, 0.02%)</title><rect x="98.8523%" y="741" width="0.0235%" height="15" fill="rgb(254,227,23)" fg:x="58998" fg:w="14"/><text x="99.1023%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (14 samples, 0.02%)</title><rect x="98.8523%" y="725" width="0.0235%" height="15" fill="rgb(228,202,34)" fg:x="58998" fg:w="14"/><text x="99.1023%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (11 samples, 0.02%)</title><rect x="98.8573%" y="709" width="0.0184%" height="15" fill="rgb(222,225,37)" fg:x="59001" fg:w="11"/><text x="99.1073%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.02%)</title><rect x="98.8573%" y="693" width="0.0184%" height="15" fill="rgb(221,14,54)" fg:x="59001" fg:w="11"/><text x="99.1073%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (7 samples, 0.01%)</title><rect x="98.8640%" y="677" width="0.0117%" height="15" fill="rgb(254,102,2)" fg:x="59005" fg:w="7"/><text x="99.1140%" y="687.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (18 samples, 0.03%)</title><rect x="98.8506%" y="789" width="0.0302%" height="15" fill="rgb(232,104,17)" fg:x="58997" fg:w="18"/><text x="99.1006%" y="799.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (43 samples, 0.07%)</title><rect x="98.8171%" y="805" width="0.0720%" height="15" fill="rgb(250,220,14)" fg:x="58977" fg:w="43"/><text x="99.0671%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (297 samples, 0.50%)</title><rect x="98.3999%" y="917" width="0.4976%" height="15" fill="rgb(241,158,9)" fg:x="58728" fg:w="297"/><text x="98.6499%" y="927.50"></text></g><g><title>aes_grinder::exaustive_search::exhaustive_search::_{{closure}} (289 samples, 0.48%)</title><rect x="98.4133%" y="901" width="0.4842%" height="15" fill="rgb(246,9,43)" fg:x="58736" fg:w="289"/><text x="98.6633%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::set::HashSet&lt;alloc::string::String&gt;&gt; (48 samples, 0.08%)</title><rect x="98.8171%" y="885" width="0.0804%" height="15" fill="rgb(206,73,33)" fg:x="58977" fg:w="48"/><text x="99.0671%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::set::HashSet&lt;alloc::string::String,std::collections::hash::map::RandomState&gt;&gt; (48 samples, 0.08%)</title><rect x="98.8171%" y="869" width="0.0804%" height="15" fill="rgb(222,79,8)" fg:x="58977" fg:w="48"/><text x="99.0671%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,(),std::collections::hash::map::RandomState&gt;&gt; (48 samples, 0.08%)</title><rect x="98.8171%" y="853" width="0.0804%" height="15" fill="rgb(234,8,54)" fg:x="58977" fg:w="48"/><text x="99.0671%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::string::String,())&gt;&gt; (48 samples, 0.08%)</title><rect x="98.8171%" y="837" width="0.0804%" height="15" fill="rgb(209,134,38)" fg:x="58977" fg:w="48"/><text x="99.0671%" y="847.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.08%)</title><rect x="98.8171%" y="821" width="0.0804%" height="15" fill="rgb(230,127,29)" fg:x="58977" fg:w="48"/><text x="99.0671%" y="831.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (12 samples, 0.02%)</title><rect x="99.0751%" y="757" width="0.0201%" height="15" fill="rgb(242,44,41)" fg:x="59131" fg:w="12"/><text x="99.3251%" y="767.50"></text></g><g><title>core::num::nonzero::NonZeroU16::new (6 samples, 0.01%)</title><rect x="99.1002%" y="741" width="0.0101%" height="15" fill="rgb(222,56,43)" fg:x="59146" fg:w="6"/><text x="99.3502%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.07%)</title><rect x="99.0517%" y="773" width="0.0687%" height="15" fill="rgb(238,39,47)" fg:x="59117" fg:w="41"/><text x="99.3017%" y="783.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (15 samples, 0.03%)</title><rect x="99.0952%" y="757" width="0.0251%" height="15" fill="rgb(226,79,43)" fg:x="59143" fg:w="15"/><text x="99.3452%" y="767.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (6 samples, 0.01%)</title><rect x="99.1103%" y="741" width="0.0101%" height="15" fill="rgb(242,105,53)" fg:x="59152" fg:w="6"/><text x="99.3603%" y="751.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (61 samples, 0.10%)</title><rect x="99.1204%" y="773" width="0.1022%" height="15" fill="rgb(251,132,46)" fg:x="59158" fg:w="61"/><text x="99.3704%" y="783.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (150 samples, 0.25%)</title><rect x="98.9930%" y="805" width="0.2513%" height="15" fill="rgb(231,77,14)" fg:x="59082" fg:w="150"/><text x="99.2430%" y="815.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (139 samples, 0.23%)</title><rect x="99.0114%" y="789" width="0.2329%" height="15" fill="rgb(240,135,9)" fg:x="59093" fg:w="139"/><text x="99.2614%" y="799.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (11 samples, 0.02%)</title><rect x="99.2259%" y="773" width="0.0184%" height="15" fill="rgb(248,109,14)" fg:x="59221" fg:w="11"/><text x="99.4759%" y="783.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (10 samples, 0.02%)</title><rect x="99.2276%" y="757" width="0.0168%" height="15" fill="rgb(227,146,52)" fg:x="59222" fg:w="10"/><text x="99.4776%" y="767.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (9 samples, 0.02%)</title><rect x="99.2293%" y="741" width="0.0151%" height="15" fill="rgb(232,54,3)" fg:x="59223" fg:w="9"/><text x="99.4793%" y="751.50"></text></g><g><title>&lt;std::collections::hash::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (218 samples, 0.37%)</title><rect x="98.9176%" y="869" width="0.3653%" height="15" fill="rgb(229,201,43)" fg:x="59037" fg:w="218"/><text x="99.1676%" y="879.50"></text></g><g><title>&lt;hashbrown::set::Iter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (218 samples, 0.37%)</title><rect x="98.9176%" y="853" width="0.3653%" height="15" fill="rgb(252,161,33)" fg:x="59037" fg:w="218"/><text x="99.1676%" y="863.50"></text></g><g><title>&lt;hashbrown::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (217 samples, 0.36%)</title><rect x="98.9193%" y="837" width="0.3636%" height="15" fill="rgb(226,146,40)" fg:x="59038" fg:w="217"/><text x="99.1693%" y="847.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (204 samples, 0.34%)</title><rect x="98.9411%" y="821" width="0.3418%" height="15" fill="rgb(219,47,25)" fg:x="59051" fg:w="204"/><text x="99.1911%" y="831.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (23 samples, 0.04%)</title><rect x="99.2443%" y="805" width="0.0385%" height="15" fill="rgb(250,135,13)" fg:x="59232" fg:w="23"/><text x="99.4943%" y="815.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (12 samples, 0.02%)</title><rect x="99.2628%" y="789" width="0.0201%" height="15" fill="rgb(219,229,18)" fg:x="59243" fg:w="12"/><text x="99.5128%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::nth (243 samples, 0.41%)</title><rect x="98.9076%" y="901" width="0.4072%" height="15" fill="rgb(217,152,27)" fg:x="59031" fg:w="243"/><text x="99.1576%" y="911.50"></text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (243 samples, 0.41%)</title><rect x="98.9076%" y="885" width="0.4072%" height="15" fill="rgb(225,71,47)" fg:x="59031" fg:w="243"/><text x="99.1576%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (17 samples, 0.03%)</title><rect x="99.2862%" y="869" width="0.0285%" height="15" fill="rgb(220,139,14)" fg:x="59257" fg:w="17"/><text x="99.5362%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (17 samples, 0.03%)</title><rect x="99.2862%" y="853" width="0.0285%" height="15" fill="rgb(247,54,32)" fg:x="59257" fg:w="17"/><text x="99.5362%" y="863.50"></text></g><g><title>rand::seq::IteratorRandom::choose (244 samples, 0.41%)</title><rect x="98.9076%" y="917" width="0.4088%" height="15" fill="rgb(252,131,39)" fg:x="59031" fg:w="244"/><text x="99.1576%" y="927.50"></text></g><g><title>aes_grinder::exaustive_search::exhaustive_search (59,265 samples, 99.30%)</title><rect x="0.0302%" y="933" width="99.2996%" height="15" fill="rgb(210,108,39)" fg:x="18" fg:w="59265"/><text x="0.2802%" y="943.50">aes_grinder::exaustive_search::exhaustive_search</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::take (8 samples, 0.01%)</title><rect x="99.3164%" y="917" width="0.0134%" height="15" fill="rgb(205,23,29)" fg:x="59275" fg:w="8"/><text x="99.5664%" y="927.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::take (8 samples, 0.01%)</title><rect x="99.3164%" y="901" width="0.0134%" height="15" fill="rgb(246,139,46)" fg:x="59275" fg:w="8"/><text x="99.5664%" y="911.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (8 samples, 0.01%)</title><rect x="99.3164%" y="885" width="0.0134%" height="15" fill="rgb(250,81,26)" fg:x="59275" fg:w="8"/><text x="99.5664%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.01%)</title><rect x="99.3365%" y="725" width="0.0134%" height="15" fill="rgb(214,104,7)" fg:x="59287" fg:w="8"/><text x="99.5865%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (8 samples, 0.01%)</title><rect x="99.3365%" y="709" width="0.0134%" height="15" fill="rgb(233,189,8)" fg:x="59287" fg:w="8"/><text x="99.5865%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.02%)</title><rect x="99.3365%" y="757" width="0.0151%" height="15" fill="rgb(228,141,17)" fg:x="59287" fg:w="9"/><text x="99.5865%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (9 samples, 0.02%)</title><rect x="99.3365%" y="741" width="0.0151%" height="15" fill="rgb(247,157,1)" fg:x="59287" fg:w="9"/><text x="99.5865%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (13 samples, 0.02%)</title><rect x="99.3315%" y="869" width="0.0218%" height="15" fill="rgb(249,225,5)" fg:x="59284" fg:w="13"/><text x="99.5815%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (13 samples, 0.02%)</title><rect x="99.3315%" y="853" width="0.0218%" height="15" fill="rgb(242,55,13)" fg:x="59284" fg:w="13"/><text x="99.5815%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 0.02%)</title><rect x="99.3315%" y="837" width="0.0218%" height="15" fill="rgb(230,49,50)" fg:x="59284" fg:w="13"/><text x="99.5815%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (13 samples, 0.02%)</title><rect x="99.3315%" y="821" width="0.0218%" height="15" fill="rgb(241,111,38)" fg:x="59284" fg:w="13"/><text x="99.5815%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (13 samples, 0.02%)</title><rect x="99.3315%" y="805" width="0.0218%" height="15" fill="rgb(252,155,4)" fg:x="59284" fg:w="13"/><text x="99.5815%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (13 samples, 0.02%)</title><rect x="99.3315%" y="789" width="0.0218%" height="15" fill="rgb(212,69,32)" fg:x="59284" fg:w="13"/><text x="99.5815%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.02%)</title><rect x="99.3348%" y="773" width="0.0184%" height="15" fill="rgb(243,107,47)" fg:x="59286" fg:w="11"/><text x="99.5848%" y="783.50"></text></g><g><title>aes_grinder::matrix::Matrix::delete_column (14 samples, 0.02%)</title><rect x="99.3315%" y="885" width="0.0235%" height="15" fill="rgb(247,130,12)" fg:x="59284" fg:w="14"/><text x="99.5815%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.01%)</title><rect x="99.3683%" y="709" width="0.0134%" height="15" fill="rgb(233,74,16)" fg:x="59306" fg:w="8"/><text x="99.6183%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (8 samples, 0.01%)</title><rect x="99.3683%" y="693" width="0.0134%" height="15" fill="rgb(208,58,18)" fg:x="59306" fg:w="8"/><text x="99.6183%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.02%)</title><rect x="99.3683%" y="741" width="0.0151%" height="15" fill="rgb(242,225,1)" fg:x="59306" fg:w="9"/><text x="99.6183%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (9 samples, 0.02%)</title><rect x="99.3683%" y="725" width="0.0151%" height="15" fill="rgb(249,39,40)" fg:x="59306" fg:w="9"/><text x="99.6183%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (16 samples, 0.03%)</title><rect x="99.3633%" y="853" width="0.0268%" height="15" fill="rgb(207,72,44)" fg:x="59303" fg:w="16"/><text x="99.6133%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (16 samples, 0.03%)</title><rect x="99.3633%" y="837" width="0.0268%" height="15" fill="rgb(215,193,12)" fg:x="59303" fg:w="16"/><text x="99.6133%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 0.03%)</title><rect x="99.3633%" y="821" width="0.0268%" height="15" fill="rgb(248,41,39)" fg:x="59303" fg:w="16"/><text x="99.6133%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (16 samples, 0.03%)</title><rect x="99.3633%" y="805" width="0.0268%" height="15" fill="rgb(253,85,4)" fg:x="59303" fg:w="16"/><text x="99.6133%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (16 samples, 0.03%)</title><rect x="99.3633%" y="789" width="0.0268%" height="15" fill="rgb(243,70,31)" fg:x="59303" fg:w="16"/><text x="99.6133%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (16 samples, 0.03%)</title><rect x="99.3633%" y="773" width="0.0268%" height="15" fill="rgb(253,195,26)" fg:x="59303" fg:w="16"/><text x="99.6133%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.02%)</title><rect x="99.3683%" y="757" width="0.0218%" height="15" fill="rgb(243,42,11)" fg:x="59306" fg:w="13"/><text x="99.6183%" y="767.50"></text></g><g><title>aes_grinder::matrix::Matrix::delete_column (17 samples, 0.03%)</title><rect x="99.3633%" y="869" width="0.0285%" height="15" fill="rgb(239,66,17)" fg:x="59303" fg:w="17"/><text x="99.6133%" y="879.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="99.4119%" y="805" width="0.0117%" height="15" fill="rgb(217,132,21)" fg:x="59332" fg:w="7"/><text x="99.6619%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (7 samples, 0.01%)</title><rect x="99.4119%" y="789" width="0.0117%" height="15" fill="rgb(252,202,21)" fg:x="59332" fg:w="7"/><text x="99.6619%" y="799.50"></text></g><g><title>alloc::alloc::Global::grow_impl (6 samples, 0.01%)</title><rect x="99.4136%" y="773" width="0.0101%" height="15" fill="rgb(233,98,36)" fg:x="59333" fg:w="6"/><text x="99.6636%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (13 samples, 0.02%)</title><rect x="99.4085%" y="821" width="0.0218%" height="15" fill="rgb(216,153,54)" fg:x="59330" fg:w="13"/><text x="99.6585%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16 samples, 0.03%)</title><rect x="99.4052%" y="853" width="0.0268%" height="15" fill="rgb(250,99,7)" fg:x="59328" fg:w="16"/><text x="99.6552%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (14 samples, 0.02%)</title><rect x="99.4085%" y="837" width="0.0235%" height="15" fill="rgb(207,56,50)" fg:x="59330" fg:w="14"/><text x="99.6585%" y="847.50"></text></g><g><title>aes_grinder::matrix::Matrix::get_column (26 samples, 0.04%)</title><rect x="99.3918%" y="869" width="0.0436%" height="15" fill="rgb(244,61,34)" fg:x="59320" fg:w="26"/><text x="99.6418%" y="879.50"></text></g><g><title>aes_grinder::matrix::Matrix::delete_empty_colums (49 samples, 0.08%)</title><rect x="99.3549%" y="885" width="0.0821%" height="15" fill="rgb(241,50,38)" fg:x="59298" fg:w="49"/><text x="99.6049%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (10 samples, 0.02%)</title><rect x="99.4521%" y="725" width="0.0168%" height="15" fill="rgb(212,166,30)" fg:x="59356" fg:w="10"/><text x="99.7021%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (10 samples, 0.02%)</title><rect x="99.4521%" y="709" width="0.0168%" height="15" fill="rgb(249,127,32)" fg:x="59356" fg:w="10"/><text x="99.7021%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.02%)</title><rect x="99.4521%" y="757" width="0.0201%" height="15" fill="rgb(209,103,0)" fg:x="59356" fg:w="12"/><text x="99.7021%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (12 samples, 0.02%)</title><rect x="99.4521%" y="741" width="0.0201%" height="15" fill="rgb(238,209,51)" fg:x="59356" fg:w="12"/><text x="99.7021%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (25 samples, 0.04%)</title><rect x="99.4370%" y="805" width="0.0419%" height="15" fill="rgb(237,56,23)" fg:x="59347" fg:w="25"/><text x="99.6870%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (25 samples, 0.04%)</title><rect x="99.4370%" y="789" width="0.0419%" height="15" fill="rgb(215,153,46)" fg:x="59347" fg:w="25"/><text x="99.6870%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.03%)</title><rect x="99.4471%" y="773" width="0.0318%" height="15" fill="rgb(224,49,31)" fg:x="59353" fg:w="19"/><text x="99.6971%" y="783.50"></text></g><g><title>aes_grinder::matrix::Matrix::delete_row (27 samples, 0.05%)</title><rect x="99.4370%" y="885" width="0.0452%" height="15" fill="rgb(250,18,42)" fg:x="59347" fg:w="27"/><text x="99.6870%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (27 samples, 0.05%)</title><rect x="99.4370%" y="869" width="0.0452%" height="15" fill="rgb(215,176,39)" fg:x="59347" fg:w="27"/><text x="99.6870%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (27 samples, 0.05%)</title><rect x="99.4370%" y="853" width="0.0452%" height="15" fill="rgb(223,77,29)" fg:x="59347" fg:w="27"/><text x="99.6870%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (27 samples, 0.05%)</title><rect x="99.4370%" y="837" width="0.0452%" height="15" fill="rgb(234,94,52)" fg:x="59347" fg:w="27"/><text x="99.6870%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (27 samples, 0.05%)</title><rect x="99.4370%" y="821" width="0.0452%" height="15" fill="rgb(220,154,50)" fg:x="59347" fg:w="27"/><text x="99.6870%" y="831.50"></text></g><g><title>&lt;aes_grinder::matrix::Matrix as core::ops::index::Index&lt;(usize,usize)&gt;&gt;::index (15 samples, 0.03%)</title><rect x="99.5024%" y="869" width="0.0251%" height="15" fill="rgb(212,11,10)" fg:x="59386" fg:w="15"/><text x="99.7524%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (10 samples, 0.02%)</title><rect x="99.5107%" y="853" width="0.0168%" height="15" fill="rgb(205,166,19)" fg:x="59391" fg:w="10"/><text x="99.7607%" y="863.50"></text></g><g><title>aes_grinder::matrix::Matrix::remove_variable (124 samples, 0.21%)</title><rect x="99.3315%" y="901" width="0.2078%" height="15" fill="rgb(244,198,16)" fg:x="59284" fg:w="124"/><text x="99.5815%" y="911.50"></text></g><g><title>aes_grinder::matrix::Matrix::solve_on (34 samples, 0.06%)</title><rect x="99.4823%" y="885" width="0.0570%" height="15" fill="rgb(219,69,12)" fg:x="59374" fg:w="34"/><text x="99.7323%" y="895.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.02%)</title><rect x="99.5577%" y="613" width="0.0201%" height="15" fill="rgb(245,30,7)" fg:x="59419" fg:w="12"/><text x="99.8077%" y="623.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (9 samples, 0.02%)</title><rect x="99.5627%" y="597" width="0.0151%" height="15" fill="rgb(218,221,48)" fg:x="59422" fg:w="9"/><text x="99.8127%" y="607.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (7 samples, 0.01%)</title><rect x="99.5778%" y="613" width="0.0117%" height="15" fill="rgb(216,66,15)" fg:x="59431" fg:w="7"/><text x="99.8278%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.04%)</title><rect x="99.5526%" y="645" width="0.0436%" height="15" fill="rgb(226,122,50)" fg:x="59416" fg:w="26"/><text x="99.8026%" y="655.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (26 samples, 0.04%)</title><rect x="99.5526%" y="629" width="0.0436%" height="15" fill="rgb(239,156,16)" fg:x="59416" fg:w="26"/><text x="99.8026%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.05%)</title><rect x="99.5443%" y="677" width="0.0536%" height="15" fill="rgb(224,27,38)" fg:x="59411" fg:w="32"/><text x="99.7943%" y="687.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.05%)</title><rect x="99.5459%" y="661" width="0.0519%" height="15" fill="rgb(224,39,27)" fg:x="59412" fg:w="31"/><text x="99.7959%" y="671.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.06%)</title><rect x="99.5443%" y="693" width="0.0570%" height="15" fill="rgb(215,92,29)" fg:x="59411" fg:w="34"/><text x="99.7943%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.01%)</title><rect x="99.6063%" y="597" width="0.0117%" height="15" fill="rgb(207,159,16)" fg:x="59448" fg:w="7"/><text x="99.8563%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.01%)</title><rect x="99.6063%" y="581" width="0.0117%" height="15" fill="rgb(238,163,47)" fg:x="59448" fg:w="7"/><text x="99.8563%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.01%)</title><rect x="99.6063%" y="565" width="0.0117%" height="15" fill="rgb(219,91,49)" fg:x="59448" fg:w="7"/><text x="99.8563%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.01%)</title><rect x="99.6063%" y="549" width="0.0117%" height="15" fill="rgb(227,167,31)" fg:x="59448" fg:w="7"/><text x="99.8563%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.01%)</title><rect x="99.6063%" y="533" width="0.0117%" height="15" fill="rgb(234,80,54)" fg:x="59448" fg:w="7"/><text x="99.8563%" y="543.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.01%)</title><rect x="99.6063%" y="517" width="0.0117%" height="15" fill="rgb(212,114,2)" fg:x="59448" fg:w="7"/><text x="99.8563%" y="527.50"></text></g><g><title>malloc (6 samples, 0.01%)</title><rect x="99.6079%" y="501" width="0.0101%" height="15" fill="rgb(234,50,24)" fg:x="59449" fg:w="6"/><text x="99.8579%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.08%)</title><rect x="99.5443%" y="709" width="0.0754%" height="15" fill="rgb(221,68,8)" fg:x="59411" fg:w="45"/><text x="99.7943%" y="719.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (11 samples, 0.02%)</title><rect x="99.6012%" y="693" width="0.0184%" height="15" fill="rgb(254,180,31)" fg:x="59445" fg:w="11"/><text x="99.8512%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.02%)</title><rect x="99.6046%" y="677" width="0.0151%" height="15" fill="rgb(247,130,50)" fg:x="59447" fg:w="9"/><text x="99.8546%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.01%)</title><rect x="99.6063%" y="661" width="0.0134%" height="15" fill="rgb(211,109,4)" fg:x="59448" fg:w="8"/><text x="99.8563%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.01%)</title><rect x="99.6063%" y="645" width="0.0134%" height="15" fill="rgb(238,50,21)" fg:x="59448" fg:w="8"/><text x="99.8563%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.01%)</title><rect x="99.6063%" y="629" width="0.0134%" height="15" fill="rgb(225,57,45)" fg:x="59448" fg:w="8"/><text x="99.8563%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.01%)</title><rect x="99.6063%" y="613" width="0.0134%" height="15" fill="rgb(209,196,50)" fg:x="59448" fg:w="8"/><text x="99.8563%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (50 samples, 0.08%)</title><rect x="99.5392%" y="741" width="0.0838%" height="15" fill="rgb(242,140,13)" fg:x="59408" fg:w="50"/><text x="99.7892%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (50 samples, 0.08%)</title><rect x="99.5392%" y="725" width="0.0838%" height="15" fill="rgb(217,111,7)" fg:x="59408" fg:w="50"/><text x="99.7892%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (52 samples, 0.09%)</title><rect x="99.5392%" y="805" width="0.0871%" height="15" fill="rgb(253,193,51)" fg:x="59408" fg:w="52"/><text x="99.7892%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (52 samples, 0.09%)</title><rect x="99.5392%" y="789" width="0.0871%" height="15" fill="rgb(252,70,29)" fg:x="59408" fg:w="52"/><text x="99.7892%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (52 samples, 0.09%)</title><rect x="99.5392%" y="773" width="0.0871%" height="15" fill="rgb(232,127,12)" fg:x="59408" fg:w="52"/><text x="99.7892%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (52 samples, 0.09%)</title><rect x="99.5392%" y="757" width="0.0871%" height="15" fill="rgb(211,180,21)" fg:x="59408" fg:w="52"/><text x="99.7892%" y="767.50"></text></g><g><title>aes_grinder::matrix::Matrix::get_all_variables (53 samples, 0.09%)</title><rect x="99.5392%" y="821" width="0.0888%" height="15" fill="rgb(229,72,13)" fg:x="59408" fg:w="53"/><text x="99.7892%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.01%)</title><rect x="99.6347%" y="709" width="0.0101%" height="15" fill="rgb(240,211,49)" fg:x="59465" fg:w="6"/><text x="99.8847%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.01%)</title><rect x="99.6347%" y="693" width="0.0101%" height="15" fill="rgb(219,149,40)" fg:x="59465" fg:w="6"/><text x="99.8847%" y="703.50"></text></g><g><title>cfree (6 samples, 0.01%)</title><rect x="99.6347%" y="677" width="0.0101%" height="15" fill="rgb(210,127,46)" fg:x="59465" fg:w="6"/><text x="99.8847%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.03%)</title><rect x="99.6280%" y="805" width="0.0302%" height="15" fill="rgb(220,106,7)" fg:x="59461" fg:w="18"/><text x="99.8780%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (18 samples, 0.03%)</title><rect x="99.6280%" y="789" width="0.0302%" height="15" fill="rgb(249,31,22)" fg:x="59461" fg:w="18"/><text x="99.8780%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (18 samples, 0.03%)</title><rect x="99.6280%" y="773" width="0.0302%" height="15" fill="rgb(253,1,49)" fg:x="59461" fg:w="18"/><text x="99.8780%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (17 samples, 0.03%)</title><rect x="99.6297%" y="757" width="0.0285%" height="15" fill="rgb(227,144,33)" fg:x="59462" fg:w="17"/><text x="99.8797%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (15 samples, 0.03%)</title><rect x="99.6331%" y="741" width="0.0251%" height="15" fill="rgb(249,163,44)" fg:x="59464" fg:w="15"/><text x="99.8831%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.03%)</title><rect x="99.6331%" y="725" width="0.0251%" height="15" fill="rgb(234,15,39)" fg:x="59464" fg:w="15"/><text x="99.8831%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (8 samples, 0.01%)</title><rect x="99.6448%" y="709" width="0.0134%" height="15" fill="rgb(207,66,16)" fg:x="59471" fg:w="8"/><text x="99.8948%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (20 samples, 0.03%)</title><rect x="99.6280%" y="821" width="0.0335%" height="15" fill="rgb(233,112,24)" fg:x="59461" fg:w="20"/><text x="99.8780%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (77 samples, 0.13%)</title><rect x="99.5392%" y="901" width="0.1290%" height="15" fill="rgb(230,90,22)" fg:x="59408" fg:w="77"/><text x="99.7892%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (77 samples, 0.13%)</title><rect x="99.5392%" y="885" width="0.1290%" height="15" fill="rgb(229,61,13)" fg:x="59408" fg:w="77"/><text x="99.7892%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (77 samples, 0.13%)</title><rect x="99.5392%" y="869" width="0.1290%" height="15" fill="rgb(225,57,24)" fg:x="59408" fg:w="77"/><text x="99.7892%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain::_{{closure}} (77 samples, 0.13%)</title><rect x="99.5392%" y="853" width="0.1290%" height="15" fill="rgb(208,169,48)" fg:x="59408" fg:w="77"/><text x="99.7892%" y="863.50"></text></g><g><title>aes_grinder::matrix::Matrix::delete_alone_variables::_{{closure}} (77 samples, 0.13%)</title><rect x="99.5392%" y="837" width="0.1290%" height="15" fill="rgb(244,218,51)" fg:x="59408" fg:w="77"/><text x="99.7892%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (8 samples, 0.01%)</title><rect x="99.7001%" y="757" width="0.0134%" height="15" fill="rgb(214,148,10)" fg:x="59504" fg:w="8"/><text x="99.9501%" y="767.50"></text></g><g><title>core::fmt::rt::Argument::fmt (8 samples, 0.01%)</title><rect x="99.7470%" y="693" width="0.0134%" height="15" fill="rgb(225,174,27)" fg:x="59532" fg:w="8"/><text x="99.9970%" y="703.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (8 samples, 0.01%)</title><rect x="99.7470%" y="677" width="0.0134%" height="15" fill="rgb(230,96,26)" fg:x="59532" fg:w="8"/><text x="99.9970%" y="687.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (8 samples, 0.01%)</title><rect x="99.7470%" y="661" width="0.0134%" height="15" fill="rgb(232,10,30)" fg:x="59532" fg:w="8"/><text x="99.9970%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (13 samples, 0.02%)</title><rect x="99.7403%" y="741" width="0.0218%" height="15" fill="rgb(222,8,50)" fg:x="59528" fg:w="13"/><text x="99.9903%" y="751.50"></text></g><g><title>&lt;aes_grinder::utils::Number as core::fmt::Display&gt;::fmt (13 samples, 0.02%)</title><rect x="99.7403%" y="725" width="0.0218%" height="15" fill="rgb(213,81,27)" fg:x="59528" fg:w="13"/><text x="99.9903%" y="735.50"></text></g><g><title>core::fmt::write (10 samples, 0.02%)</title><rect x="99.7453%" y="709" width="0.0168%" height="15" fill="rgb(245,50,10)" fg:x="59531" fg:w="10"/><text x="99.9953%" y="719.50"></text></g><g><title>&lt;&amp;mut T as core::fmt::Display&gt;::fmt (53 samples, 0.09%)</title><rect x="99.6749%" y="789" width="0.0888%" height="15" fill="rgb(216,100,18)" fg:x="59489" fg:w="53"/><text x="99.9249%" y="799.50"></text></g><g><title>&lt;aes_grinder::matrix::Matrix as core::fmt::Display&gt;::fmt (53 samples, 0.09%)</title><rect x="99.6749%" y="773" width="0.0888%" height="15" fill="rgb(236,147,54)" fg:x="59489" fg:w="53"/><text x="99.9249%" y="783.50"></text></g><g><title>core::fmt::write (24 samples, 0.04%)</title><rect x="99.7235%" y="757" width="0.0402%" height="15" fill="rgb(205,143,26)" fg:x="59518" fg:w="24"/><text x="99.9735%" y="767.50"></text></g><g><title>aes_grinder::matrix::Matrix::delete_alone_variables (261 samples, 0.44%)</title><rect x="99.3298%" y="917" width="0.4373%" height="15" fill="rgb(236,26,9)" fg:x="59283" fg:w="261"/><text x="99.5798%" y="927.50"></text></g><g><title>std::io::stdio::_print (56 samples, 0.09%)</title><rect x="99.6733%" y="901" width="0.0938%" height="15" fill="rgb(221,165,53)" fg:x="59488" fg:w="56"/><text x="99.9233%" y="911.50"></text></g><g><title>std::io::stdio::print_to (56 samples, 0.09%)</title><rect x="99.6733%" y="885" width="0.0938%" height="15" fill="rgb(214,110,17)" fg:x="59488" fg:w="56"/><text x="99.9233%" y="895.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (56 samples, 0.09%)</title><rect x="99.6733%" y="869" width="0.0938%" height="15" fill="rgb(237,197,12)" fg:x="59488" fg:w="56"/><text x="99.9233%" y="879.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (56 samples, 0.09%)</title><rect x="99.6733%" y="853" width="0.0938%" height="15" fill="rgb(205,84,17)" fg:x="59488" fg:w="56"/><text x="99.9233%" y="863.50"></text></g><g><title>std::io::Write::write_fmt (56 samples, 0.09%)</title><rect x="99.6733%" y="837" width="0.0938%" height="15" fill="rgb(237,18,45)" fg:x="59488" fg:w="56"/><text x="99.9233%" y="847.50"></text></g><g><title>core::fmt::write (56 samples, 0.09%)</title><rect x="99.6733%" y="821" width="0.0938%" height="15" fill="rgb(221,87,14)" fg:x="59488" fg:w="56"/><text x="99.9233%" y="831.50"></text></g><g><title>core::fmt::rt::Argument::fmt (55 samples, 0.09%)</title><rect x="99.6749%" y="805" width="0.0922%" height="15" fill="rgb(238,186,15)" fg:x="59489" fg:w="55"/><text x="99.9249%" y="815.50"></text></g><g><title>aes_grinder::matrix::Matrix::drop_linear_variable (263 samples, 0.44%)</title><rect x="99.3298%" y="933" width="0.4407%" height="15" fill="rgb(208,115,11)" fg:x="59283" fg:w="263"/><text x="99.5798%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (24 samples, 0.04%)</title><rect x="99.8157%" y="821" width="0.0402%" height="15" fill="rgb(254,175,0)" fg:x="59573" fg:w="24"/><text x="100.0657%" y="831.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (12 samples, 0.02%)</title><rect x="99.9112%" y="805" width="0.0201%" height="15" fill="rgb(227,24,42)" fg:x="59630" fg:w="12"/><text x="100.1612%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.02%)</title><rect x="99.9313%" y="805" width="0.0168%" height="15" fill="rgb(223,211,37)" fg:x="59642" fg:w="10"/><text x="100.1813%" y="815.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (101 samples, 0.17%)</title><rect x="99.7839%" y="837" width="0.1692%" height="15" fill="rgb(235,49,27)" fg:x="59554" fg:w="101"/><text x="100.0339%" y="847.50"></text></g><g><title>core::str::validations::next_code_point (58 samples, 0.10%)</title><rect x="99.8559%" y="821" width="0.0972%" height="15" fill="rgb(254,97,51)" fg:x="59597" fg:w="58"/><text x="100.1059%" y="831.50"></text></g><g><title>aes_grinder::parser::Parser::get_term (125 samples, 0.21%)</title><rect x="99.7772%" y="901" width="0.2094%" height="15" fill="rgb(249,51,40)" fg:x="59550" fg:w="125"/><text x="100.0272%" y="911.50"></text></g><g><title>aes_grinder::parser::Reader::next_char (124 samples, 0.21%)</title><rect x="99.7788%" y="885" width="0.2078%" height="15" fill="rgb(210,128,45)" fg:x="59551" fg:w="124"/><text x="100.0288%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::nth (124 samples, 0.21%)</title><rect x="99.7788%" y="869" width="0.2078%" height="15" fill="rgb(224,137,50)" fg:x="59551" fg:w="124"/><text x="100.0288%" y="879.50"></text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (124 samples, 0.21%)</title><rect x="99.7788%" y="853" width="0.2078%" height="15" fill="rgb(242,15,9)" fg:x="59551" fg:w="124"/><text x="100.0288%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (15 samples, 0.03%)</title><rect x="99.9615%" y="837" width="0.0251%" height="15" fill="rgb(233,187,41)" fg:x="59660" fg:w="15"/><text x="100.2115%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (12 samples, 0.02%)</title><rect x="99.9665%" y="821" width="0.0201%" height="15" fill="rgb(227,2,29)" fg:x="59663" fg:w="12"/><text x="100.2165%" y="831.50"></text></g><g><title>aes_grinder::parser::Parser::parse_line (126 samples, 0.21%)</title><rect x="99.7772%" y="917" width="0.2111%" height="15" fill="rgb(222,70,3)" fg:x="59550" fg:w="126"/><text x="100.0272%" y="927.50"></text></g><g><title>aes_grinder::parser::Parser::parse_system (133 samples, 0.22%)</title><rect x="99.7705%" y="933" width="0.2228%" height="15" fill="rgb(213,11,42)" fg:x="59546" fg:w="133"/><text x="100.0205%" y="943.50"></text></g><g><title>_start (59,664 samples, 99.97%)</title><rect x="0.0302%" y="1221" width="99.9682%" height="15" fill="rgb(225,150,9)" fg:x="18" fg:w="59664"/><text x="0.2802%" y="1231.50">_start</text></g><g><title>__libc_start_main (59,664 samples, 99.97%)</title><rect x="0.0302%" y="1205" width="99.9682%" height="15" fill="rgb(230,162,45)" fg:x="18" fg:w="59664"/><text x="0.2802%" y="1215.50">__libc_start_main</text></g><g><title>[libc.so.6] (59,664 samples, 99.97%)</title><rect x="0.0302%" y="1189" width="99.9682%" height="15" fill="rgb(222,14,52)" fg:x="18" fg:w="59664"/><text x="0.2802%" y="1199.50">[libc.so.6]</text></g><g><title>main (59,664 samples, 99.97%)</title><rect x="0.0302%" y="1173" width="99.9682%" height="15" fill="rgb(254,198,14)" fg:x="18" fg:w="59664"/><text x="0.2802%" y="1183.50">main</text></g><g><title>std::rt::lang_start (59,664 samples, 99.97%)</title><rect x="0.0302%" y="1157" width="99.9682%" height="15" fill="rgb(220,217,30)" fg:x="18" fg:w="59664"/><text x="0.2802%" y="1167.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (59,664 samples, 99.97%)</title><rect x="0.0302%" y="1141" width="99.9682%" height="15" fill="rgb(215,146,41)" fg:x="18" fg:w="59664"/><text x="0.2802%" y="1151.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (59,664 samples, 99.97%)</title><rect x="0.0302%" y="1125" width="99.9682%" height="15" fill="rgb(217,27,36)" fg:x="18" fg:w="59664"/><text x="0.2802%" y="1135.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (59,664 samples, 99.97%)</title><rect x="0.0302%" y="1109" width="99.9682%" height="15" fill="rgb(219,218,39)" fg:x="18" fg:w="59664"/><text x="0.2802%" y="1119.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (59,664 samples, 99.97%)</title><rect x="0.0302%" y="1093" width="99.9682%" height="15" fill="rgb(219,4,42)" fg:x="18" fg:w="59664"/><text x="0.2802%" y="1103.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (59,664 samples, 99.97%)</title><rect x="0.0302%" y="1077" width="99.9682%" height="15" fill="rgb(249,119,36)" fg:x="18" fg:w="59664"/><text x="0.2802%" y="1087.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (59,664 samples, 99.97%)</title><rect x="0.0302%" y="1061" width="99.9682%" height="15" fill="rgb(209,23,33)" fg:x="18" fg:w="59664"/><text x="0.2802%" y="1071.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (59,664 samples, 99.97%)</title><rect x="0.0302%" y="1045" width="99.9682%" height="15" fill="rgb(211,10,0)" fg:x="18" fg:w="59664"/><text x="0.2802%" y="1055.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (59,664 samples, 99.97%)</title><rect x="0.0302%" y="1029" width="99.9682%" height="15" fill="rgb(208,99,37)" fg:x="18" fg:w="59664"/><text x="0.2802%" y="1039.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (59,664 samples, 99.97%)</title><rect x="0.0302%" y="1013" width="99.9682%" height="15" fill="rgb(213,132,31)" fg:x="18" fg:w="59664"/><text x="0.2802%" y="1023.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (59,664 samples, 99.97%)</title><rect x="0.0302%" y="997" width="99.9682%" height="15" fill="rgb(243,129,40)" fg:x="18" fg:w="59664"/><text x="0.2802%" y="1007.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (59,664 samples, 99.97%)</title><rect x="0.0302%" y="981" width="99.9682%" height="15" fill="rgb(210,66,33)" fg:x="18" fg:w="59664"/><text x="0.2802%" y="991.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (59,664 samples, 99.97%)</title><rect x="0.0302%" y="965" width="99.9682%" height="15" fill="rgb(209,189,4)" fg:x="18" fg:w="59664"/><text x="0.2802%" y="975.50">core::ops::function::FnOnce::call_once</text></g><g><title>aes_grinder::main (59,664 samples, 99.97%)</title><rect x="0.0302%" y="949" width="99.9682%" height="15" fill="rgb(214,107,37)" fg:x="18" fg:w="59664"/><text x="0.2802%" y="959.50">aes_grinder::main</text></g><g><title>all (59,683 samples, 100%)</title><rect x="0.0000%" y="1253" width="100.0000%" height="15" fill="rgb(245,88,54)" fg:x="0" fg:w="59683"/><text x="0.2500%" y="1263.50"></text></g><g><title>aes_grinder (59,683 samples, 100.00%)</title><rect x="0.0000%" y="1237" width="100.0000%" height="15" fill="rgb(205,146,20)" fg:x="0" fg:w="59683"/><text x="0.2500%" y="1247.50">aes_grinder</text></g></svg></svg>