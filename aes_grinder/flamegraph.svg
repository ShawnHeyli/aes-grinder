<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="693.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="66110"><g><title>aes_grinder::parser::Reader::next_char (8 samples, 0.01%)</title><rect x="0.0030%" y="357" width="0.0121%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="8"/><text x="0.2530%" y="367.50"></text></g><g><title>aes_grinder::parser::Parser::parse_system (10 samples, 0.02%)</title><rect x="0.0015%" y="373" width="0.0151%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="10"/><text x="0.2515%" y="383.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (11 samples, 0.02%)</title><rect x="0.0303%" y="101" width="0.0166%" height="15" fill="rgb(221,193,54)" fg:x="20" fg:w="11"/><text x="0.2803%" y="111.50"></text></g><g><title>core::fmt::rt::Argument::fmt (17 samples, 0.03%)</title><rect x="0.0227%" y="165" width="0.0257%" height="15" fill="rgb(248,212,6)" fg:x="15" fg:w="17"/><text x="0.2727%" y="175.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u8&gt;::fmt (17 samples, 0.03%)</title><rect x="0.0227%" y="149" width="0.0257%" height="15" fill="rgb(208,68,35)" fg:x="15" fg:w="17"/><text x="0.2727%" y="159.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (17 samples, 0.03%)</title><rect x="0.0227%" y="133" width="0.0257%" height="15" fill="rgb(232,128,0)" fg:x="15" fg:w="17"/><text x="0.2727%" y="143.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (12 samples, 0.02%)</title><rect x="0.0303%" y="117" width="0.0182%" height="15" fill="rgb(207,160,47)" fg:x="20" fg:w="12"/><text x="0.2803%" y="127.50"></text></g><g><title>core::fmt::write (27 samples, 0.04%)</title><rect x="0.0212%" y="181" width="0.0408%" height="15" fill="rgb(228,23,34)" fg:x="14" fg:w="27"/><text x="0.2712%" y="191.50"></text></g><g><title>core::fmt::rt::Argument::fmt (29 samples, 0.04%)</title><rect x="0.0197%" y="213" width="0.0439%" height="15" fill="rgb(218,30,26)" fg:x="13" fg:w="29"/><text x="0.2697%" y="223.50"></text></g><g><title>&lt;aes_grinder::utils::Number as core::fmt::Display&gt;::fmt (28 samples, 0.04%)</title><rect x="0.0212%" y="197" width="0.0424%" height="15" fill="rgb(220,122,19)" fg:x="14" fg:w="28"/><text x="0.2712%" y="207.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (17 samples, 0.03%)</title><rect x="0.0650%" y="213" width="0.0257%" height="15" fill="rgb(250,228,42)" fg:x="43" fg:w="17"/><text x="0.3150%" y="223.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (17 samples, 0.03%)</title><rect x="0.0650%" y="197" width="0.0257%" height="15" fill="rgb(240,193,28)" fg:x="43" fg:w="17"/><text x="0.3150%" y="207.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (13 samples, 0.02%)</title><rect x="0.0711%" y="181" width="0.0197%" height="15" fill="rgb(216,20,37)" fg:x="47" fg:w="13"/><text x="0.3211%" y="191.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (13 samples, 0.02%)</title><rect x="0.0711%" y="165" width="0.0197%" height="15" fill="rgb(206,188,39)" fg:x="47" fg:w="13"/><text x="0.3211%" y="175.50"></text></g><g><title>core::fmt::write (49 samples, 0.07%)</title><rect x="0.0197%" y="229" width="0.0741%" height="15" fill="rgb(217,207,13)" fg:x="13" fg:w="49"/><text x="0.2697%" y="239.50"></text></g><g><title>std::io::stdio::_print (52 samples, 0.08%)</title><rect x="0.0166%" y="357" width="0.0787%" height="15" fill="rgb(231,73,38)" fg:x="11" fg:w="52"/><text x="0.2666%" y="367.50"></text></g><g><title>std::io::stdio::print_to (52 samples, 0.08%)</title><rect x="0.0166%" y="341" width="0.0787%" height="15" fill="rgb(225,20,46)" fg:x="11" fg:w="52"/><text x="0.2666%" y="351.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (52 samples, 0.08%)</title><rect x="0.0166%" y="325" width="0.0787%" height="15" fill="rgb(210,31,41)" fg:x="11" fg:w="52"/><text x="0.2666%" y="335.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (52 samples, 0.08%)</title><rect x="0.0166%" y="309" width="0.0787%" height="15" fill="rgb(221,200,47)" fg:x="11" fg:w="52"/><text x="0.2666%" y="319.50"></text></g><g><title>std::io::Write::write_fmt (52 samples, 0.08%)</title><rect x="0.0166%" y="293" width="0.0787%" height="15" fill="rgb(226,26,5)" fg:x="11" fg:w="52"/><text x="0.2666%" y="303.50"></text></g><g><title>core::fmt::write (52 samples, 0.08%)</title><rect x="0.0166%" y="277" width="0.0787%" height="15" fill="rgb(249,33,26)" fg:x="11" fg:w="52"/><text x="0.2666%" y="287.50"></text></g><g><title>core::fmt::rt::Argument::fmt (52 samples, 0.08%)</title><rect x="0.0166%" y="261" width="0.0787%" height="15" fill="rgb(235,183,28)" fg:x="11" fg:w="52"/><text x="0.2666%" y="271.50"></text></g><g><title>&lt;aes_grinder::matrix::Matrix as core::fmt::Display&gt;::fmt (51 samples, 0.08%)</title><rect x="0.0182%" y="245" width="0.0771%" height="15" fill="rgb(221,5,38)" fg:x="12" fg:w="51"/><text x="0.2682%" y="255.50"></text></g><g><title>[libc.so.6] (7 samples, 0.01%)</title><rect x="0.1225%" y="117" width="0.0106%" height="15" fill="rgb(247,18,42)" fg:x="81" fg:w="7"/><text x="0.3725%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.02%)</title><rect x="0.1225%" y="181" width="0.0166%" height="15" fill="rgb(241,131,45)" fg:x="81" fg:w="11"/><text x="0.3725%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.02%)</title><rect x="0.1225%" y="165" width="0.0166%" height="15" fill="rgb(249,31,29)" fg:x="81" fg:w="11"/><text x="0.3725%" y="175.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.02%)</title><rect x="0.1225%" y="149" width="0.0166%" height="15" fill="rgb(225,111,53)" fg:x="81" fg:w="11"/><text x="0.3725%" y="159.50"></text></g><g><title>malloc (11 samples, 0.02%)</title><rect x="0.1225%" y="133" width="0.0166%" height="15" fill="rgb(238,160,17)" fg:x="81" fg:w="11"/><text x="0.3725%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (17 samples, 0.03%)</title><rect x="0.1150%" y="293" width="0.0257%" height="15" fill="rgb(214,148,48)" fg:x="76" fg:w="17"/><text x="0.3650%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.03%)</title><rect x="0.1150%" y="277" width="0.0257%" height="15" fill="rgb(232,36,49)" fg:x="76" fg:w="17"/><text x="0.3650%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.03%)</title><rect x="0.1150%" y="261" width="0.0257%" height="15" fill="rgb(209,103,24)" fg:x="76" fg:w="17"/><text x="0.3650%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.03%)</title><rect x="0.1150%" y="245" width="0.0257%" height="15" fill="rgb(229,88,8)" fg:x="76" fg:w="17"/><text x="0.3650%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12 samples, 0.02%)</title><rect x="0.1225%" y="229" width="0.0182%" height="15" fill="rgb(213,181,19)" fg:x="81" fg:w="12"/><text x="0.3725%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12 samples, 0.02%)</title><rect x="0.1225%" y="213" width="0.0182%" height="15" fill="rgb(254,191,54)" fg:x="81" fg:w="12"/><text x="0.3725%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.02%)</title><rect x="0.1225%" y="197" width="0.0182%" height="15" fill="rgb(241,83,37)" fg:x="81" fg:w="12"/><text x="0.3725%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (18 samples, 0.03%)</title><rect x="0.1150%" y="309" width="0.0272%" height="15" fill="rgb(233,36,39)" fg:x="76" fg:w="18"/><text x="0.3650%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (33 samples, 0.05%)</title><rect x="0.1059%" y="325" width="0.0499%" height="15" fill="rgb(226,3,54)" fg:x="70" fg:w="33"/><text x="0.3559%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (40 samples, 0.06%)</title><rect x="0.0968%" y="357" width="0.0605%" height="15" fill="rgb(245,192,40)" fg:x="64" fg:w="40"/><text x="0.3468%" y="367.50"></text></g><g><title>_ZN5alloc3vec16Vec$LT$T$C$A$GT$6retain28_$u7b$$u7b$closure$u7d$$u7d$17h10a3a4df80cf6c60E.llvm.4885610665370629899 (40 samples, 0.06%)</title><rect x="0.0968%" y="341" width="0.0605%" height="15" fill="rgb(238,167,29)" fg:x="64" fg:w="40"/><text x="0.3468%" y="351.50"></text></g><g><title>aes_grinder::matrix::Matrix::drop_linear_variable (103 samples, 0.16%)</title><rect x="0.0166%" y="373" width="0.1558%" height="15" fill="rgb(232,182,51)" fg:x="11" fg:w="103"/><text x="0.2666%" y="383.50"></text></g><g><title>rand::seq::IteratorRandom::choose (127 samples, 0.19%)</title><rect x="0.1740%" y="357" width="0.1921%" height="15" fill="rgb(231,60,39)" fg:x="115" fg:w="127"/><text x="0.4240%" y="367.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h7de98786dd306c01E.llvm.2155141149179804710 (28 samples, 0.04%)</title><rect x="0.3691%" y="325" width="0.0424%" height="15" fill="rgb(208,69,12)" fg:x="244" fg:w="28"/><text x="0.6191%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (76 samples, 0.11%)</title><rect x="0.3691%" y="341" width="0.1150%" height="15" fill="rgb(235,93,37)" fg:x="244" fg:w="76"/><text x="0.6191%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (148 samples, 0.22%)</title><rect x="0.3691%" y="357" width="0.2239%" height="15" fill="rgb(213,116,39)" fg:x="244" fg:w="148"/><text x="0.6191%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.01%)</title><rect x="0.5990%" y="357" width="0.0121%" height="15" fill="rgb(222,207,29)" fg:x="396" fg:w="8"/><text x="0.8490%" y="367.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (8 samples, 0.01%)</title><rect x="0.5990%" y="341" width="0.0121%" height="15" fill="rgb(206,96,30)" fg:x="396" fg:w="8"/><text x="0.8490%" y="351.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (7 samples, 0.01%)</title><rect x="0.6005%" y="325" width="0.0106%" height="15" fill="rgb(218,138,4)" fg:x="397" fg:w="7"/><text x="0.8505%" y="335.50"></text></g><g><title>[libc.so.6] (17 samples, 0.03%)</title><rect x="0.6111%" y="341" width="0.0257%" height="15" fill="rgb(250,191,14)" fg:x="404" fg:w="17"/><text x="0.8611%" y="351.50"></text></g><g><title>cfree (31 samples, 0.05%)</title><rect x="0.6111%" y="357" width="0.0469%" height="15" fill="rgb(239,60,40)" fg:x="404" fg:w="31"/><text x="0.8611%" y="367.50"></text></g><g><title>aes_grinder::matrix::Matrix::sort_left (11 samples, 0.02%)</title><rect x="0.6656%" y="325" width="0.0166%" height="15" fill="rgb(206,27,48)" fg:x="440" fg:w="11"/><text x="0.9156%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="0.6822%" y="325" width="0.0106%" height="15" fill="rgb(225,35,8)" fg:x="451" fg:w="7"/><text x="0.9322%" y="335.50"></text></g><g><title>aes_grinder::matrix::Matrix::number_solutions (55 samples, 0.08%)</title><rect x="0.6580%" y="341" width="0.0832%" height="15" fill="rgb(250,213,24)" fg:x="435" fg:w="55"/><text x="0.9080%" y="351.50"></text></g><g><title>aes_grinder::algo::Algo::fusion_two_algo (63 samples, 0.10%)</title><rect x="0.6580%" y="357" width="0.0953%" height="15" fill="rgb(247,123,22)" fg:x="435" fg:w="63"/><text x="0.9080%" y="367.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h7de98786dd306c01E.llvm.2155141149179804710 (471 samples, 0.71%)</title><rect x="0.7533%" y="325" width="0.7124%" height="15" fill="rgb(231,138,38)" fg:x="498" fg:w="471"/><text x="1.0033%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1,256 samples, 1.90%)</title><rect x="0.7533%" y="341" width="1.8999%" height="15" fill="rgb(231,145,46)" fg:x="498" fg:w="1256"/><text x="1.0033%" y="351.50">c..</text></g><g><title>[libc.so.6] (3,905 samples, 5.91%)</title><rect x="2.6532%" y="325" width="5.9068%" height="15" fill="rgb(251,118,11)" fg:x="1754" fg:w="3905"/><text x="2.9032%" y="335.50">[libc.so..</text></g><g><title>cfree (6,006 samples, 9.08%)</title><rect x="2.6532%" y="341" width="9.0849%" height="15" fill="rgb(217,147,25)" fg:x="1754" fg:w="6006"/><text x="2.9032%" y="351.50">cfree</text></g><g><title>__rust_dealloc (135 samples, 0.20%)</title><rect x="11.7380%" y="341" width="0.2042%" height="15" fill="rgb(247,81,37)" fg:x="7760" fg:w="135"/><text x="11.9880%" y="351.50"></text></g><g><title>__rdl_dealloc (57 samples, 0.09%)</title><rect x="11.9422%" y="341" width="0.0862%" height="15" fill="rgb(209,12,38)" fg:x="7895" fg:w="57"/><text x="12.1922%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (57 samples, 0.09%)</title><rect x="11.9422%" y="325" width="0.0862%" height="15" fill="rgb(227,1,9)" fg:x="7895" fg:w="57"/><text x="12.1922%" y="335.50"></text></g><g><title>malloc (491 samples, 0.74%)</title><rect x="12.0284%" y="325" width="0.7427%" height="15" fill="rgb(248,47,43)" fg:x="7952" fg:w="491"/><text x="12.2784%" y="335.50"></text></g><g><title>__rust_alloc (32 samples, 0.05%)</title><rect x="12.7711%" y="325" width="0.0484%" height="15" fill="rgb(221,10,30)" fg:x="8443" fg:w="32"/><text x="13.0211%" y="335.50"></text></g><g><title>__rdl_alloc (23 samples, 0.03%)</title><rect x="12.8195%" y="325" width="0.0348%" height="15" fill="rgb(210,229,1)" fg:x="8475" fg:w="23"/><text x="13.0695%" y="335.50"></text></g><g><title>[libc.so.6] (123 samples, 0.19%)</title><rect x="12.8574%" y="325" width="0.1861%" height="15" fill="rgb(222,148,37)" fg:x="8500" fg:w="123"/><text x="13.1074%" y="335.50"></text></g><g><title>_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17h2ebbd0e7aa264835E.llvm.14405753220202053966 (1,621 samples, 2.45%)</title><rect x="12.0284%" y="341" width="2.4520%" height="15" fill="rgb(234,67,33)" fg:x="7952" fg:w="1621"/><text x="12.2784%" y="351.50">_Z..</text></g><g><title>[libc.so.6] (149 samples, 0.23%)</title><rect x="14.4804%" y="341" width="0.2254%" height="15" fill="rgb(247,98,35)" fg:x="9573" fg:w="149"/><text x="14.7304%" y="351.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h7de98786dd306c01E.llvm.2155141149179804710 (2,949 samples, 4.46%)</title><rect x="14.7058%" y="293" width="4.4607%" height="15" fill="rgb(247,138,52)" fg:x="9722" fg:w="2949"/><text x="14.9558%" y="303.50">_ZN71..</text></g><g><title>core::hash::BuildHasher::hash_one (9,663 samples, 14.62%)</title><rect x="14.7058%" y="309" width="14.6165%" height="15" fill="rgb(213,79,30)" fg:x="9722" fg:w="9663"/><text x="14.9558%" y="319.50">core::hash::BuildHashe..</text></g><g><title>[libc.so.6] (70 samples, 0.11%)</title><rect x="29.3223%" y="309" width="0.1059%" height="15" fill="rgb(246,177,23)" fg:x="19385" fg:w="70"/><text x="29.5723%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (18,777 samples, 28.40%)</title><rect x="14.7058%" y="325" width="28.4027%" height="15" fill="rgb(230,62,27)" fg:x="9722" fg:w="18777"/><text x="14.9558%" y="335.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (19,915 samples, 30.12%)</title><rect x="14.7058%" y="341" width="30.1240%" height="15" fill="rgb(216,154,8)" fg:x="9722" fg:w="19915"/><text x="14.9558%" y="351.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::ite..</text></g><g><title>malloc (570 samples, 0.86%)</title><rect x="44.8298%" y="325" width="0.8622%" height="15" fill="rgb(244,35,45)" fg:x="29637" fg:w="570"/><text x="45.0798%" y="335.50"></text></g><g><title>__rust_alloc (49 samples, 0.07%)</title><rect x="45.6935%" y="325" width="0.0741%" height="15" fill="rgb(251,115,12)" fg:x="30208" fg:w="49"/><text x="45.9435%" y="335.50"></text></g><g><title>__rdl_alloc (41 samples, 0.06%)</title><rect x="45.7677%" y="325" width="0.0620%" height="15" fill="rgb(240,54,50)" fg:x="30257" fg:w="41"/><text x="46.0177%" y="335.50"></text></g><g><title>[libc.so.6] (6,219 samples, 9.41%)</title><rect x="45.8327%" y="213" width="9.4070%" height="15" fill="rgb(233,84,52)" fg:x="30300" fg:w="6219"/><text x="46.0827%" y="223.50">[libc.so.6]</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (6,289 samples, 9.51%)</title><rect x="45.8312%" y="245" width="9.5129%" height="15" fill="rgb(207,117,47)" fg:x="30299" fg:w="6289"/><text x="46.0812%" y="255.50">core::ptr::con..</text></g><g><title>core::intrinsics::copy_nonoverlapping (6,289 samples, 9.51%)</title><rect x="45.8312%" y="229" width="9.5129%" height="15" fill="rgb(249,43,39)" fg:x="30299" fg:w="6289"/><text x="46.0812%" y="239.50">core::intrinsi..</text></g><g><title>[libc.so.6] (1,628 samples, 2.46%)</title><rect x="55.3441%" y="133" width="2.4626%" height="15" fill="rgb(209,38,44)" fg:x="36588" fg:w="1628"/><text x="55.5941%" y="143.50">[l..</text></g><g><title>malloc (2,967 samples, 4.49%)</title><rect x="55.3441%" y="149" width="4.4880%" height="15" fill="rgb(236,212,23)" fg:x="36588" fg:w="2967"/><text x="55.5941%" y="159.50">malloc</text></g><g><title>__rust_alloc (353 samples, 0.53%)</title><rect x="59.8336%" y="149" width="0.5340%" height="15" fill="rgb(242,79,21)" fg:x="39556" fg:w="353"/><text x="60.0836%" y="159.50"></text></g><g><title>__rdl_alloc (171 samples, 0.26%)</title><rect x="60.3676%" y="149" width="0.2587%" height="15" fill="rgb(211,96,35)" fg:x="39909" fg:w="171"/><text x="60.6176%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,554 samples, 5.38%)</title><rect x="55.3441%" y="197" width="5.3759%" height="15" fill="rgb(253,215,40)" fg:x="36588" fg:w="3554"/><text x="55.5941%" y="207.50">&lt;alloc:..</text></g><g><title>alloc::alloc::Global::alloc_impl (3,554 samples, 5.38%)</title><rect x="55.3441%" y="181" width="5.3759%" height="15" fill="rgb(211,81,21)" fg:x="36588" fg:w="3554"/><text x="55.5941%" y="191.50">alloc::..</text></g><g><title>alloc::alloc::alloc (3,554 samples, 5.38%)</title><rect x="55.3441%" y="165" width="5.3759%" height="15" fill="rgb(208,190,38)" fg:x="36588" fg:w="3554"/><text x="55.5941%" y="175.50">alloc::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (10,791 samples, 16.32%)</title><rect x="45.8312%" y="309" width="16.3228%" height="15" fill="rgb(235,213,38)" fg:x="30299" fg:w="10791"/><text x="46.0812%" y="319.50">&lt;alloc::vec::Vec&lt;T,A&gt; as ..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (10,791 samples, 16.32%)</title><rect x="45.8312%" y="293" width="16.3228%" height="15" fill="rgb(237,122,38)" fg:x="30299" fg:w="10791"/><text x="46.0812%" y="303.50">alloc::slice::&lt;impl [T]&gt;:..</text></g><g><title>alloc::slice::hack::to_vec (10,791 samples, 16.32%)</title><rect x="45.8312%" y="277" width="16.3228%" height="15" fill="rgb(244,218,35)" fg:x="30299" fg:w="10791"/><text x="46.0812%" y="287.50">alloc::slice::hack::to_vec</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (10,791 samples, 16.32%)</title><rect x="45.8312%" y="261" width="16.3228%" height="15" fill="rgb(240,68,47)" fg:x="30299" fg:w="10791"/><text x="46.0812%" y="271.50">&lt;T as alloc::slice::hack:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4,502 samples, 6.81%)</title><rect x="55.3441%" y="245" width="6.8099%" height="15" fill="rgb(210,16,53)" fg:x="36588" fg:w="4502"/><text x="55.5941%" y="255.50">alloc::ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4,502 samples, 6.81%)</title><rect x="55.3441%" y="229" width="6.8099%" height="15" fill="rgb(235,124,12)" fg:x="36588" fg:w="4502"/><text x="55.5941%" y="239.50">alloc::ra..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4,502 samples, 6.81%)</title><rect x="55.3441%" y="213" width="6.8099%" height="15" fill="rgb(224,169,11)" fg:x="36588" fg:w="4502"/><text x="55.5941%" y="223.50">alloc::ra..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (12,395 samples, 18.75%)</title><rect x="45.8312%" y="325" width="18.7491%" height="15" fill="rgb(250,166,2)" fg:x="30299" fg:w="12395"/><text x="46.0812%" y="335.50">&lt;alloc::string::String as cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (28,567 samples, 43.21%)</title><rect x="44.8298%" y="341" width="43.2113%" height="15" fill="rgb(242,216,29)" fg:x="29637" fg:w="28567"/><text x="45.0798%" y="351.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone</text></g><g><title>aes_grinder::algo::Algo::compare1 (62,940 samples, 95.20%)</title><rect x="0.7533%" y="357" width="95.2050%" height="15" fill="rgb(230,116,27)" fg:x="498" fg:w="62940"/><text x="1.0033%" y="367.50">aes_grinder::algo::Algo::compare1</text></g><g><title>_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17h2ebbd0e7aa264835E.llvm.14405753220202053966 (19 samples, 0.03%)</title><rect x="95.9598%" y="357" width="0.0287%" height="15" fill="rgb(228,99,48)" fg:x="63439" fg:w="19"/><text x="96.2098%" y="367.50"></text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.13820020210164733 (28 samples, 0.04%)</title><rect x="95.9961%" y="277" width="0.0424%" height="15" fill="rgb(253,11,6)" fg:x="63463" fg:w="28"/><text x="96.2461%" y="287.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h7de98786dd306c01E.llvm.2155141149179804710 (31 samples, 0.05%)</title><rect x="96.0384%" y="277" width="0.0469%" height="15" fill="rgb(247,143,39)" fg:x="63491" fg:w="31"/><text x="96.2884%" y="287.50"></text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.13820020210164733 (36 samples, 0.05%)</title><rect x="96.0853%" y="261" width="0.0545%" height="15" fill="rgb(236,97,10)" fg:x="63522" fg:w="36"/><text x="96.3353%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h7de98786dd306c01E.llvm.2155141149179804710 (38 samples, 0.06%)</title><rect x="96.1398%" y="261" width="0.0575%" height="15" fill="rgb(233,208,19)" fg:x="63558" fg:w="38"/><text x="96.3898%" y="271.50"></text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.13820020210164733 (41 samples, 0.06%)</title><rect x="96.1972%" y="245" width="0.0620%" height="15" fill="rgb(216,164,2)" fg:x="63596" fg:w="41"/><text x="96.4472%" y="255.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h7de98786dd306c01E.llvm.2155141149179804710 (11 samples, 0.02%)</title><rect x="96.2593%" y="245" width="0.0166%" height="15" fill="rgb(220,129,5)" fg:x="63637" fg:w="11"/><text x="96.5093%" y="255.50"></text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.13820020210164733 (25 samples, 0.04%)</title><rect x="96.2759%" y="229" width="0.0378%" height="15" fill="rgb(242,17,10)" fg:x="63648" fg:w="25"/><text x="96.5259%" y="239.50"></text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.13820020210164733 (9 samples, 0.01%)</title><rect x="96.3183%" y="213" width="0.0136%" height="15" fill="rgb(242,107,0)" fg:x="63676" fg:w="9"/><text x="96.5683%" y="223.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (13 samples, 0.02%)</title><rect x="96.3183%" y="229" width="0.0197%" height="15" fill="rgb(251,28,31)" fg:x="63676" fg:w="13"/><text x="96.5683%" y="239.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (44 samples, 0.07%)</title><rect x="96.2759%" y="245" width="0.0666%" height="15" fill="rgb(233,223,10)" fg:x="63648" fg:w="44"/><text x="96.5259%" y="255.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (104 samples, 0.16%)</title><rect x="96.1972%" y="261" width="0.1573%" height="15" fill="rgb(215,21,27)" fg:x="63596" fg:w="104"/><text x="96.4472%" y="271.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (191 samples, 0.29%)</title><rect x="96.0853%" y="277" width="0.2889%" height="15" fill="rgb(232,23,21)" fg:x="63522" fg:w="191"/><text x="96.3353%" y="287.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (256 samples, 0.39%)</title><rect x="95.9961%" y="293" width="0.3872%" height="15" fill="rgb(244,5,23)" fg:x="63463" fg:w="256"/><text x="96.2461%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (258 samples, 0.39%)</title><rect x="95.9961%" y="309" width="0.3903%" height="15" fill="rgb(226,81,46)" fg:x="63463" fg:w="258"/><text x="96.2461%" y="319.50"></text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.13820020210164733 (63 samples, 0.10%)</title><rect x="96.3863%" y="261" width="0.0953%" height="15" fill="rgb(247,70,30)" fg:x="63721" fg:w="63"/><text x="96.6363%" y="271.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h7de98786dd306c01E.llvm.2155141149179804710 (86 samples, 0.13%)</title><rect x="96.4816%" y="261" width="0.1301%" height="15" fill="rgb(212,68,19)" fg:x="63784" fg:w="86"/><text x="96.7316%" y="271.50"></text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.13820020210164733 (78 samples, 0.12%)</title><rect x="96.6117%" y="245" width="0.1180%" height="15" fill="rgb(240,187,13)" fg:x="63870" fg:w="78"/><text x="96.8617%" y="255.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h7de98786dd306c01E.llvm.2155141149179804710 (54 samples, 0.08%)</title><rect x="96.7297%" y="245" width="0.0817%" height="15" fill="rgb(223,113,26)" fg:x="63948" fg:w="54"/><text x="96.9797%" y="255.50"></text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.13820020210164733 (62 samples, 0.09%)</title><rect x="96.8114%" y="229" width="0.0938%" height="15" fill="rgb(206,192,2)" fg:x="64002" fg:w="62"/><text x="97.0614%" y="239.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h7de98786dd306c01E.llvm.2155141149179804710 (38 samples, 0.06%)</title><rect x="96.9052%" y="229" width="0.0575%" height="15" fill="rgb(241,108,4)" fg:x="64064" fg:w="38"/><text x="97.1552%" y="239.50"></text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.13820020210164733 (36 samples, 0.05%)</title><rect x="96.9626%" y="213" width="0.0545%" height="15" fill="rgb(247,173,49)" fg:x="64102" fg:w="36"/><text x="97.2126%" y="223.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h7de98786dd306c01E.llvm.2155141149179804710 (16 samples, 0.02%)</title><rect x="97.0171%" y="213" width="0.0242%" height="15" fill="rgb(224,114,35)" fg:x="64138" fg:w="16"/><text x="97.2671%" y="223.50"></text></g><g><title>_ZN81_$LT$std..collections..hash..map..DefaultHasher$u20$as$u20$core..hash..Hasher$GT$5write17h88940a1803a07021E.llvm.13820020210164733 (17 samples, 0.03%)</title><rect x="97.0413%" y="197" width="0.0257%" height="15" fill="rgb(245,159,27)" fg:x="64154" fg:w="17"/><text x="97.2913%" y="207.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (32 samples, 0.05%)</title><rect x="97.0413%" y="213" width="0.0484%" height="15" fill="rgb(245,172,44)" fg:x="64154" fg:w="32"/><text x="97.2913%" y="223.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (95 samples, 0.14%)</title><rect x="96.9626%" y="229" width="0.1437%" height="15" fill="rgb(236,23,11)" fg:x="64102" fg:w="95"/><text x="97.2126%" y="239.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (218 samples, 0.33%)</title><rect x="96.8114%" y="245" width="0.3298%" height="15" fill="rgb(205,117,38)" fg:x="64002" fg:w="218"/><text x="97.0614%" y="255.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (370 samples, 0.56%)</title><rect x="96.6117%" y="261" width="0.5597%" height="15" fill="rgb(237,72,25)" fg:x="63870" fg:w="370"/><text x="96.8617%" y="271.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::hash::Hash&gt;::hash (610 samples, 0.92%)</title><rect x="96.3863%" y="277" width="0.9227%" height="15" fill="rgb(244,70,9)" fg:x="63721" fg:w="610"/><text x="96.6363%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (612 samples, 0.93%)</title><rect x="96.3863%" y="293" width="0.9257%" height="15" fill="rgb(217,125,39)" fg:x="63721" fg:w="612"/><text x="96.6363%" y="303.50"></text></g><g><title>_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17hb8104c16a0bc0c14E.llvm.14405753220202053966 (617 samples, 0.93%)</title><rect x="96.3863%" y="309" width="0.9333%" height="15" fill="rgb(235,36,10)" fg:x="63721" fg:w="617"/><text x="96.6363%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (909 samples, 1.37%)</title><rect x="95.9961%" y="325" width="1.3750%" height="15" fill="rgb(251,123,47)" fg:x="63463" fg:w="909"/><text x="96.2461%" y="335.50"></text></g><g><title>[libc.so.6] (22 samples, 0.03%)</title><rect x="97.3786%" y="309" width="0.0333%" height="15" fill="rgb(221,13,13)" fg:x="64377" fg:w="22"/><text x="97.6286%" y="319.50"></text></g><g><title>cfree (30 samples, 0.05%)</title><rect x="97.3786%" y="325" width="0.0454%" height="15" fill="rgb(238,131,9)" fg:x="64377" fg:w="30"/><text x="97.6286%" y="335.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h7de98786dd306c01E.llvm.2155141149179804710 (30 samples, 0.05%)</title><rect x="97.4240%" y="277" width="0.0454%" height="15" fill="rgb(211,50,8)" fg:x="64407" fg:w="30"/><text x="97.6740%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (65 samples, 0.10%)</title><rect x="97.4240%" y="293" width="0.0983%" height="15" fill="rgb(245,182,24)" fg:x="64407" fg:w="65"/><text x="97.6740%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (114 samples, 0.17%)</title><rect x="97.4240%" y="309" width="0.1724%" height="15" fill="rgb(242,14,37)" fg:x="64407" fg:w="114"/><text x="97.6740%" y="319.50"></text></g><g><title>_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17h2ebbd0e7aa264835E.llvm.14405753220202053966 (34 samples, 0.05%)</title><rect x="97.5964%" y="309" width="0.0514%" height="15" fill="rgb(246,228,12)" fg:x="64521" fg:w="34"/><text x="97.8464%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (87 samples, 0.13%)</title><rect x="97.6479%" y="229" width="0.1316%" height="15" fill="rgb(213,55,15)" fg:x="64555" fg:w="87"/><text x="97.8979%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (87 samples, 0.13%)</title><rect x="97.6479%" y="213" width="0.1316%" height="15" fill="rgb(209,9,3)" fg:x="64555" fg:w="87"/><text x="97.8979%" y="223.50"></text></g><g><title>[libc.so.6] (87 samples, 0.13%)</title><rect x="97.6479%" y="197" width="0.1316%" height="15" fill="rgb(230,59,30)" fg:x="64555" fg:w="87"/><text x="97.8979%" y="207.50"></text></g><g><title>[libc.so.6] (16 samples, 0.02%)</title><rect x="97.7795%" y="117" width="0.0242%" height="15" fill="rgb(209,121,21)" fg:x="64642" fg:w="16"/><text x="98.0295%" y="127.50"></text></g><g><title>malloc (23 samples, 0.03%)</title><rect x="97.7795%" y="133" width="0.0348%" height="15" fill="rgb(220,109,13)" fg:x="64642" fg:w="23"/><text x="98.0295%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.04%)</title><rect x="97.7795%" y="181" width="0.0393%" height="15" fill="rgb(232,18,1)" fg:x="64642" fg:w="26"/><text x="98.0295%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.04%)</title><rect x="97.7795%" y="165" width="0.0393%" height="15" fill="rgb(215,41,42)" fg:x="64642" fg:w="26"/><text x="98.0295%" y="175.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.04%)</title><rect x="97.7795%" y="149" width="0.0393%" height="15" fill="rgb(224,123,36)" fg:x="64642" fg:w="26"/><text x="98.0295%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (118 samples, 0.18%)</title><rect x="97.6479%" y="293" width="0.1785%" height="15" fill="rgb(240,125,3)" fg:x="64555" fg:w="118"/><text x="97.8979%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (118 samples, 0.18%)</title><rect x="97.6479%" y="277" width="0.1785%" height="15" fill="rgb(205,98,50)" fg:x="64555" fg:w="118"/><text x="97.8979%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (118 samples, 0.18%)</title><rect x="97.6479%" y="261" width="0.1785%" height="15" fill="rgb(205,185,37)" fg:x="64555" fg:w="118"/><text x="97.8979%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (118 samples, 0.18%)</title><rect x="97.6479%" y="245" width="0.1785%" height="15" fill="rgb(238,207,15)" fg:x="64555" fg:w="118"/><text x="97.8979%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (31 samples, 0.05%)</title><rect x="97.7795%" y="229" width="0.0469%" height="15" fill="rgb(213,199,42)" fg:x="64642" fg:w="31"/><text x="98.0295%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (31 samples, 0.05%)</title><rect x="97.7795%" y="213" width="0.0469%" height="15" fill="rgb(235,201,11)" fg:x="64642" fg:w="31"/><text x="98.0295%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (31 samples, 0.05%)</title><rect x="97.7795%" y="197" width="0.0469%" height="15" fill="rgb(207,46,11)" fg:x="64642" fg:w="31"/><text x="98.0295%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (152 samples, 0.23%)</title><rect x="97.6479%" y="309" width="0.2299%" height="15" fill="rgb(241,35,35)" fg:x="64555" fg:w="152"/><text x="97.8979%" y="319.50"></text></g><g><title>aes_grinder::algo::Algo::get_all_variables (335 samples, 0.51%)</title><rect x="97.4240%" y="325" width="0.5067%" height="15" fill="rgb(243,32,47)" fg:x="64407" fg:w="335"/><text x="97.6740%" y="335.50"></text></g><g><title>[libc.so.6] (9 samples, 0.01%)</title><rect x="97.9443%" y="277" width="0.0136%" height="15" fill="rgb(247,202,23)" fg:x="64751" fg:w="9"/><text x="98.1943%" y="287.50"></text></g><g><title>malloc (15 samples, 0.02%)</title><rect x="97.9443%" y="293" width="0.0227%" height="15" fill="rgb(219,102,11)" fg:x="64751" fg:w="15"/><text x="98.1943%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (7 samples, 0.01%)</title><rect x="97.9670%" y="213" width="0.0106%" height="15" fill="rgb(243,110,44)" fg:x="64766" fg:w="7"/><text x="98.2170%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.01%)</title><rect x="97.9670%" y="197" width="0.0106%" height="15" fill="rgb(222,74,54)" fg:x="64766" fg:w="7"/><text x="98.2170%" y="207.50"></text></g><g><title>[libc.so.6] (7 samples, 0.01%)</title><rect x="97.9670%" y="181" width="0.0106%" height="15" fill="rgb(216,99,12)" fg:x="64766" fg:w="7"/><text x="98.2170%" y="191.50"></text></g><g><title>[libc.so.6] (10 samples, 0.02%)</title><rect x="97.9776%" y="101" width="0.0151%" height="15" fill="rgb(226,22,26)" fg:x="64773" fg:w="10"/><text x="98.2276%" y="111.50"></text></g><g><title>malloc (24 samples, 0.04%)</title><rect x="97.9776%" y="117" width="0.0363%" height="15" fill="rgb(217,163,10)" fg:x="64773" fg:w="24"/><text x="98.2276%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (25 samples, 0.04%)</title><rect x="97.9776%" y="165" width="0.0378%" height="15" fill="rgb(213,25,53)" fg:x="64773" fg:w="25"/><text x="98.2276%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (25 samples, 0.04%)</title><rect x="97.9776%" y="149" width="0.0378%" height="15" fill="rgb(252,105,26)" fg:x="64773" fg:w="25"/><text x="98.2276%" y="159.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.04%)</title><rect x="97.9776%" y="133" width="0.0378%" height="15" fill="rgb(220,39,43)" fg:x="64773" fg:w="25"/><text x="98.2276%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (34 samples, 0.05%)</title><rect x="97.9670%" y="277" width="0.0514%" height="15" fill="rgb(229,68,48)" fg:x="64766" fg:w="34"/><text x="98.2170%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (34 samples, 0.05%)</title><rect x="97.9670%" y="261" width="0.0514%" height="15" fill="rgb(252,8,32)" fg:x="64766" fg:w="34"/><text x="98.2170%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (34 samples, 0.05%)</title><rect x="97.9670%" y="245" width="0.0514%" height="15" fill="rgb(223,20,43)" fg:x="64766" fg:w="34"/><text x="98.2170%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (34 samples, 0.05%)</title><rect x="97.9670%" y="229" width="0.0514%" height="15" fill="rgb(229,81,49)" fg:x="64766" fg:w="34"/><text x="98.2170%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (27 samples, 0.04%)</title><rect x="97.9776%" y="213" width="0.0408%" height="15" fill="rgb(236,28,36)" fg:x="64773" fg:w="27"/><text x="98.2276%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (27 samples, 0.04%)</title><rect x="97.9776%" y="197" width="0.0408%" height="15" fill="rgb(249,185,26)" fg:x="64773" fg:w="27"/><text x="98.2276%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (27 samples, 0.04%)</title><rect x="97.9776%" y="181" width="0.0408%" height="15" fill="rgb(249,174,33)" fg:x="64773" fg:w="27"/><text x="98.2276%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (38 samples, 0.06%)</title><rect x="97.9670%" y="293" width="0.0575%" height="15" fill="rgb(233,201,37)" fg:x="64766" fg:w="38"/><text x="98.2170%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (71 samples, 0.11%)</title><rect x="97.9443%" y="309" width="0.1074%" height="15" fill="rgb(221,78,26)" fg:x="64751" fg:w="71"/><text x="98.1943%" y="319.50"></text></g><g><title>[libc.so.6] (13 samples, 0.02%)</title><rect x="98.0517%" y="277" width="0.0197%" height="15" fill="rgb(250,127,30)" fg:x="64822" fg:w="13"/><text x="98.3017%" y="287.50"></text></g><g><title>malloc (17 samples, 0.03%)</title><rect x="98.0517%" y="293" width="0.0257%" height="15" fill="rgb(230,49,44)" fg:x="64822" fg:w="17"/><text x="98.3017%" y="303.50"></text></g><g><title>[libc.so.6] (10 samples, 0.02%)</title><rect x="98.0805%" y="261" width="0.0151%" height="15" fill="rgb(229,67,23)" fg:x="64841" fg:w="10"/><text x="98.3305%" y="271.50"></text></g><g><title>malloc (11 samples, 0.02%)</title><rect x="98.0805%" y="277" width="0.0166%" height="15" fill="rgb(249,83,47)" fg:x="64841" fg:w="11"/><text x="98.3305%" y="287.50"></text></g><g><title>[libc.so.6] (61 samples, 0.09%)</title><rect x="98.0986%" y="165" width="0.0923%" height="15" fill="rgb(215,43,3)" fg:x="64853" fg:w="61"/><text x="98.3486%" y="175.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (63 samples, 0.10%)</title><rect x="98.0986%" y="197" width="0.0953%" height="15" fill="rgb(238,154,13)" fg:x="64853" fg:w="63"/><text x="98.3486%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (63 samples, 0.10%)</title><rect x="98.0986%" y="181" width="0.0953%" height="15" fill="rgb(219,56,2)" fg:x="64853" fg:w="63"/><text x="98.3486%" y="191.50"></text></g><g><title>[libc.so.6] (17 samples, 0.03%)</title><rect x="98.1939%" y="85" width="0.0257%" height="15" fill="rgb(233,0,4)" fg:x="64916" fg:w="17"/><text x="98.4439%" y="95.50"></text></g><g><title>malloc (25 samples, 0.04%)</title><rect x="98.1939%" y="101" width="0.0378%" height="15" fill="rgb(235,30,7)" fg:x="64916" fg:w="25"/><text x="98.4439%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.05%)</title><rect x="98.1939%" y="149" width="0.0484%" height="15" fill="rgb(250,79,13)" fg:x="64916" fg:w="32"/><text x="98.4439%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.05%)</title><rect x="98.1939%" y="133" width="0.0484%" height="15" fill="rgb(211,146,34)" fg:x="64916" fg:w="32"/><text x="98.4439%" y="143.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.05%)</title><rect x="98.1939%" y="117" width="0.0484%" height="15" fill="rgb(228,22,38)" fg:x="64916" fg:w="32"/><text x="98.4439%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (100 samples, 0.15%)</title><rect x="98.0986%" y="261" width="0.1513%" height="15" fill="rgb(235,168,5)" fg:x="64853" fg:w="100"/><text x="98.3486%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (100 samples, 0.15%)</title><rect x="98.0986%" y="245" width="0.1513%" height="15" fill="rgb(221,155,16)" fg:x="64853" fg:w="100"/><text x="98.3486%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (100 samples, 0.15%)</title><rect x="98.0986%" y="229" width="0.1513%" height="15" fill="rgb(215,215,53)" fg:x="64853" fg:w="100"/><text x="98.3486%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (100 samples, 0.15%)</title><rect x="98.0986%" y="213" width="0.1513%" height="15" fill="rgb(223,4,10)" fg:x="64853" fg:w="100"/><text x="98.3486%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (37 samples, 0.06%)</title><rect x="98.1939%" y="197" width="0.0560%" height="15" fill="rgb(234,103,6)" fg:x="64916" fg:w="37"/><text x="98.4439%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (37 samples, 0.06%)</title><rect x="98.1939%" y="181" width="0.0560%" height="15" fill="rgb(227,97,0)" fg:x="64916" fg:w="37"/><text x="98.4439%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (37 samples, 0.06%)</title><rect x="98.1939%" y="165" width="0.0560%" height="15" fill="rgb(234,150,53)" fg:x="64916" fg:w="37"/><text x="98.4439%" y="175.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (132 samples, 0.20%)</title><rect x="98.0986%" y="277" width="0.1997%" height="15" fill="rgb(228,201,54)" fg:x="64853" fg:w="132"/><text x="98.3486%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (189 samples, 0.29%)</title><rect x="98.0805%" y="293" width="0.2859%" height="15" fill="rgb(222,22,37)" fg:x="64841" fg:w="189"/><text x="98.3305%" y="303.50"></text></g><g><title>[libc.so.6] (8 samples, 0.01%)</title><rect x="98.3664%" y="261" width="0.0121%" height="15" fill="rgb(237,53,32)" fg:x="65030" fg:w="8"/><text x="98.6164%" y="271.50"></text></g><g><title>malloc (11 samples, 0.02%)</title><rect x="98.3664%" y="277" width="0.0166%" height="15" fill="rgb(233,25,53)" fg:x="65030" fg:w="11"/><text x="98.6164%" y="287.50"></text></g><g><title>[libc.so.6] (8 samples, 0.01%)</title><rect x="98.3906%" y="245" width="0.0121%" height="15" fill="rgb(210,40,34)" fg:x="65046" fg:w="8"/><text x="98.6406%" y="255.50"></text></g><g><title>malloc (12 samples, 0.02%)</title><rect x="98.3906%" y="261" width="0.0182%" height="15" fill="rgb(241,220,44)" fg:x="65046" fg:w="12"/><text x="98.6406%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (49 samples, 0.07%)</title><rect x="98.4117%" y="181" width="0.0741%" height="15" fill="rgb(235,28,35)" fg:x="65060" fg:w="49"/><text x="98.6617%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (49 samples, 0.07%)</title><rect x="98.4117%" y="165" width="0.0741%" height="15" fill="rgb(210,56,17)" fg:x="65060" fg:w="49"/><text x="98.6617%" y="175.50"></text></g><g><title>[libc.so.6] (49 samples, 0.07%)</title><rect x="98.4117%" y="149" width="0.0741%" height="15" fill="rgb(224,130,29)" fg:x="65060" fg:w="49"/><text x="98.6617%" y="159.50"></text></g><g><title>[libc.so.6] (23 samples, 0.03%)</title><rect x="98.4859%" y="69" width="0.0348%" height="15" fill="rgb(235,212,8)" fg:x="65109" fg:w="23"/><text x="98.7359%" y="79.50"></text></g><g><title>malloc (29 samples, 0.04%)</title><rect x="98.4859%" y="85" width="0.0439%" height="15" fill="rgb(223,33,50)" fg:x="65109" fg:w="29"/><text x="98.7359%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (31 samples, 0.05%)</title><rect x="98.4859%" y="133" width="0.0469%" height="15" fill="rgb(219,149,13)" fg:x="65109" fg:w="31"/><text x="98.7359%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31 samples, 0.05%)</title><rect x="98.4859%" y="117" width="0.0469%" height="15" fill="rgb(250,156,29)" fg:x="65109" fg:w="31"/><text x="98.7359%" y="127.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 0.05%)</title><rect x="98.4859%" y="101" width="0.0469%" height="15" fill="rgb(216,193,19)" fg:x="65109" fg:w="31"/><text x="98.7359%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (83 samples, 0.13%)</title><rect x="98.4117%" y="245" width="0.1255%" height="15" fill="rgb(216,135,14)" fg:x="65060" fg:w="83"/><text x="98.6617%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (83 samples, 0.13%)</title><rect x="98.4117%" y="229" width="0.1255%" height="15" fill="rgb(241,47,5)" fg:x="65060" fg:w="83"/><text x="98.6617%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (83 samples, 0.13%)</title><rect x="98.4117%" y="213" width="0.1255%" height="15" fill="rgb(233,42,35)" fg:x="65060" fg:w="83"/><text x="98.6617%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (83 samples, 0.13%)</title><rect x="98.4117%" y="197" width="0.1255%" height="15" fill="rgb(231,13,6)" fg:x="65060" fg:w="83"/><text x="98.6617%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (34 samples, 0.05%)</title><rect x="98.4859%" y="181" width="0.0514%" height="15" fill="rgb(207,181,40)" fg:x="65109" fg:w="34"/><text x="98.7359%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (34 samples, 0.05%)</title><rect x="98.4859%" y="165" width="0.0514%" height="15" fill="rgb(254,173,49)" fg:x="65109" fg:w="34"/><text x="98.7359%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (34 samples, 0.05%)</title><rect x="98.4859%" y="149" width="0.0514%" height="15" fill="rgb(221,1,38)" fg:x="65109" fg:w="34"/><text x="98.7359%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (118 samples, 0.18%)</title><rect x="98.4117%" y="261" width="0.1785%" height="15" fill="rgb(206,124,46)" fg:x="65060" fg:w="118"/><text x="98.6617%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (173 samples, 0.26%)</title><rect x="98.3906%" y="277" width="0.2617%" height="15" fill="rgb(249,21,11)" fg:x="65046" fg:w="173"/><text x="98.6406%" y="287.50"></text></g><g><title>[libc.so.6] (13 samples, 0.02%)</title><rect x="98.6522%" y="245" width="0.0197%" height="15" fill="rgb(222,201,40)" fg:x="65219" fg:w="13"/><text x="98.9022%" y="255.50"></text></g><g><title>malloc (14 samples, 0.02%)</title><rect x="98.6522%" y="261" width="0.0212%" height="15" fill="rgb(235,61,29)" fg:x="65219" fg:w="14"/><text x="98.9022%" y="271.50"></text></g><g><title>[libc.so.6] (12 samples, 0.02%)</title><rect x="98.6749%" y="229" width="0.0182%" height="15" fill="rgb(219,207,3)" fg:x="65234" fg:w="12"/><text x="98.9249%" y="239.50"></text></g><g><title>malloc (15 samples, 0.02%)</title><rect x="98.6749%" y="245" width="0.0227%" height="15" fill="rgb(222,56,46)" fg:x="65234" fg:w="15"/><text x="98.9249%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (30 samples, 0.05%)</title><rect x="98.6976%" y="165" width="0.0454%" height="15" fill="rgb(239,76,54)" fg:x="65249" fg:w="30"/><text x="98.9476%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (30 samples, 0.05%)</title><rect x="98.6976%" y="149" width="0.0454%" height="15" fill="rgb(231,124,27)" fg:x="65249" fg:w="30"/><text x="98.9476%" y="159.50"></text></g><g><title>[libc.so.6] (30 samples, 0.05%)</title><rect x="98.6976%" y="133" width="0.0454%" height="15" fill="rgb(249,195,6)" fg:x="65249" fg:w="30"/><text x="98.9476%" y="143.50"></text></g><g><title>[libc.so.6] (8 samples, 0.01%)</title><rect x="98.7430%" y="53" width="0.0121%" height="15" fill="rgb(237,174,47)" fg:x="65279" fg:w="8"/><text x="98.9930%" y="63.50"></text></g><g><title>malloc (12 samples, 0.02%)</title><rect x="98.7430%" y="69" width="0.0182%" height="15" fill="rgb(206,201,31)" fg:x="65279" fg:w="12"/><text x="98.9930%" y="79.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.02%)</title><rect x="98.7430%" y="117" width="0.0212%" height="15" fill="rgb(231,57,52)" fg:x="65279" fg:w="14"/><text x="98.9930%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.02%)</title><rect x="98.7430%" y="101" width="0.0212%" height="15" fill="rgb(248,177,22)" fg:x="65279" fg:w="14"/><text x="98.9930%" y="111.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.02%)</title><rect x="98.7430%" y="85" width="0.0212%" height="15" fill="rgb(215,211,37)" fg:x="65279" fg:w="14"/><text x="98.9930%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (46 samples, 0.07%)</title><rect x="98.6976%" y="229" width="0.0696%" height="15" fill="rgb(241,128,51)" fg:x="65249" fg:w="46"/><text x="98.9476%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (46 samples, 0.07%)</title><rect x="98.6976%" y="213" width="0.0696%" height="15" fill="rgb(227,165,31)" fg:x="65249" fg:w="46"/><text x="98.9476%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (46 samples, 0.07%)</title><rect x="98.6976%" y="197" width="0.0696%" height="15" fill="rgb(228,167,24)" fg:x="65249" fg:w="46"/><text x="98.9476%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (46 samples, 0.07%)</title><rect x="98.6976%" y="181" width="0.0696%" height="15" fill="rgb(228,143,12)" fg:x="65249" fg:w="46"/><text x="98.9476%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.02%)</title><rect x="98.7430%" y="165" width="0.0242%" height="15" fill="rgb(249,149,8)" fg:x="65279" fg:w="16"/><text x="98.9930%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.02%)</title><rect x="98.7430%" y="149" width="0.0242%" height="15" fill="rgb(243,35,44)" fg:x="65279" fg:w="16"/><text x="98.9930%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.02%)</title><rect x="98.7430%" y="133" width="0.0242%" height="15" fill="rgb(246,89,9)" fg:x="65279" fg:w="16"/><text x="98.9930%" y="143.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (73 samples, 0.11%)</title><rect x="98.6976%" y="245" width="0.1104%" height="15" fill="rgb(233,213,13)" fg:x="65249" fg:w="73"/><text x="98.9476%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (137 samples, 0.21%)</title><rect x="98.6749%" y="261" width="0.2072%" height="15" fill="rgb(233,141,41)" fg:x="65234" fg:w="137"/><text x="98.9249%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (12 samples, 0.02%)</title><rect x="98.8988%" y="149" width="0.0182%" height="15" fill="rgb(239,167,4)" fg:x="65382" fg:w="12"/><text x="99.1488%" y="159.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.02%)</title><rect x="98.8988%" y="133" width="0.0182%" height="15" fill="rgb(209,217,16)" fg:x="65382" fg:w="12"/><text x="99.1488%" y="143.50"></text></g><g><title>[libc.so.6] (12 samples, 0.02%)</title><rect x="98.8988%" y="117" width="0.0182%" height="15" fill="rgb(219,88,35)" fg:x="65382" fg:w="12"/><text x="99.1488%" y="127.50"></text></g><g><title>[libc.so.6] (7 samples, 0.01%)</title><rect x="98.9170%" y="37" width="0.0106%" height="15" fill="rgb(220,193,23)" fg:x="65394" fg:w="7"/><text x="99.1670%" y="47.50"></text></g><g><title>malloc (8 samples, 0.01%)</title><rect x="98.9170%" y="53" width="0.0121%" height="15" fill="rgb(230,90,52)" fg:x="65394" fg:w="8"/><text x="99.1670%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (21 samples, 0.03%)</title><rect x="98.8988%" y="213" width="0.0318%" height="15" fill="rgb(252,106,19)" fg:x="65382" fg:w="21"/><text x="99.1488%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (21 samples, 0.03%)</title><rect x="98.8988%" y="197" width="0.0318%" height="15" fill="rgb(206,74,20)" fg:x="65382" fg:w="21"/><text x="99.1488%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (21 samples, 0.03%)</title><rect x="98.8988%" y="181" width="0.0318%" height="15" fill="rgb(230,138,44)" fg:x="65382" fg:w="21"/><text x="99.1488%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (21 samples, 0.03%)</title><rect x="98.8988%" y="165" width="0.0318%" height="15" fill="rgb(235,182,43)" fg:x="65382" fg:w="21"/><text x="99.1488%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.01%)</title><rect x="98.9170%" y="149" width="0.0136%" height="15" fill="rgb(242,16,51)" fg:x="65394" fg:w="9"/><text x="99.1670%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.01%)</title><rect x="98.9170%" y="133" width="0.0136%" height="15" fill="rgb(248,9,4)" fg:x="65394" fg:w="9"/><text x="99.1670%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.01%)</title><rect x="98.9170%" y="117" width="0.0136%" height="15" fill="rgb(210,31,22)" fg:x="65394" fg:w="9"/><text x="99.1670%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.01%)</title><rect x="98.9170%" y="101" width="0.0136%" height="15" fill="rgb(239,54,39)" fg:x="65394" fg:w="9"/><text x="99.1670%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.01%)</title><rect x="98.9170%" y="85" width="0.0136%" height="15" fill="rgb(230,99,41)" fg:x="65394" fg:w="9"/><text x="99.1670%" y="95.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.01%)</title><rect x="98.9170%" y="69" width="0.0136%" height="15" fill="rgb(253,106,12)" fg:x="65394" fg:w="9"/><text x="99.1670%" y="79.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (37 samples, 0.06%)</title><rect x="98.8988%" y="229" width="0.0560%" height="15" fill="rgb(213,46,41)" fg:x="65382" fg:w="37"/><text x="99.1488%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (71 samples, 0.11%)</title><rect x="98.8897%" y="245" width="0.1074%" height="15" fill="rgb(215,133,35)" fg:x="65376" fg:w="71"/><text x="99.1397%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.02%)</title><rect x="99.0077%" y="197" width="0.0151%" height="15" fill="rgb(213,28,5)" fg:x="65454" fg:w="10"/><text x="99.2577%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (10 samples, 0.02%)</title><rect x="99.0077%" y="181" width="0.0151%" height="15" fill="rgb(215,77,49)" fg:x="65454" fg:w="10"/><text x="99.2577%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (10 samples, 0.02%)</title><rect x="99.0077%" y="165" width="0.0151%" height="15" fill="rgb(248,100,22)" fg:x="65454" fg:w="10"/><text x="99.2577%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (10 samples, 0.02%)</title><rect x="99.0077%" y="149" width="0.0151%" height="15" fill="rgb(208,67,9)" fg:x="65454" fg:w="10"/><text x="99.2577%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (16 samples, 0.02%)</title><rect x="99.0077%" y="213" width="0.0242%" height="15" fill="rgb(219,133,21)" fg:x="65454" fg:w="16"/><text x="99.2577%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (27 samples, 0.04%)</title><rect x="98.9986%" y="229" width="0.0408%" height="15" fill="rgb(246,46,29)" fg:x="65448" fg:w="27"/><text x="99.2486%" y="239.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (34 samples, 0.05%)</title><rect x="98.9971%" y="245" width="0.0514%" height="15" fill="rgb(246,185,52)" fg:x="65447" fg:w="34"/><text x="99.2471%" y="255.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (120 samples, 0.18%)</title><rect x="98.8822%" y="261" width="0.1815%" height="15" fill="rgb(252,136,11)" fg:x="65371" fg:w="120"/><text x="99.1322%" y="271.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (284 samples, 0.43%)</title><rect x="98.6522%" y="277" width="0.4296%" height="15" fill="rgb(219,138,53)" fg:x="65219" fg:w="284"/><text x="98.9022%" y="287.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (493 samples, 0.75%)</title><rect x="98.3664%" y="293" width="0.7457%" height="15" fill="rgb(211,51,23)" fg:x="65030" fg:w="493"/><text x="98.6164%" y="303.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (714 samples, 1.08%)</title><rect x="98.0517%" y="309" width="1.0800%" height="15" fill="rgb(247,221,28)" fg:x="64822" fg:w="714"/><text x="98.3017%" y="319.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (801 samples, 1.21%)</title><rect x="97.9337%" y="325" width="1.2116%" height="15" fill="rgb(251,222,45)" fg:x="64744" fg:w="801"/><text x="98.1837%" y="335.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2,109 samples, 3.19%)</title><rect x="95.9885%" y="357" width="3.1901%" height="15" fill="rgb(217,162,53)" fg:x="63458" fg:w="2109"/><text x="96.2385%" y="367.50">&lt;ha..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,109 samples, 3.19%)</title><rect x="95.9885%" y="341" width="3.1901%" height="15" fill="rgb(229,93,14)" fg:x="63458" fg:w="2109"/><text x="96.2385%" y="351.50">&lt;co..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (51 samples, 0.08%)</title><rect x="99.1786%" y="277" width="0.0771%" height="15" fill="rgb(209,67,49)" fg:x="65567" fg:w="51"/><text x="99.4286%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (51 samples, 0.08%)</title><rect x="99.1786%" y="261" width="0.0771%" height="15" fill="rgb(213,87,29)" fg:x="65567" fg:w="51"/><text x="99.4286%" y="271.50"></text></g><g><title>[libc.so.6] (51 samples, 0.08%)</title><rect x="99.1786%" y="245" width="0.0771%" height="15" fill="rgb(205,151,52)" fg:x="65567" fg:w="51"/><text x="99.4286%" y="255.50"></text></g><g><title>malloc (8 samples, 0.01%)</title><rect x="99.2558%" y="181" width="0.0121%" height="15" fill="rgb(253,215,39)" fg:x="65618" fg:w="8"/><text x="99.5058%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.02%)</title><rect x="99.2558%" y="229" width="0.0166%" height="15" fill="rgb(221,220,41)" fg:x="65618" fg:w="11"/><text x="99.5058%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.02%)</title><rect x="99.2558%" y="213" width="0.0166%" height="15" fill="rgb(218,133,21)" fg:x="65618" fg:w="11"/><text x="99.5058%" y="223.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.02%)</title><rect x="99.2558%" y="197" width="0.0166%" height="15" fill="rgb(221,193,43)" fg:x="65618" fg:w="11"/><text x="99.5058%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (63 samples, 0.10%)</title><rect x="99.1786%" y="341" width="0.0953%" height="15" fill="rgb(240,128,52)" fg:x="65567" fg:w="63"/><text x="99.4286%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (63 samples, 0.10%)</title><rect x="99.1786%" y="325" width="0.0953%" height="15" fill="rgb(253,114,12)" fg:x="65567" fg:w="63"/><text x="99.4286%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (63 samples, 0.10%)</title><rect x="99.1786%" y="309" width="0.0953%" height="15" fill="rgb(215,223,47)" fg:x="65567" fg:w="63"/><text x="99.4286%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (63 samples, 0.10%)</title><rect x="99.1786%" y="293" width="0.0953%" height="15" fill="rgb(248,225,23)" fg:x="65567" fg:w="63"/><text x="99.4286%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12 samples, 0.02%)</title><rect x="99.2558%" y="277" width="0.0182%" height="15" fill="rgb(250,108,0)" fg:x="65618" fg:w="12"/><text x="99.5058%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12 samples, 0.02%)</title><rect x="99.2558%" y="261" width="0.0182%" height="15" fill="rgb(228,208,7)" fg:x="65618" fg:w="12"/><text x="99.5058%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.02%)</title><rect x="99.2558%" y="245" width="0.0182%" height="15" fill="rgb(244,45,10)" fg:x="65618" fg:w="12"/><text x="99.5058%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (90 samples, 0.14%)</title><rect x="99.1786%" y="357" width="0.1361%" height="15" fill="rgb(207,125,25)" fg:x="65567" fg:w="90"/><text x="99.4286%" y="367.50"></text></g><g><title>[libc.so.6] (14 samples, 0.02%)</title><rect x="99.3178%" y="325" width="0.0212%" height="15" fill="rgb(210,195,18)" fg:x="65659" fg:w="14"/><text x="99.5678%" y="335.50"></text></g><g><title>cfree (22 samples, 0.03%)</title><rect x="99.3178%" y="341" width="0.0333%" height="15" fill="rgb(249,80,12)" fg:x="65659" fg:w="22"/><text x="99.5678%" y="351.50"></text></g><g><title>_ZN9hashbrown3raw21RawTable$LT$T$C$A$GT$14reserve_rehash17h2ebbd0e7aa264835E.llvm.14405753220202053966 (15 samples, 0.02%)</title><rect x="99.3526%" y="341" width="0.0227%" height="15" fill="rgb(221,65,9)" fg:x="65682" fg:w="15"/><text x="99.6026%" y="351.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17h7de98786dd306c01E.llvm.2155141149179804710 (16 samples, 0.02%)</title><rect x="99.3753%" y="293" width="0.0242%" height="15" fill="rgb(235,49,36)" fg:x="65697" fg:w="16"/><text x="99.6253%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (29 samples, 0.04%)</title><rect x="99.3753%" y="309" width="0.0439%" height="15" fill="rgb(225,32,20)" fg:x="65697" fg:w="29"/><text x="99.6253%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (64 samples, 0.10%)</title><rect x="99.3753%" y="325" width="0.0968%" height="15" fill="rgb(215,141,46)" fg:x="65697" fg:w="64"/><text x="99.6253%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (67 samples, 0.10%)</title><rect x="99.3753%" y="341" width="0.1013%" height="15" fill="rgb(250,160,47)" fg:x="65697" fg:w="67"/><text x="99.6253%" y="351.50"></text></g><g><title>[libc.so.6] (9 samples, 0.01%)</title><rect x="99.4842%" y="213" width="0.0136%" height="15" fill="rgb(216,222,40)" fg:x="65769" fg:w="9"/><text x="99.7342%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (10 samples, 0.02%)</title><rect x="99.4842%" y="245" width="0.0151%" height="15" fill="rgb(234,217,39)" fg:x="65769" fg:w="10"/><text x="99.7342%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.02%)</title><rect x="99.4842%" y="229" width="0.0151%" height="15" fill="rgb(207,178,40)" fg:x="65769" fg:w="10"/><text x="99.7342%" y="239.50"></text></g><g><title>malloc (9 samples, 0.01%)</title><rect x="99.4993%" y="149" width="0.0136%" height="15" fill="rgb(221,136,13)" fg:x="65779" fg:w="9"/><text x="99.7493%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.02%)</title><rect x="99.4993%" y="197" width="0.0227%" height="15" fill="rgb(249,199,10)" fg:x="65779" fg:w="15"/><text x="99.7493%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.02%)</title><rect x="99.4993%" y="181" width="0.0227%" height="15" fill="rgb(249,222,13)" fg:x="65779" fg:w="15"/><text x="99.7493%" y="191.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.02%)</title><rect x="99.4993%" y="165" width="0.0227%" height="15" fill="rgb(244,185,38)" fg:x="65779" fg:w="15"/><text x="99.7493%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (26 samples, 0.04%)</title><rect x="99.4842%" y="309" width="0.0393%" height="15" fill="rgb(236,202,9)" fg:x="65769" fg:w="26"/><text x="99.7342%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (26 samples, 0.04%)</title><rect x="99.4842%" y="293" width="0.0393%" height="15" fill="rgb(250,229,37)" fg:x="65769" fg:w="26"/><text x="99.7342%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (26 samples, 0.04%)</title><rect x="99.4842%" y="277" width="0.0393%" height="15" fill="rgb(206,174,23)" fg:x="65769" fg:w="26"/><text x="99.7342%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (26 samples, 0.04%)</title><rect x="99.4842%" y="261" width="0.0393%" height="15" fill="rgb(211,33,43)" fg:x="65769" fg:w="26"/><text x="99.7342%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.02%)</title><rect x="99.4993%" y="245" width="0.0242%" height="15" fill="rgb(245,58,50)" fg:x="65779" fg:w="16"/><text x="99.7493%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.02%)</title><rect x="99.4993%" y="229" width="0.0242%" height="15" fill="rgb(244,68,36)" fg:x="65779" fg:w="16"/><text x="99.7493%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.02%)</title><rect x="99.4993%" y="213" width="0.0242%" height="15" fill="rgb(232,229,15)" fg:x="65779" fg:w="16"/><text x="99.7493%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (31 samples, 0.05%)</title><rect x="99.4842%" y="325" width="0.0469%" height="15" fill="rgb(254,30,23)" fg:x="65769" fg:w="31"/><text x="99.7342%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (49 samples, 0.07%)</title><rect x="99.4766%" y="341" width="0.0741%" height="15" fill="rgb(235,160,14)" fg:x="65764" fg:w="49"/><text x="99.7266%" y="351.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::cmp::PartialOrd&gt;::partial_cmp (172 samples, 0.26%)</title><rect x="99.3148%" y="357" width="0.2602%" height="15" fill="rgb(212,155,44)" fg:x="65657" fg:w="172"/><text x="99.5648%" y="367.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (15 samples, 0.02%)</title><rect x="99.5750%" y="357" width="0.0227%" height="15" fill="rgb(226,2,50)" fg:x="65829" fg:w="15"/><text x="99.8250%" y="367.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (10 samples, 0.02%)</title><rect x="99.5825%" y="341" width="0.0151%" height="15" fill="rgb(234,177,6)" fg:x="65834" fg:w="10"/><text x="99.8325%" y="351.50"></text></g><g><title>&lt;aes_grinder::algo::Algo as core::clone::Clone&gt;::clone (7 samples, 0.01%)</title><rect x="99.5871%" y="325" width="0.0106%" height="15" fill="rgb(217,24,9)" fg:x="65837" fg:w="7"/><text x="99.8371%" y="335.50"></text></g><g><title>_start (66,077 samples, 99.95%)</title><rect x="0.0000%" y="629" width="99.9501%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="66077"/><text x="0.2500%" y="639.50">_start</text></g><g><title>__libc_start_main (66,077 samples, 99.95%)</title><rect x="0.0000%" y="613" width="99.9501%" height="15" fill="rgb(239,221,27)" fg:x="0" fg:w="66077"/><text x="0.2500%" y="623.50">__libc_start_main</text></g><g><title>[libc.so.6] (66,077 samples, 99.95%)</title><rect x="0.0000%" y="597" width="99.9501%" height="15" fill="rgb(222,198,25)" fg:x="0" fg:w="66077"/><text x="0.2500%" y="607.50">[libc.so.6]</text></g><g><title>main (66,077 samples, 99.95%)</title><rect x="0.0000%" y="581" width="99.9501%" height="15" fill="rgb(211,99,13)" fg:x="0" fg:w="66077"/><text x="0.2500%" y="591.50">main</text></g><g><title>std::rt::lang_start_internal (66,077 samples, 99.95%)</title><rect x="0.0000%" y="565" width="99.9501%" height="15" fill="rgb(232,111,31)" fg:x="0" fg:w="66077"/><text x="0.2500%" y="575.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (66,077 samples, 99.95%)</title><rect x="0.0000%" y="549" width="99.9501%" height="15" fill="rgb(245,82,37)" fg:x="0" fg:w="66077"/><text x="0.2500%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (66,077 samples, 99.95%)</title><rect x="0.0000%" y="533" width="99.9501%" height="15" fill="rgb(227,149,46)" fg:x="0" fg:w="66077"/><text x="0.2500%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (66,077 samples, 99.95%)</title><rect x="0.0000%" y="517" width="99.9501%" height="15" fill="rgb(218,36,50)" fg:x="0" fg:w="66077"/><text x="0.2500%" y="527.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (66,077 samples, 99.95%)</title><rect x="0.0000%" y="501" width="99.9501%" height="15" fill="rgb(226,80,48)" fg:x="0" fg:w="66077"/><text x="0.2500%" y="511.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (66,077 samples, 99.95%)</title><rect x="0.0000%" y="485" width="99.9501%" height="15" fill="rgb(238,224,15)" fg:x="0" fg:w="66077"/><text x="0.2500%" y="495.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (66,077 samples, 99.95%)</title><rect x="0.0000%" y="469" width="99.9501%" height="15" fill="rgb(241,136,10)" fg:x="0" fg:w="66077"/><text x="0.2500%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (66,077 samples, 99.95%)</title><rect x="0.0000%" y="453" width="99.9501%" height="15" fill="rgb(208,32,45)" fg:x="0" fg:w="66077"/><text x="0.2500%" y="463.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (66,077 samples, 99.95%)</title><rect x="0.0000%" y="437" width="99.9501%" height="15" fill="rgb(207,135,9)" fg:x="0" fg:w="66077"/><text x="0.2500%" y="447.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h98e52848e9afc971E.llvm.2695725415076864416 (66,077 samples, 99.95%)</title><rect x="0.0000%" y="421" width="99.9501%" height="15" fill="rgb(206,86,44)" fg:x="0" fg:w="66077"/><text x="0.2500%" y="431.50">_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h98e52848e9afc971E.llvm.2695725415076864416</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (66,077 samples, 99.95%)</title><rect x="0.0000%" y="405" width="99.9501%" height="15" fill="rgb(245,177,15)" fg:x="0" fg:w="66077"/><text x="0.2500%" y="415.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>aes_grinder::main (66,077 samples, 99.95%)</title><rect x="0.0000%" y="389" width="99.9501%" height="15" fill="rgb(206,64,50)" fg:x="0" fg:w="66077"/><text x="0.2500%" y="399.50">aes_grinder::main</text></g><g><title>aes_grinder::exaustive_search::exhaustive_search (65,963 samples, 99.78%)</title><rect x="0.1724%" y="373" width="99.7776%" height="15" fill="rgb(234,36,40)" fg:x="114" fg:w="65963"/><text x="0.4224%" y="383.50">aes_grinder::exaustive_search::exhaustive_search</text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="99.9501%" y="629" width="0.0106%" height="15" fill="rgb(213,64,8)" fg:x="66077" fg:w="7"/><text x="100.2001%" y="639.50"></text></g><g><title>[libc.so.6] (7 samples, 0.01%)</title><rect x="99.9501%" y="613" width="0.0106%" height="15" fill="rgb(210,75,36)" fg:x="66077" fg:w="7"/><text x="100.2001%" y="623.50"></text></g><g><title>[unknown] (7 samples, 0.01%)</title><rect x="99.9501%" y="597" width="0.0106%" height="15" fill="rgb(229,88,21)" fg:x="66077" fg:w="7"/><text x="100.2001%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.01%)</title><rect x="99.9682%" y="613" width="0.0106%" height="15" fill="rgb(252,204,47)" fg:x="66089" fg:w="7"/><text x="100.2182%" y="623.50"></text></g><g><title>[ld-linux-x86-64.so.2] (9 samples, 0.01%)</title><rect x="99.9667%" y="629" width="0.0136%" height="15" fill="rgb(208,77,27)" fg:x="66088" fg:w="9"/><text x="100.2167%" y="639.50"></text></g><g><title>[[stack]] (8 samples, 0.01%)</title><rect x="99.9803%" y="629" width="0.0121%" height="15" fill="rgb(221,76,26)" fg:x="66097" fg:w="8"/><text x="100.2303%" y="639.50"></text></g><g><title>[libc.so.6] (8 samples, 0.01%)</title><rect x="99.9803%" y="613" width="0.0121%" height="15" fill="rgb(225,139,18)" fg:x="66097" fg:w="8"/><text x="100.2303%" y="623.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="99.9803%" y="597" width="0.0121%" height="15" fill="rgb(230,137,11)" fg:x="66097" fg:w="8"/><text x="100.2303%" y="607.50"></text></g><g><title>all (66,110 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(212,28,1)" fg:x="0" fg:w="66110"/><text x="0.2500%" y="671.50"></text></g><g><title>aes_grinder (66,110 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(248,164,17)" fg:x="0" fg:w="66110"/><text x="0.2500%" y="655.50">aes_grinder</text></g></svg></svg>